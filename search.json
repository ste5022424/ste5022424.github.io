[{"title":"Sequelize Migrations","url":"/2019/07/02/Sequelize-Migrations/","content":"\n> mysql 可以參考[這篇](https://ste5022424.github.io/2019/05/28/Mysql-on-Docker/)\n\n## 1. Installing CLI\n\n```bash\nnpm install --save sequelize\nnpm install --save sequelize-cli\nnpm install mysql2\n```\n\n## 2. Init\n\n```bash\nnpx sequelize-cli init\n```\n\n![Init](./2019-07-02-17-07-31.png)\n\n## 3. 設定相關連線資訊\n\n![set](./2019-07-02-17-26-11.png)\n\n## 4. Create Database\n\n```bash\nnpx sequelize-cli db:create mydatabase\n```\n\n## 5. Create First Model\n\n```bash\nnpx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string\n```\n\n## 6. Running Migrations\n\n```bash\nnpx sequelize-cli db:migrate\n```\n\n![Migrations](./2019-07-03-10-42-23.png)\n\n## 7. Creating First Seed\n\n```bash\nnpx sequelize-cli seed:generate --name demo-user\n```\n\n> seeders/xxxxxxxxxxxx-demo-user.js\n\n```javascript\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert(\n      'Users',\n      [\n        {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'demo@demo.com',\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ],\n      {}\n    );\n  },\n\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Users', null, {});\n  }\n};\n```\n\n## 8. Running Seeds\n\n```bash\nnpx sequelize-cli db:seed:all\n```\n\n![Running Seeds](./2019-07-03-10-44-45.png)\n\n## Reference\n\n- \b[Sequelizejs](http://docs.sequelizejs.com/manual/migrations.html)\n- [Sequelize-cli](https://www.npmjs.com/package/sequelize-cli)\n","tags":["Sequelize","Node js"],"categories":["Sequelize"]},{"title":"Mongo on Docker","url":"/2019/06/26/Mongo-on-Docker/","content":"\n```bash\n\n# Use root/example as user/password credentials\nversion: '3.5'\n\nnetworks:\n  consumer:\n    name: consumer\n\nservices:\n  mongo:\n    container_name: 'mongo'\n    image: mongo\n    restart: always\n    volumes:\n      - '/tmp/docker/data/mongo:/data/db'\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: root\n    networks:\n      - consumer\n\n  mongo-express:\n    container_name: 'mongo_express'\n    image: mongo-express\n    restart: always\n    ports:\n      - 8082:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: root\n      ME_CONFIG_MONGODB_ADMINPASSWORD: root\n    networks:\n      - consumer\n\n\n```\n\n## Reference\n\n- [mongo docker](https://hub.docker.com/_/mongo)\n- [mongo](https://www.mongodb.com/)\n"},{"title":"Node Js - Log4js","url":"/2019/06/18/Node-Js-Log4js/","content":"\n## 1. install package\n\n```bash\nnpm i config\nnpm i log4js\n```\n\n## 2. Creat config/default.json\n\n```json\n{\n  \"logger\": {\n    \"appenders\": {\n      \"file\": {\n        \"type\": \"file\",\n        \"filename\": \"logs/log.log\",\n        \"maxLogSize\": 104857600,\n        \"backups\": 10,\n        \"layout\": {\n          \"type\": \"json\"\n        }\n      },\n      \"console\": {\n        \"type\": \"console\"\n      }\n    },\n    \"categories\": {\n      \"default\": {\n        \"appenders\": [\"file\"],\n        \"level\": \"trace\"\n      }\n    }\n  }\n}\n```\n\n## 3. Creat log.js\n\n```javascript\nconst config = require('config');\nconst log4js = require('log4js');\n\nlog4js.addLayout('json', function(config) {\n  return function(logEvent) {\n    return JSON.stringify(logEvent);\n  };\n});\n\nlog4js.configure(config.logger);\n\nmodule.exports = {\n  log4js,\n  getLogger: log4js.getLogger\n};\n```\n\n## 4. Ceate index.js\n\n```javascript\nconst logger = require('./log').getLogger('logtest');\nlogger.trace('testTrace');\nlogger.debug('testDebug');\nlogger.info('testInfo');\nlogger.warn('testWarn');\nlogger.error('testError');\nlogger.fatal('testFatal');\n```\n\n## 5. Run\n\n```bash\nnode index.js\n```\n\n![index](./2019-06-19-10-26-02.png)\n\n> [Demo](https://github.com/ste5022424/log4j_demo.git)\n\n## Reference\n\n- [log4js](https://www.npmjs.com/package/log4js)\n- [log4js-node.github.io](https://log4js-node.github.io/log4js-node/)\n","tags":["Node JS","log4js"],"categories":["log4js"]},{"title":"Json Web Token","url":"/2019/06/17/Json-Web-Token/","content":"\n## Json Web Token\n\n```javascript\nvar jwt = require('jsonwebtoken');\nvar token = jwt.sign({ data: 'mydata' }, 'mysecret');\nconsole.log(`Token : ${token}`);\n\nvar decode = jwt.verify(token, 'mysecret');\nconsole.log(`Data : ${decode.data}`);\n```\n\n![jwt](./2019-06-17-16-40-23.png)\n\n## Reference\n\n- [JWT](https://jwt.io/)\n- [node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)\n","tags":["Node Js","JWT"],"categories":["JWT"]},{"title":"Sequelize-sequelize-auto","url":"/2019/06/14/Sequelize-sequelize-auto/","content":"\n## Sequelize-sequelize-auto\n\n> 自動產生資料庫關聯模型\n\n### 1. install sequelize-auto\n\n``` bash\nnpm install -g sequelize-auto\n```\n\n### 2. install mysql\n\n``` bash\nnpm install -g mysql\n```\n\n### 3. Run sequelize-auto\n\n```bash\nsequelize-auto -o \"./models\" -d tablename -h localhost -u my_username -p 5432 -x my_password -e mysql\n```\n\n### 4. User.js\n\n> 這時候就會產生一個跟資料庫對應的模型(/model/User.js)\n> 如果欄位自動號碼的話記得加上 （autoIncrement: true)\n\n```javascript\n\n/* jshint indent: 2 */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('User', {\n    ID: {\n      type: DataTypes.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    Name: {\n      type: DataTypes.STRING(50),\n      allowNull: false\n    },\n    Telephone: {\n      type: DataTypes.STRING(20),\n      allowNull: true\n    },\n    Age: {\n      type: DataTypes.INTEGER(11),\n      allowNull: true\n    }\n  }, {\n      tableName: 'User',\n      timestamps: false\n    });\n};\n\n```\n\n![model](./2019-06-14-15-43-05.png)\n\n### 5. sequelize.js\n\n```javascript\nconst Sequelize = require('sequelize');\nconst config = require('config');\n\nmodule.exports = new Sequelize(config.db.database, config.db.user, config.db.password, {\n    host: config.db.host,\n    dialect: 'mysql',\n    define: {\n        timestamps: false\n    }\n});\n\n```\n\n### 6. index.js\n\n```javascript\nconst Sequelize = require('sequelize');\nconst sequelize = require('./database/sequelize/sequelize')\nconst User = require('./models/User')(sequelize, Sequelize);\n\n// Find all users\nUser.findAll().then(users => {\n    console.log(\"All users:\", JSON.stringify(users, null, 4));\n});\n\n// Insert\nUser.create({\n    Name: 'Tom',\n    Telephone: '09097895541s',\n    Age: '20'\n}).then(the => {\n    console.log(`Insert OK >> ID:${the.ID}`);\n});\n\n// Delete\nUser.destroy({\n    where: {\n        Name: \"Tom\"\n    }\n}).then(() => {\n    console.log(`Delete Tom Done`);\n});\n\n// Update\nUser.update({ Name: \"WuWu\" }, {\n    where: {\n        Name: \"Wu\"\n    }\n}).then(() => {\n    console.log(\"Update Wu Done\");\n});\n\n```\n\n![shoe](./2019-06-14-15-46-33.png)\n\n## [Demo](https://github.com/ste5022424/sequelize_demo.git)\n\n## Reference\n\n* [sequelizejs](http://docs.sequelizejs.com/manual/getting-started.html)\n* [sequelize-auto](https://github.com/sequelize/sequelize-auto)\n","tags":["Sequelize","Node js"],"categories":["Sequelize"]},{"title":"Google Cloud Pub/Sub: Qwik Start - Command Line","url":"/2019/06/10/Google-Cloud-Pub-Sub-Qwik-Start-Command-Line/","content":"\n## Google Cloud Pub/Sub: Qwik Start - Command Line\n\n### Set Project ID 設定 Project ID\n\n```bash\ngcloud config set project qwiklabs-gcp-5c43d7b7f27776fe\n```\n\n## Topics\n\n### Create Pub/Sub Topics 建立主題\n\n```bash\ngcloud pubsub topics create myTopic\ngcloud pubsub topics create Test1\ngcloud pubsub topics create Test2\n```\n\n### Delete Topics 刪除主題\n\n```bash=\ngcloud pubsub topics delete Test1\n```\n\n## Subscriptions\n\n### Create Subscriptions 建立訂閱\n\n```bash\ngcloud pubsub subscriptions create --topic myTopic mySubscription\n```\n\n### Delete Subscription 刪除主題\n\n```bash\ngcloud pubsub subscriptions delete mySubscription\n```\n\n### Autoack\n\n```bash\ngcloud pubsub subscriptions pull mySubscription --auto-ack\n```\n\n## Publish\n\n### Publish message 加入 Message 至 Topic\n\n```bash\ngcloud pubsub topics publish myTopic --message \"Hello\"\n```\n\n## Pull\n\n### Pull Message\n\n```bash=\ngcloud pubsub subscriptions pull mySubscription --auto-ack --limit=3\n```\n\n> --limit=3 取得前三個\n\n## Reference\n\n* [Google Cloud Pub/Sub: Qwik Start - Command Line](https://google.qwiklabs.com/focuses/925?catalog_rank=%7B%22rank%22%3A5%2C%22num_filters%22%3A0%2C%22has_search%22%3Atrue%7D&parent=catalog&search_id=2711958)\n* [將 Cloud Pub/Sub 與 Node.js 搭配使用](https://cloud.google.com/nodejs/getting-started/using-pub-sub?hl=zh-tw)\n* [nodejs-pubsub](https://github.com/googleapis/nodejs-pubsub)\n","tags":["GCP Pub/Sub"],"categories":["GCP Pub/Sub"]},{"title":"Google Cloud Pub/Sub: Node.js Client","url":"/2019/06/10/Google-Cloud-Pub-Sub-Node-js-Client/","content":"\n## Google Cloud Pub/Sub: Node.js Client\n\n## 1. 啟用 [API 服務](https://console.developers.google.com/apis/library/pubsub.googleapis.com?q=pub&id=e5839763-4006-424c-89ae-49057442b67a&project=green-cell-242807)\n\n![API 服務](https://i.imgur.com/qGZefyd.png)\n\n## 2. [建立服務帳戶金鑰](https://console.cloud.google.com/apis/credentials/)\n\n![建立服務帳戶金鑰](https://i.imgur.com/nyJzv1P.png)\n\n![建立服務帳戶金鑰](https://i.imgur.com/H39UREY.png)\n\n## 3. [啟用驗證](https://cloud.google.com/docs/authentication/getting-started#auth-cloud-implicit-nodejs)\n\n> 將下載的檔案放到專案中並指定路徑\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=\"[PATH]\"\n```\n\n## 4. install Package\n\n```bash\nnpm install @google-cloud/pubsub\n```\n\n## 5. Create Topic\n\n```javascript\n// Imports the Google Cloud client library\nconst { PubSub } = require('@google-cloud/pubsub');\n\nasync function quickstart(\n  projectId = 'your-project-id', // Your Google Cloud Platform project ID\n  topicName = 'my-topic' // Name for the new topic to create\n) {\n  // Instantiates a client\n  const pubsub = new PubSub({ projectId });\n\n  // Creates the new topic\n  const [topic] = await pubsub.createTopic(topicName);\n  console.log(`Topic ${topic.name} created.`);\n}\nquickstart();\n```\n\n## 6. Create Subscription\n\n```javascript\nasync function createSubscription(topicName, subscriptionName) {\n  // [START pubsub_create_pull_subscription]\n  // Imports the Google Cloud client library\n  const { PubSub } = require('@google-cloud/pubsub');\n\n  // Creates a client\n  const pubsub = new PubSub();\n\n  /**\n   * TODO(developer): Uncomment the following lines to run the sample.\n   */\n  // const topicName = 'my-topic';\n  // const subscriptionName = 'my-sub';\n\n  // Creates a new subscription\n  await pubsub.topic(topicName).createSubscription(subscriptionName);\n  console.log(`Subscription ${subscriptionName} created.`);\n\n  // [END pubsub_create_pull_subscription]\n}\ncreateSubscription('my-topic', 'my-topic-Subscription');\n```\n\n## 7. Push Message\n\n```javascript\nasync function publishMessage(topicName, data) {\n  // [START pubsub_publish]\n  // [START pubsub_quickstart_publisher]\n  // Imports the Google Cloud client library\n  const { PubSub } = require('@google-cloud/pubsub');\n\n  // Creates a client\n  const pubsub = new PubSub();\n\n  /**\n   * TODO(developer): Uncomment the following lines to run the sample.\n   */\n  // const topicName = 'my-topic';\n  // const data = JSON.stringify({ foo: 'bar' });\n\n  // Publishes the message as a string, e.g. \"Hello, world!\" or JSON.stringify(someObject)\n  const dataBuffer = Buffer.from(data);\n\n  const messageId = await pubsub.topic(topicName).publish(dataBuffer);\n  console.log(`Message ${messageId} published.`);\n\n  // [END pubsub_publish]\n  // [END pubsub_quickstart_publisher]\n}\npublishMessage('my-topic', 'TestData');\n```\n\n## 8. Pull Message\n\n```javascript\nfunction listenForMessages(subscriptionName, timeout) {\n  // [START pubsub_subscriber_async_pull]\n  // [START pubsub_quickstart_subscriber]\n  // Imports the Google Cloud client library\n  const { PubSub } = require('@google-cloud/pubsub');\n\n  // Creates a client\n  const pubsub = new PubSub();\n\n  /**\n   * TODO(developer): Uncomment the following lines to run the sample.\n   */\n  // const subscriptionName = 'my-sub';\n  // const timeout = 60;\n\n  // References an existing subscription\n  const subscription = pubsub.subscription(subscriptionName);\n\n  // Create an event handler to handle messages\n  let messageCount = 0;\n  const messageHandler = message => {\n    console.log(`Received message ${message.id}:`);\n    console.log(`\\tData: ${message.data}`);\n    console.log(`\\tAttributes: ${message.attributes}`);\n    messageCount += 1;\n\n    // \"Ack\" (acknowledge receipt of) the message\n    message.ack();\n  };\n\n  // Listen for new messages until timeout is hit\n  subscription.on(`message`, messageHandler);\n\n  setTimeout(() => {\n    subscription.removeListener('message', messageHandler);\n    console.log(`${messageCount} message(s) received.`);\n  }, timeout * 1000);\n  // [END pubsub_subscriber_async_pull]\n  // [END pubsub_quickstart_subscriber]\n}\nlistenForMessages('my-topic-Subscription', 3);\n```\n\n> [範例](https://github.com/ste5022424/GcpPubSub)\n\n## Reference\n\n- [nodejs-pubsub](https://github.com/googleapis/nodejs-pubsub)\n- [將 Cloud Pub/Sub 與 Node.js 搭配使用](https://cloud.google.com/nodejs/getting-started/using-pub-sub?hl=zh-tw)\n- [Google Cloud Pub/Sub: Node.js Client](https://www.npmjs.com/package/@google-cloud/pubsub)\n","tags":["GCP Pub/Sub","Node.js"],"categories":["GCP Pub/Sub"]},{"title":"Google OAuth","url":"/2019/06/05/Google-OAuth/","content":"\n## Google OAuth\n\n### 1. 建立一組 [Goole APIS Clinet ID](https://console.developers.google.com)\n\n#### 1.1 憑證 > 建立憑證\n\n![建立憑證](./2019-06-05-16-41-51.png)\n\n#### 1.2 OAuth 用戶端 ID\n\n![用戶端 ID](./2019-06-05-16-43-42.png)\n\n#### 1.3 設定 來源網址 ＆ 重新導向 URL\n\n![重新導向 URL](./2019-06-05-16-53-17.png)\n\n> 因為 Goole 會驗證來源網址，所以網址必須是要公開的，為了方便測試這邊使用 [Surge](https://ste5022424.github.io/2018/11/02/surge/)建立一個對外的 Domain\n\n#### 1.4 建立新增成功，取得用戶端 ID，\n\n![取得用戶端](./2019-06-05-16-58-18.png)\n\n### 2. 新增一個 index.html，貼上官方的範例，並將 ID 貼到範例提供的 meta 上面\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <script src=\"https://apis.google.com/js/platform.js\" async defer></script>\n    <meta\n      name=\"google-signin-client_id\"\n      content=\"YourClinetID.apps.googleusercontent.com\"\n    />\n    <title>Document</title>\n  </head>\n\n  <body>\n    <div\n      id=\"login\"\n      class=\"g-signin2\"\n      data-onsuccess=\"onSignIn\"\n      data-theme=\"dark\"\n    ></div>\n    <p id=\"ID\"></p>\n    <p id=\"Full\"></p>\n    <p id=\"Given\"></p>\n    <p id=\"Family\"></p>\n    <img id=\"Image\" />\n    <p id=\"Email\"></p>\n    <a id=\"logout\" href=\"#\" onclick=\"signOut()\">Logout</a>\n  </body>\n\n  <script>\n    document.getElementById('logout').style.display = 'none';\n    function onSignIn(googleUser) {\n      document.getElementById('login').style.display = 'none';\n      document.getElementById('logout').style.display = 'inline';\n      // Useful data for your client-side scripts:\n      var profile = googleUser.getBasicProfile();\n      document.getElementById('ID').innerHTML = 'ID:' + profile.getId();\n      document.getElementById('Full').innerHTML = 'Full:' + profile.getEmail();\n      document.getElementById('Given').innerHTML =\n        'Given:' + profile.getGivenName();\n      document.getElementById('Family').innerHTML =\n        'Family:' + profile.getFamilyName();\n      document.getElementById('Image').src = profile.getImageUrl();\n      document.getElementById('Email').innerHTML =\n        'Email:' + profile.getEmail();\n\n      var id_token = googleUser.getAuthResponse().id_token;\n      console.log('ID Token: ' + id_token);\n    }\n\n    function signOut() {\n      var auth2 = gapi.auth2.getAuthInstance();\n      auth2.signOut().then(function() {\n        console.log('User signed out.');\n        location.reload();\n      });\n    }\n  </script>\n</html>\n\n```\n\n#### 2.1 [http://myoauth.surge.sh/](http://myoauth.surge.sh/#)\n\n![page](./2019-06-05-17-04-27.png)\n\n![login](./2019-06-05-17-08-51.png)\n\n![data](./2019-06-05-17-10-13.png)\n\n## 參考\n\n- [ntegrating Google Sign-In into your web app](https://developers.google.com/identity/sign-in/web/sign-in)\n- [Authenticate with a backend server](https://developers.google.com/identity/sign-in/web/backend-auth)\n","tags":["Google OAuth"],"categories":["Google OAuth"]},{"title":"Node Js Json Web Token","url":"/2019/06/05/Node-Js-Json-Web-Token/","content":"\n## Node Js Json Web Token\n\n## 參考\n\n- [Node JS jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)\n- [JWT](https://jwt.io/)\n","tags":["Node JS - JWT"],"categories":["JWT"]},{"title":"Axios Post Form Data","url":"/2019/05/31/Axios-Post-Form-Data/","content":"\n# Axios Post Form Data\n\n## 安裝套件\n\n```base\nnpm init\nnpm install axios\nnpm i qs\n```\n\n## Code\n\n```javascript\nconst axios = require('axios');\nconst qs = require('qs');\n\nlet formdata = qs.stringify({\n    Name: 'Andy',\n    Age : 18\n});\n\naxios({\n    method: 'post',\n    url: 'Your Url',\n    data: formdata,\n    config: { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }\n})\n    .then(function (response) {\n        //handle success\n        console.log(response.data);\n    })\n    .catch(function (response) {\n        //handle error\n        console.log(response);\n    });\n\n```\n\n# 參考\n* [axios](https://github.com/axios/axios)\n* [qs](https://www.npmjs.com/package/qs)","tags":["Axios","Node JS"],"categories":["Axios"]},{"title":"Node js ORM Sequelize","url":"/2019/05/30/Node-js-ORM-Sequelize/","tags":["Node JS"]},{"title":"Mysql on Docker","url":"/2019/05/28/Mysql-on-Docker/","content":"\n# Mysql on Docker\n\n> docker-compose.yml\n\n```bash=\nversion: \"3.1\"\nservices:\n  db:\n    container_name: \"mysql\"\n    image: \"mysql\"\n    volumes:\n    - \"/data/mysql:/var/lib/mysql\"\n    command: --default-authentication-plugin=mysql_native_password\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: \"root\"\n\n  adminer:\n    container_name: \"adminer\"\n    image: \"adminer\"\n    restart: always\n    ports:\n      - 8081:8080\n```\n\n# 參考\n* [dockerhub mysql](https://hub.docker.com/_/mysql)\n* [mysql](https://www.mysql.com/)\n* [adminer](https://www.adminer.org/)","tags":["Docker","Mysql"],"categories":["Mysql"]},{"title":"Node.js Web on Docker","url":"/2019/05/27/Node-js-Web-on-Docker/","content":"\n# Node.js Web on Docker\n\n## 1. init Project\n\n```bash=\nnpm init\nnpm install\ngit init\ngit add .\ngit -commit -m \"git init\"\n```\n![](https://i.imgur.com/6Nw3vNY.png)\n\n## 2. Edit package.json\n\n```bash=\n{\n  \"name\": \"nodejs_docker\",\n  \"version\": \"1.0.0\",\n  \"description\": \"nodejs_docker\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n```\n\n## 3. Install express.js\n\n```bash=\nnpm install express --save\n```\n\n## 4.Creat index.js\n\n```bash=\n'use strict';\n\nconst express = require('express');\n\n// Constants\nconst PORT = 8080;\nconst HOST = '0.0.0.0';\n\n// App\nconst app = express();\napp.get('/', (req, res) => {\n  res.send('Hello world\\n');\n});\n\napp.listen(PORT, HOST);\nconsole.log(`Running on http://${HOST}:${PORT}`);\n```\n\n![](https://i.imgur.com/NUWIoL2.png)\n\n## 5. Creat Dockerfile\n\n```bash=\nFROM node:8\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nCOPY package*.json ./\n\nRUN npm install\n# If you are building your code for production\n# RUN npm ci --only=production\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 8080\nCMD [ \"npm\", \"start\" ]\n```\n![](https://i.imgur.com/Co2Q6g7.png)\n\n## 6. Build Docker Images\n\n```bash=\ndocker build -t node-web-app .\n```\n\n## 7. Docker Run\n\n```bash=\ndocker run -p 49160:8080 -d --name node-web-app node-web-app\n```\n\n## 8. Demo\n\n```bash=\ncurl 127.0.0.1:49160\n```\n![](https://i.imgur.com/34rpm5d.png)\n\n> [範例連結](https://github.com/ste5022424/nodejs_docker)\n\n# 參考\n\n* [把一個Node.js web 應用程序給Docker 化](https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/)","tags":["Docker","Node JS"],"categories":["Node JS"]},{"title":"Gitlab server on Docker","url":"/2019/05/24/Gitlab-server-on-Docker/","content":"\n# Gitlab server on Docker\n\n```bash\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --publish 443:443 --publish 80:80 --publish 22:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume /srv/gitlab/config:/etc/gitlab \\\n  --volume /srv/gitlab/logs:/var/log/gitlab \\\n  --volume /srv/gitlab/data:/var/opt/gitlab \\\n  gitlab/gitlab-ce:latest\n\n```\n\n# 參考\n* [GitLab Docker](https://docs.gitlab.com/omnibus/docker/)","tags":["Docker","Gitlab"],"categories":["Gitlab"]},{"title":"ESLint Javascript 程式碼規範檢查工具","url":"/2019/05/21/ESLint-Javascript-程式碼規範檢查工具/","content":"\n# ESLint Javascript 程式碼規範檢查工具\n\n## 1. 安裝工具\n\n```bash=\nnpm install eslint --save-dev\n```\n\n## 2. 跑規則\n\n> 如果方案沒有 package.json 記得先 npm init\n\n```bash=\n./node_modules/.bin/eslint --init\n```\n\n![init](https://i.imgur.com/AQOsWew.png)\n\n## 3. 跑完之後會發現 檔案呈現紅色的\n\n![red](https://i.imgur.com/OUZQko3.png)\n\n## 4. 這邊就可以看到要些改的項目\n\n![edit](https://i.imgur.com/sZ9IWa6.png)\n\n## 5. 自動修復\n\n```bash=\n./node_modules/.bin/eslint --fix My.js\n```\n\n![fix](https://i.imgur.com/1da2Kvm.png)\n\n# VsCode ESLint\n\n[ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n![ESLint](https://i.imgur.com/ebWP69Q.png)\n\n# 參考\n* [Getting Started with ESLint](https://eslint.org/docs/user-guide/getting-started)\n* [在 VSCode 啟用程式碼規範工具 (ESLint)](https://wcc723.github.io/tool/2017/11/09/coding-style/)\n* [eslint](https://eslint.org/)\n* [ESLint Quickstart - find errors automatically](https://www.youtube.com/watch?v=qhuFviJn-es)","tags":["Node JS","ESLint","Javascriptd"],"categories":["ESLint"]},{"title":"Node js Hello world!","url":"/2019/05/20/Node-js-Hello-world/","content":"\n# Node js Hello world!\n\n> 記得先安裝 [node js](https://nodejs.org/en/)\n\n## 1. Init\n\n```bash\nnpm init\n```\n\n![init](https://i.imgur.com/KyI1SLv.png)\n\n![init](https://i.imgur.com/1iq6IQb.png)\n\n## 2. 新增 HelloNode.js\n\n```javascript=\nconsole.log('Hello Node JS');\n```\n\n![HelloNode](https://i.imgur.com/InyTfST.png)\n\n## 3. 執行\n\n### 執行有三種方式\n\n### (1) node XXX.js\n\n```bash=\nnode .\\HelloNode.js\n```\n\n![bash](https://i.imgur.com/KbIncMz.png)\n\n### (2) node run\n\n#### package.json 加入以下片段\n\n```bash=\n\"HelloNode\": \"node HelloNode.js\n```\n\n![package](https://i.imgur.com/BIkArgS.png)\n\n#### Run\n\n```bash=\nnpm run HelloNode\n```\n\n![run](https://i.imgur.com/IDxDVIJ.png)\n\n### (3) Vs Code 偵錯\n\n#### 選擇偵錯(Crtl + Shift + D) > 設定\n\n![選擇偵錯](https://i.imgur.com/0l3LrJ4.png)\n\n#### 選 node js\n\n![node](https://i.imgur.com/a7FWok1.png)\n\n#### 調整設定檔\n\n![調整設定檔](https://i.imgur.com/UNj8b4R.png)\n\n#### F5 啟動偵錯\n\n![啟動偵錯](https://i.imgur.com/TLkfqJb.png)\n\n# 參考\n\n- [建立 第一個 Node.js 專案](https://ithelp.ithome.com.tw/articles/10199745)\n","tags":["Node JS","VsCode"],"categories":["Node Js"]},{"title":"Vue js Hello World!","url":"/2019/05/20/Vue-js-Hello-World/","content":"\n# Vue js Hello World!\n\n> 記得先安裝 [node js](https://nodejs.org/en/)\n\n## 1.安裝 [Vue Cli](https://cli.vuejs.org/guide/installation.html)\n\n```bash\nnpm install -g @vue/cli\n```\n\n![install](https://i.imgur.com/9BA3FgD.png)\n\n## 2. [Creat hello-world](https://cli.vuejs.org/guide/creating-a-project.html#vue-create)\n\n```bash\nvue create hello-world\n```\n\n![](https://i.imgur.com/hIAruHf.png)\n\n## 3. Run Server\n\n```bash\ncd hello-world\nnpm run serve\n```\n\n![hello](https://i.imgur.com/fxckdrA.png)\n\n## 4. <http://localhost:8081/>\n\n![localhost](https://i.imgur.com/Ue0UbN9.png)\n\n# 參考\n\n* [Vue js](https://vuejs.org/)\n* [Vue-create](https://cli.vuejs.org/guide/creating-a-project.html#vue-create)\n* [Vue cli](https://cli.vuejs.org/guide/installation.html)\n* [node js](https://nodejs.org/en/)","tags":["VsCode","Vue js"],"categories":["Vue js"]},{"title":"Visual Studio Code 存檔自動排版","url":"/2019/05/15/Visual-Studio-Code-存檔自動排版/","content":"\n# Visual Studio Code 存檔自動排版\n\n## 1. 開啟 setting (Ctrl + ,)\n\n![setting](https://i.imgur.com/AGKHwWU.png)\n\n## 2. 輸入 \"Format On Save\" > 將它打勾 ， 這樣存檔的時候就會自動排了\n\n![Format](https://i.imgur.com/uSnUZl7.png)","tags":["筆記","Visual Studio Code 存檔自動排版"],"categories":["Visual Studio Code"]},{"title":"SonarLint - Sonqrqube Server Custom Rules","url":"/2019/05/14/SonarLint-Sonqrqube-Server-Custom-Rules/","content":"\n# SonarLint - Sonqrqube Server Custom Rules\n\n## 1. 安裝 [SonarLint](https://ste5022424.github.io/2019/04/15/Sonarqube-in-visual-studio-SonarLint/)\n\n## 2. 檢視 > Team Explore\n\n![Team Explore](https://i.imgur.com/RdWw9Sl.png)\n\n## 3. 連到 Sonqrqube Server\n\n![Sonqrqube Server](https://i.imgur.com/wkKFdfO.png)\n\n## 4. Connet\n\n![Connet](https://i.imgur.com/F4qQEfm.png)\n\n![Connet](https://i.imgur.com/9csx0Jh.png)\n\n## 5. 連線之後，選擇自己的專案下載規則\n\n![下載規則](https://i.imgur.com/0zN7Xbb.png)\n\n## 6. 專案會出現 .sonarlint 跟 .ruleset 檔案\n\n> 可以將檔案加入版控，組員就可以直接連線\n\n![sonarlint](https://i.imgur.com/ICCj1t2.png)\n\n![ruleset](https://i.imgur.com/l62ve75.png)\n\n## 7. 建置 > 針對方案程式碼進行分析 (Alt + F11 )\n\n![針對方案程式碼進行分析](https://i.imgur.com/BO6jdqq.png)\n\n## 8. 回到 sonarqube server > 選擇 > 代碼規則 > 質量配置 > 選擇一個自己做的樣板\n\n![質量配置](https://i.imgur.com/CtywggV.png)\n\n## 9. 隱藏某條規則 (使用S1118 當範例)\n\n![隱藏某條規則](https://i.imgur.com/bQwCsQH.png)\n\n## 10. 回 Team Explore 再去下載一次 profile\n\n![profile](https://i.imgur.com/0zN7Xbb.png)\n\n## 11. 就可以看到 S1118 這條規則已經被隱藏了\n\n![隱藏](https://i.imgur.com/gZYOT9V.png)","tags":["SonarLint","Sonqrqube"],"categories":["SonarLint"]},{"title":"Express Web Hello World","url":"/2019/05/13/Express-Node-js-Web/","content":"\n# Express Web Hello World\n\n> Express 是最小又靈活的 Node.js Web 應用程式架構，為 Web 與行動式應用程式提供一組健全的特性。\n\n## 1. 安裝 express 套件\n\n```bash\nnpm install express --save\n```\n\n## 2. 新增 一個 app.js\n\n```bash\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log('Example app listening on port ${port}!'))\n```\n\n## 3. Run node\n\n```bash\nnode app.js\n```\n\n![node](https://i.imgur.com/WqQxqcU.png)\n\n## 4. Hello World!\n\n![Hello](https://i.imgur.com/82nZSdO.png)\n\n# [RestfulAPI](http://expressjs.com/en/starter/basic-routing.html) 實作 Get / Post / Put / Delete\n\n```bash\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\n//// RestfulAPI\n\n// get\napp.get('/myget', (req, res) =>\nres.send('Hello World myget!')\n)\n\n//  post\napp.post('/mypost', function (req, res) {\n    res.json({ RestfulAPI: 'mypost' })\n})\n\n// put\napp.put('/myput', function (req, res) {\n    res.json({ RestfulAPI: 'myput' })\n})\n\n// delete\napp.delete('/mydelete', function (req, res) {\n    res.json({ RestfulAPI: 'mydelete' })\n})\n\n```\n\n### Get\n\n> http://localhost:3000/myget\n\n![Get](https://i.imgur.com/KIEL2im.png)\n\n### Post\n\n> http://localhost:3000/mypost\n\n![Post](https://i.imgur.com/NHb3yAh.png)\n\n### Put\n\n> http://localhost:3000/myput\n\n![Put](https://i.imgur.com/PTcWcUh.png)\n\n### Delete\n\n> http://localhost:3000/mydelete\n\n![Delete](https://i.imgur.com/5YN1uGj.png)\n\n# [Static File](http://expressjs.com/en/starter/static-files.html)\n\n```bash\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\n//// static files\napp.use(express.static('static'))\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`))\n```\n\n![listen](https://i.imgur.com/vKhOU5L.png)\n\n# 參考\n\n- [expressjs](https://expressjs.com/zh-tw/starter/installing.html)\n","tags":["Express","Node Js"],"categories":["Express"]},{"title":"android 遠程調試 WebView","url":"/2019/05/06/android-遠程調試-WebView/","content":"\n# android 遠程調試 WebView\n\n## 1. 安卓 應用程式 加入 允許 debug\n\n```\nWebView.setWebContentsDebuggingEnabled(true);\n```\n## 2. 開啟 chrome >輸入網址 [chrome://inspect/#devices](chrome://inspect/#devices)\n\n![SB 偵錯 ](https://i.imgur.com/lz9QidS.png)\n\n## 3. 手機 > 設定 > 啟用 USB 偵錯\n\n![](https://i.imgur.com/6GQYCax.png)\n\n## 4. 手機進入 Webbview > 點選 inspect > 就可以針對 Webbview　進行偵錯\n\n![](https://i.imgur.com/rsYvNdu.png)\n\n# 參考\n* [遠程調試 WebView](https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews?hl=zh-tw)","tags":["android","WebView"],"categories":["android"]},{"title":"Sonar-scanner-msbuild : credentials must be passed in both begin and end steps or not at all","url":"/2019/04/23/Sonar-scanner-msbuild-credentials-must-be-passed-in-both-begin-and-end-steps-or-not-at-all/","content":"\n# Sonar-scanner-msbuild : credentials must be passed in both begin and end steps\n\n#### 再跑 SonarScanner 的時候跳出了錯誤([credentials must be passed in both begin and end steps]((https://github.com/SonarSource/sonar-scanner-msbuild/releases/tag/4.1.0.1148)))，如果再 SonarScanner.MSBuild.exe中要使用 /d:sonar.login，必須在 begin 和 end 都要加入 /d:sonar.login，才會生效。\n\n![error](https://i.imgur.com/4i5JLOM.png)\n\n``` bash\nSonarScanner.MSBuild.exe begin /k:\"project-key\" /d:sonar.login=\"YourToken\"\nMSBuild.exe <path to solution.sln> /t:Rebuild\nSonarScanner.MSBuild.exe end /d:sonar.login=\"YourToken\"\n```\n\n> Token 的部分可以去帳號設定產出來\n![Token](https://i.imgur.com/qcSnpi2.png)\n\n![Token](https://i.imgur.com/xHttBYN.png)\n\n# 參考\n\n* [sonar-scanner-msbuild : 4.1.0.1148](https://github.com/SonarSource/sonar-scanner-msbuild/releases/tag/4.1.0.1148)\n\n* [SonarQube+Scanner+for+MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)\n","tags":["SonarQube"],"categories":["SonarQube"]},{"title":"Linq Join Lambda expression","url":"/2019/04/18/Linq-Join-Lambda-expression/","content":"\n# Linq Join Lambda expression\n\n> [Eaxlample](https://github.com/ste5022424/Linq_Join_Lambda_Expression.git)\n\n```C#\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp20\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            var memberdata = new List<Member>()\n            {\n                new Member(){ MemberID = 1, MemberAccount = \"小明\"},\n                new Member(){ MemberID = 2, MemberAccount = \"小王\"},\n                new Member(){ MemberID = 3, MemberAccount = \"小華\"},\n            };\n\n            var scoredata = new List<Score>()\n            {\n                new Score(){ MemberID = 1, score = 100},\n                new Score(){ MemberID = 2, score = 50},\n                new Score(){ MemberID = 3, score = 40},\n            };\n\n            var membergamelogdata = new List<MemberGameLog>()\n            {\n                new MemberGameLog() { MemberID = 1 , LogID = 4001 , LogName = \"打棒球\" },\n                new MemberGameLog() { MemberID = 2 , LogID = 4002 , LogName = \"打羽球\" },\n                new MemberGameLog() { MemberID = 3 , LogID = 4003 , LogName = \"打籃球\" }\n            };\n\n            var joindata = memberdata\n                            .Join(membergamelogdata,\n                            member => member.MemberID,\n                            gamelogdata => gamelogdata.MemberID,\n                            (member, gamelogdata) =>\n                            new\n                            {\n                                MemberID = member.MemberID,\n                                MemberAccount = member.MemberAccount,\n                                LogID = gamelogdata.LogID,\n                                LogName = gamelogdata.LogName\n                            })\n                            .Join(scoredata,\n                            memberjoin1 => memberjoin1.MemberID,\n                            score => score.MemberID, (memberjoin1, thescore) =>\n                            {\n                                // Declare variable within LINQ select\n                                var getscorestring = getScoreString(thescore.score);\n                                return new\n                                {\n                                    MemberID = memberjoin1.MemberID,\n                                    MemberAccount = memberjoin1.MemberAccount,\n                                    score = getscorestring,\n                                    LogID = memberjoin1.LogID,\n                                    LogName = memberjoin1.LogName\n                                };\n                            });\n\n            foreach (var item in joindata)\n            {\n                Console.WriteLine($\"{item.MemberID}, {item.MemberAccount}, {item.score}, {item.LogID}, {item.LogName}\");\n            }\n        }\n\n        private static string getScoreString(int score)\n        {\n            if (score > 80)\n            {\n                return \"甲\";\n            }\n            else if (score > 60)\n            {\n                return \"乙\";\n            }\n            else\n            {\n                return \"丙\";\n            }\n        }\n\n        private class Score\n        {\n            public int MemberID { get; set; }\n            public int score { get; set; }\n        }\n\n        private class Member\n        {\n            public int MemberID { get; set; }\n\n            public string MemberAccount { get; set; }\n        }\n\n        private class MemberGameLog\n        {\n            public int MemberID { get; set; }\n\n            public int LogID { get; set; }\n            public string LogName { get; set; }\n        }\n    }\n}\n\n```\n\n![](https://i.imgur.com/iE0Zy2O.png)\n\n\n# 參考\n\n[Linq Join & Lambda Join](https://dotblogs.com.tw/erictsaiblog/2015/05/17/151321)\n[How to rewrite this LINQ using join with lambda expressions?](https://stackoverflow.com/questions/13692015/how-to-rewrite-this-linq-using-join-with-lambda-expressions)\n[How to join 3 tables with lambda expression?](https://stackoverflow.com/questions/9120088/how-to-join-3-tables-with-lambda-expression)\n[Declare variable within LINQ select](https://stackoverflow.com/questions/29251075/declare-variable-within-linq-selectx-new)","tags":["C#","Linq"],"categories":["Linq"]},{"title":"Sonarqube 權限設定","url":"/2019/04/17/Sonarqube-權限設定/","content":"\n# Sonarqube 權限設定\n\n\n## 1. Security > Groups\n\n![](https://i.imgur.com/ZE2UULr.png)\n\n## 2. Creat User\n\n![](https://i.imgur.com/8o64ZlP.png)\n\n![](https://i.imgur.com/SwB8qc0.png)\n\n## 2. Creat Group\n\n![](https://i.imgur.com/BNm8DBx.png)\n\n![](https://i.imgur.com/NcDNMCt.png)\n\n\n## 3. Add Group\n\n![](https://i.imgur.com/8dGnOBt.png)\n\n![](https://i.imgur.com/oPvWa8L.png)\n\n## 4. Security > Permission Templates\n\n![](https://i.imgur.com/4nRwc0r.png)\n\n![](https://i.imgur.com/LrnCSae.png)\n\n![](https://i.imgur.com/DAsjNsw.png)\n\n![](https://i.imgur.com/a0Hwttx.png)\n\n\n## 4. Projects > Management > Creat Project\n\n![](https://i.imgur.com/pHepo8g.png)\n\n![](https://i.imgur.com/jyRQcpz.png)\n\n## 5. Projects > Management > Apply Permission Templates\n\n![](https://i.imgur.com/J6Jnqb4.png)\n\n![](https://i.imgur.com/Oizm86d.png)\n\n## 6. Check\n\n![](https://i.imgur.com/BNDj9Jx.png)\n\n![](https://i.imgur.com/aO6BETu.png)","tags":["SonarQube"],"categories":["SonarQube"]},{"title":"Sonarqube in visual studio SonarLint","url":"/2019/04/15/Sonarqube-in-visual-studio-SonarLint/","content":"\n# SonarLint 安裝\n\n## 1. 工具 > 擴充功能和更新\n\n![擴充功能和更新](https://i.imgur.com/oNK4QfK.png)\n\n## 2. 搜尋 >  SonarLint > 下載 > 重新啟動 Visual Studio\n\n![搜尋](https://i.imgur.com/CG2E0Ov.png)\n\n![搜尋](https://i.imgur.com/Qa542je.png)\n\n## 3. 建置 > 針對方案執行程式碼分析 (Alt+ F11)\n\n![建置](https://i.imgur.com/qsu1tEZ.png)\n\n## 4. 錯誤清單 > 組件 + IntelliSense\n\n> 這邊就可以看到要修改的項目(S開頭的為sonrquebe的規則)\n\n![IntelliSense](https://i.imgur.com/No8kYss.png)\n\n## 5. 修改程式碼\n\n> 程式碼就會顯示 綠色的蚯蚓 alt+. 就會出現建議\n![綠色的蚯蚓](https://i.imgur.com/VFtLN7i.png)\n\n![alt+.](https://i.imgur.com/9LVPM3t.png)\n\n# 參考\n\n* [www.sonarlint.org](https://www.sonarlint.org/)\n* [如何在 Visual Studio 使用 SonarLint ?](https://oomusou.io/sonarqube/sonarlint-vs/) ","tags":["sonarlint","sonarqube","Visual Studio"],"categories":["sonarlint"]},{"title":"docker-compose run ELK","url":"/2019/04/02/docker-compose-run-ELK/","content":"\n# docker-comepost run ELK\n\n## 1. 新增 elasticsearch 持久層資料夾\n\n```bash\nmkdir -m 777 /data/elasticsearch & mkdir -m 777 /data/elasticsearch2 & cp -r logstash /data/logstash\n```\n\n## logstash.conf\n\n```conf\nfile {\n    path => \"/usr/share/logstash/Log/*\"\n    type => \"file\"\n    start_position => \"beginning\"\n   }\n }\n\nfilter {\n    grok {\n           match => [\"message\", \"%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{NUMBER:threadid} %{LOGLEVEL:loglevel} %{NOTSPACE:logger} %{GREEDYDATA:message}\"]\n           overwrite => [ \"message\" ]\n        }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    index => \"logstash-test\"  \n   }\n  stdout { codec => rubydebug}\n}\n```\n\n## docker-compose.yaml\n\n```bash\nversion: '3.2'\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0\n    container_name: elasticsearch\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - /data/elasticsearch:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - esnet\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0\n    container_name: elasticsearch2\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - \"discovery.zen.ping.unicast.hosts=elasticsearch\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - /data/elasticsearch2:/usr/share/elasticsearch/data\n    networks:\n      - esnet\n    restart: always\n  kibana:\n    image: docker.elastic.co/kibana/kibana:6.7.0\n    container_name: kibana\n    ports:\n    - \"5601:5601\"\n    restart: always\n    networks:\n      - esnet\n  logstash:\n    image: docker.elastic.co/logstash/logstash:6.7.0\n    container_name: logstash\n    volumes:\n    - /tmp/Log/:/usr/share/logstash/Log\n    - /data/logstash/pipeline:/usr/share/logstash/pipeline/\n    restart: always\n    networks:\n      - esnet\nnetworks:\n  esnet:\n\n```\n\n## 2. docker-compose\n\n> 全部啟動\n> \n```bash\ndocker-compose up -d\n```\n\n> 全部關閉\n\n```bash\ndocker-compose  down\n```\n\n\n#參考\n\n* [ELK-Stack.git](https://github.com/ste5022424/ELK-Stack.git)\n* [elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html)\n* [logstash](https://www.elastic.co/guide/en/logstash/current/docker.html)\n* [kibana](https://www.elastic.co/guide/en/kibana/current/docker.html)\n* [filebeat](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html)","tags":["ELK Stack"],"categories":["ELK Stack"]},{"title":"Kubernetes Logging with Fluentd","url":"/2019/04/01/Kubernetes-Logging-with-Fluentd/","content":"\n# Kubernetes Logging with Fluentd\n\n\n\n# 參考\n\n* [Kubernetes Logging with Fluentd](https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd#getting-started)\n* [fluent/fluentd-kubernetes-daemonset](https://github.com/fluent/fluentd-kubernetes-daemonset)\n* [Logging in Kubernetes with Elasticsearch, Kibana, and Fluentd](https://mherman.org/blog/logging-in-kubernetes-with-elasticsearch-Kibana-fluentd/)","tags":["Docker","Kubernetes","kubectl"],"categories":["Fluentd"]},{"title":"C# HttpWebRequest Expect:100-continue","url":"/2019/03/20/HttpWebRequestExpect100continue/","content":"\n# HttpWebRequest Expect:100-continue'\n\n> 使用 .net HttpWebRequest Post時，碰到第三方串接商API無回應，導致 Reseponse TimeOut，使用 Fiddler 攔了一下，發現Header多了一個 \"Expect:100-continue\"，原來第三方串接商API不支援，所以才會沒有回應導致Reseponse Timeout，把 Expect100Continue 設定成  false 就可以解決了\n\n```C#\nHttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(\"Url\");\nrequest.ServicePoint.Expect100Continue = false;\n```\n\n![Fiddler](https://i.imgur.com/v9iKHBX.png)\n\n# 參考\n\n* [How to disable the “Expect: 100 continue” header in HttpWebRequest for a single request?](https://stackoverflow.com/questions/14063327/how-to-disable-the-expect-100-continue-header-in-httpwebrequest-for-a-single)\n* [Expect:100-continue](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/100)\n[100 Continue\n](http://www.laruence.com/2011/01/20/1840.html)","tags":["C#","HttpWebRequest","筆記"],"categories":["HttpWebRequest"]},{"title":"C# HttpWebRequest ClientCertificates","url":"/2019/03/19/C-HttpWebRequest-ClientCertificates/","content":"\n# C# HttpWebRequest ClientCertificates\n\n````C#\n\nbyte[] aryData = Encoding.UTF8.GetBytes(string.Empty);\n\n            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(\"URL\");\n\n            //// 設定私有憑證\n            req.ClientCertificates.Add(new X509Certificate(HttpRuntime.AppDomainAppPath + @\"\\yourCertificates.p12\", \"yourpassword\"));\n            X509Store certStore = new X509Store(\"My\", StoreLocation.LocalMachine);\n            certStore.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n            X509Certificate2 cert = certStore.Certificates[0];\n            certStore.Close();\n            req.ClientCertificates.Add(cert);\n\n            req.Method = \"POST\";\n            req.ContentType = \"application/json\";\n            req.ContentLength = aryData.Length;\n            req.Accept = \"application/json\";\n\n            using (Stream reqStream = req.GetRequestStream())\n            {\n                reqStream.Write(aryData, 0, aryData.Length);\n            }\n\n            string strResult = string.Empty;\n\n            using (WebResponse res = req.GetResponse())\n            {\n                using (Stream resStream = res.GetResponseStream())\n                {\n                    using (StreamReader objSR = new StreamReader(resStream))\n                    {\n                        strResult = objSR.ReadToEnd();\n                    }\n                }\n            }\n\n            return strResult;\n\n````\n\n# 參考\n\n* [Force HttpWebRequest to send client certificate](https://stackoverflow.com/questions/39528973/force-httpwebrequest-to-send-client-certificate)","tags":["C#","HttpWebRequest","筆記"],"categories":["HttpWebRequest"]},{"title":"kubectl 常用指令","url":"/2019/03/15/kubectl-常用指令/","content":"\n# kubectl 常用指令\n\n## 以下列舉常用指令\n\n* version :查看 kubectl 版本\n\n```bash=\nkubectl version\n```\n\n* cluster-info :顯示叢集資訊\n\n```bash\nkubectl cluster-info\n```\n\n* top :查看CPU、記憶體狀態\n\n```bash\nkubectl top pod\nkubectl top node\n```\n\n\n* get :取得K8s相關資訊\n\n```bash=\nkubectl get pods\nkubectl get service\n```\n\n* run :執行容器\n\n```bash=\nkubectl run [your-name] --image gcr.io/[your-projectid]/netcorewebapi:v1 --port 80\n```\n\n* logs :查看容器log\n\n```bash=\nkubectl logs [pod-name]\n```\n\n* exec :對容器下指令\n\n```bash=\nkubectl exec -it [pod-name] bash\n```\n\n* apply :使用 yaml 更新 K8s\n\n```bash=\nkubectl apply [youtrname].yaml \n```\n\n* config view :查看 kubectl 設定\n\n```bash=\nkubectl config view\n```\n\n# 參考\n\n* [kubectl-commands](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands)\n* [K8S指令](https://blog.csdn.net/xingwangc2014/article/details/51204224)","tags":["Docker","Kubernetes","kubectl"],"categories":["Kubernetes"]},{"title":"curl for windows","url":"/2019/03/07/curl-for-windows/","content":"# curl for windows\n\n1.[下載](https://curl.haxx.se/windows/)\n\n![下載](https://i.imgur.com/D5lAz3S.png)\n\n2.curl.exe\n\n![curl.exe](https://i.imgur.com/7Wy9H5C.png)\n\n3.測試\n\n```bash\ncurl -X get \"www.google.com\"\n```\n\n![測試](https://i.imgur.com/ElnCkzf.png)\n\n# 參考\n* [curl 7.64.0 for Windows](https://curl.haxx.se/windows/)\n* [curl online](https://onlinecurl.com/)","tags":["curl"],"categories":["curl"]},{"title":"Slack Incoming Webhooks","url":"/2019/03/07/Slack-Incoming-Webhooks/","content":"# Slack Incoming Webhooks\n\n## 1. 建立 Slack app\n\n![ Slack app ](https://i.imgur.com/Eff4v91.png)\n\n![Slack app](https://i.imgur.com/KmXrjtJ.png)\n\n![Slack app](https://i.imgur.com/JQ5extf.png)\n\n> App Name: 應用程式名稱\n> Workspace: 選擇一個 Workspace ，如果沒有就建立一個\n\n## 2.選擇 Incoming Webhooks\n\n![Incoming Webhooks](https://i.imgur.com/3orCXKV.png)\n\n## 3. 將開關打開\n\n![將開關打開](https://i.imgur.com/3Zb16k7.png)\n\n![將開關打開](https://i.imgur.com/P5DQmEu.png)\n\n## 4. 先在 slack 上面建立一個頻道\n\n![建立一個頻道](https://i.imgur.com/z1RrkOP.png)\n\n![建立一個頻道](https://i.imgur.com/Eycl1uJ.png)\n\n![建立一個頻道](https://i.imgur.com/OW8GBXE.png)\n\n![建立一個頻道](https://i.imgur.com/7E0dji9.png)\n\n### 5. Add New Webhook to Workspace\n\n![Add New Webhook to Workspace](https://i.imgur.com/3Mntuo1.png)\n\n![Add New Webhook to Workspace](https://i.imgur.com/qP7F4pb.png)\n\n## 6. 複製網址\n\n![複製網址](https://i.imgur.com/s3jRDZY.png)\n\n## 7. 發送訊息\n\n>使用 [Restlet Client - REST API Testing](https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm) 來測試post\n\n![發送訊息](https://i.imgur.com/AqRyHPU.png)\n\n>channel:頻道名稱\n>text:要發送的data\n\n```json\n{\n  \"channel\":\"myhooktest\",\n   \"text\": \"Hello, world.ipblock\"\n}\n```\n\n## 8. 確認有收到訊息\n\n![收到訊息](https://i.imgur.com/NGe3FxW.png)\n\n# 參考\n* [Incoming Webhooks](https://api.slack.com/incoming-webhooks)","tags":["Slack","Incoming Webhooks"],"categories":["Slack"]},{"title":"mac code.","url":"/2019/02/27/mac-code/","content":"\n```bash\n >shell command\n```\n\n![shell command](https://i.imgur.com/oVKx5XV.png)\n\n# 參考\n\n* [“code .” Not working in Command Line for Visual Code Studio on OSX/Mac](https://stackoverflow.com/questions/29955500/code-not-working-in-command-line-for-visual-code-studio-on-osx-mac)","tags":["mac"],"categories":["mac"]},{"title":"Grafana 監控","url":"/2019/02/25/Grafana 監控/","content":"\n# Grafana 監控\n\n## [influxdb](https://hub.docker.com/_/influxdb/)\n\n### 1. Docker Run\n\n```bash\ndocker run -d -p 8083:8083 -p 8086:8086 -e INFLUXDB_ADMIN_ENABLED=true --name influxdb --restart=always -v influxdb:/var/lib/influxdb influxdb:1.1\n```\n\n![docker run](https://i.imgur.com/0oLjQzH.png)\n\n### 2. 進入 influxdb (http://YourHost:8083)\n\n![進入 influxdb](https://i.imgur.com/CkP0t3G.png)\n\n### 3. 建立一個  grafana 資料庫\n\n```bash\nCREATE DATABASE \"grafana\"\n```\n\n![建立一個  grafana 資料庫](https://i.imgur.com/yCIRXMp.png)\n\n### 4. 檢查是否建立成功\n\n```bash\nSHOW DATABASES\n```\n\n![檢查是否建立成功](https://i.imgur.com/nN52eAs.png)\n\n## [grafana](https://hub.docker.com/r/grafana/grafana/)\n\n### 1. Docker run\n\n```bash\ndocker run -d -p 3000:3000 --link influxdb:influxdb --restart=always --name grafana grafana/grafana:4.6.2\n```\n\n![Docker run ](https://i.imgur.com/J7M3e8q.png)\n\n### 2. 登入grafana <http://YourHost:3000)>\n\n> 帳號跟密碼預設是 admin\n\n![帳號跟密碼預設是 admin](https://i.imgur.com/zv65arG.png)\n\n![帳號跟密碼預設是 admin](https://i.imgur.com/MFEJxKj.png)\n\n### 3. Add data source\n\n[!Add data source](https://i.imgur.com/4GvRimh.png)\n\n![Add data source](https://i.imgur.com/SDNjczQ.png)\n\n#### 3.1 Name\n\n> Name 輸入 grafana\n\n#### 3.2 HTTP settings\n\n> URL輸入 <http://influxdb:8086> (influxdb為你的 containerau名稱)\n\n#### 3.3 InfluxDB Details\n\n> Database 輸入gragana\n\n#### 設定完就可以看到 Grafana 與 InfluxDB 已經連結成功\n\n![設定完就可以看到](https://i.imgur.com/HzHakcG.png)\n\n## Telegraf\n\n### [telegraf官網](https://www.influxdata.com/time-series-platform/telegraf/)\n\n![telegraf官網](https://i.imgur.com/nlJIjUU.png)\n\n### 1. [下載](https://dl.influxdata.com/telegraf/releases/telegraf-1.9.4_windows_amd64.zip)\n\n### 2. 設定 [telegraf.conf](https://github.com/influxdata/telegraf)\n\n![設定](https://i.imgur.com/VlY1Cf2.png)\n\n#### 2.1. Input Plugins 使用 [win_perf_counters](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters) 這個套件(官方預設套件)\n\n![win_perf_counters](https://i.imgur.com/tTqZVrg.png)\n\n#### 2.2  設定 Output influxdb\n\n![設定](https://i.imgur.com/AtxDOGt.png)\n\n### 3. 啟動服務\n\n```bash\nD:\ncd D:\\telegraf\\\ntelegraf.exe -config D:\\telegraf\\telegraf.conf --service install\nnet start telegraf\n\n```\n\n![啟動服務](https://i.imgur.com/FXW0ePJ.png)\n\n### 4. grafana 新增一個 dashborad\n\n![新增一個](https://i.imgur.com/KiTs1PU.png)\n\n![新增一個](https://i.imgur.com/d8Uy0zk.png)\n\n#### 4.1 輸入 1902\n\n> [1902 dashboards](https://grafana.com/dashboards/1902)\n\n![1902 dashboards](https://i.imgur.com/6hjOm25.png)\n\n![1902 dashboards](https://i.imgur.com/V9M6Xic.png)\n\n#### 4.2 選擇 grafana db\n\n![選擇 grafana db](https://i.imgur.com/6yReJH8.png)\n\n#### 4.3 進入 grafana 就可以看到系統的資訊\n\n![grafana](https://i.imgur.com/qOxQh4n.png)\n\n# 參考\n\n* [influxdb docker hub](https://hub.docker.com/_/influxdb/)\n* [Grafana docker hub](https://hub.docker.com/r/grafana/grafana/)\n* [telegraf官網](https://www.influxdata.com/time-series-platform/telegraf/)\n* [telegraf git](https://github.com/influxdata/telegraf)\n* [telegraf Input Plugins - win_perf_counters](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters)","tags":["Docker","Grafana","InfluxDb","telegraf"],"categories":["Grafana"]},{"title":"SonarQube Server pluin StyleCop","url":"/2019/01/18/SonarQube-Server-pluin-StyleCop/","content":"\n# SonarQube Server pluin SyleCop Pluin\n\n### 1. 下載外掛\n\n#### [官網下載](http://www.sonarplugins.com/stylecop)\n\n![](https://i.imgur.com/RS5OUM4.png)\n\n#### 指令下載\n\n```\nwget http://downloads.sonarsource.com/plugins/org/codehaus/sonar-plugins/stylecop/sonar-stylecop-plugin/1.1/sonar-stylecop-plugin-1.1.jar\n```\n\n### 2.下載到 /extensions/plugins 資料夾底下，然後重新啟動\n\n```\ndocker restart sonarqube\ndocker logs sonarqube\n```\n![](https://i.imgur.com/nFq3qfv.png)","tags":["SonarQube","SyleCop"],"categories":["SonarQube"]},{"title":"SonarQube Server on Docker","url":"/2019/01/15/SonarQube-Server-on-Docker/","content":"\n## SonarQube Server on Docker\n\n### 1. 建立持久層資料夾\n\n```\nmkdir -p -m 777 ./sonarqube && mkdir -p -m 777 ./sonarqube/conf && mkdir -p -m 777 ./sonarqube/data && mkdir -p -m 777 ./sonarqube/logs && mkdir -p -m 777 ./sonarqube/extensions\n```\n\n### 2. docker-compose.yml\n\n```\nversion: \"3.5\"\nservices:\n    postgresql:\n                container_name: \"postgresql\"\n                image: \"postgres\"\n                ports:\n                - \"5432:5432\"\n                volumes:\n                - \"/postgresql:/var/lib/postgresql/data\"\n                environment:\n                - \"POSTGRES_USER=sonar\"\n                - \"POSTGRES_PASSWORD=sonar\"\n                restart: always\n    sonarqube:\n                container_name: \"sonarqube\"\n                image: \"sonarqube:7.7-community\"\n                ports:\n                - \"9000:9000\"\n                volumes:\n                - \"/sonarqube/conf:/opt/sonarqube/conf\"\n                - \"/sonarqube/data:/opt/sonarqube/data\"\n                - \"/sonarqube/logs:/opt/sonarqube/logs\"\n                - \"/sonarqube/extensions:/opt/sonarqube/extensions\"\n                environment:\n                - \"sonar.jdbc.username=sonar\"\n                - \"sonar.jdbc.password=sonar\"\n                - \"sonar.jdbc.url=jdbc:postgresql://postgresql/sonar\"\n                links:\n                - \"postgresql:postgresql\"\n                restart: always\n\n```\n\n### ADserver 設定\n\n> [設定](https://docs.sonarqube.org/latest/instance-administration/delegated-auth/)\n> [LDAP Plugin](https://docs.sonarqube.org/display/SONARQUBE67/LDAP+Plugin)\n> [团队环境：代码质量管理SonarQube安装](https://blog.frognew.com/2017/05/install-sonarqube.html)\n\n#### 1. 將 sonar.properties 放置 SONARQUBE_HOME/conf/sonar.properties\n\n```bash=\n\n# General Configuration\n# LDAP configuration\nsonar.security.realm=LDAP\nsonar.authenticator.createUsers=true\nsonar.security.savePassword=true\nsonar.security.updateUserAttributes=true\n\nldap.url=ldap://YourAdServer\nldap.bindDn=bindDn\nldap.bindPassword=bindPassword\n\n# User Configuration\nldap.user.baseDn=baseDn\nldap.user.request=(&(objectClass=user)(sAMAccountName={login}))\n\n```\n\n#參考\n* [sonarqube-postgres-docker.md](https://gist.github.com/ceduliocezar/b3bf93125024482b5f2f479696842046)\n* [postgres docker](https://hub.docker.com/_/postgres)\n* [sonarqube docker](https://hub.docker.com/_/sonarqube/)","tags":["Docker","SonarQube","docker-compose","PostgreSql"],"categories":["SonarQube"]},{"title":"SonarQubeScanner & UnitTest 使用 Jenkins Pipeline","url":"/2019/01/15/SonarQubeScanner-for-MSBuild-使用-Jenkins-Pipeline/","content":"## SonarQubeScanner & UnitTest 使用 Jenkins Pipeline\n\n> 使用 Jenkins Plugin 可以參考[這篇](https://ste5022424.github.io/2018/11/21/SonarQube-%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%93%81%E8%B3%AA%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Jenkins/)，此篇是使用 Pipeline 來實現 SonarQube 掃描\n\n### .net framework\n\n#### 1. 下載 [sonar-scanner-msbuild-4.4.2.1543-net46](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)\n\n#### 2. 下載 [Opencover Tool](https://github.com/opencover/opencover/releases)\n\n#### 3. Pipeline\n\n```bash\nnode {\n\n   VERSION = VersionNumber([projectStartDate: '2015-01-01', versionNumberString: '${YEARS_SINCE_PROJECT_START}.${BUILD_MONTH}.${BUILD_DAY}.${BUILDS_TODAY}', versionPrefix: '', worstResultForIncrement: 'NOT_BUILT'])\n   TheJobName =\"${env.JOB_NAME}\"\n\n    stage('Sonarqube Scan Begin'){\n        echo \"Sonarqube Scan Begin Start\"\n        bat \"D:\\\\tools\\\\sonar-scanner-msbuild-4.4.2.1543-net46\\\\SonarQube.Scanner.MSBuild.exe begin /k:${TheJobName} /n:${TheJobNopame} /v:${VERSION} /d:sonar.exclusions=obj\\\\*,bin\\\\*,packages\\\\**,Properties\\\\*\"\n        echo \"Sonarqube Scan Begin OK\"\n   }\n   stage('Msbuild'){\n       echo \"Msbuild Start\"\n       bat \"\\\"C:/Program Files (x86)/MSBuild/14.0/bin/amd64/msbuild.exe\\\" ${TheJobName}.sln /t:Rebuild /p:Configuration=Release\"\n       echo \"Msbuild OK\"\n   }\n   stage('OpenCover') {\n       echo \"OpenCover Start\"\n       bat  \"%LOCALAPPDATA%\\\\Apps\\\\OpenCover\\\\OpenCover.Console.exe -output:\\\"%CD%\\\\opencover.xml\\\" -register:user -target:\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TestWindow\\\\vstest.console.exe\\\" -targetargs:\\\"${TheJobName}.Test\\\\bin\\\\Release \\\\${TheJobName}.Test.dll \\\"/logger:trx\\\"\"\n       echo \"OpenCover OK\"\n   }\n   stage('Sonarqube Scan End'){\n       echo \"Sonarqube Scan End Start\"\n        bat \"D:\\\\tools\\\\sonar-scanner-msbuild-4.4.2.1543-net46\\\\SonarQube.Scanner.MSBuild.exe end\"\n        echo \"Sonarqube Scan End OK\"\n   }\n}\n\n```\n\n### .Net Core\n\n#### 1. 專案安裝 coverlet.msbuild，因為要產生 coverage.opencover.xm\n\n```bash\ndotnet add package coverlet.msbuild\n```\n\n#### 2. jenkins Server 安裝 dotnet-sonarscanner\n\n```bash\ndotnet tool install --global dotnet-sonarscanner --version 4.3.1\n```\n\n#### 3. pipeline\n\n```bash\nnode {\n\n   VERSION = VersionNumber([projectStartDate: '2015-01-01', versionNumberString: '${YEARS_SINCE_PROJECT_START}.${BUILD_MONTH}.${BUILD_DAY}.${BUILDS_TODAY}', versionPrefix: '', worstResultForIncrement: 'NOT_BUILT'])\n   TheJobName =\"${env.JOB_NAME}\"\n\n    stage('dotnet sonarscanner begin') {\n        echo \"dotnet sonarscanner begin Start\"\n        bat  \"dotnet sonarscanner begin /k:${TheJobName} /n:${TheJobName} /v:${VERSION} /d:sonar.exclusions=obj\\\\*,bin\\\\*,packages\\\\**,Properties\\\\* /d:sonar.cs.opencover.reportsPaths=\\\"${TheJobName}.Test\\\\coverage.opencover.xml\\\" \"\n        echo \"dotnet sonarscanner begin OK\"\n    }\n    stage('dotnet sonarscanner build') {\n        echo \"dotnet sonarscanner build Start\"\n        bat  \"dotnet build ${TheJobName}.sln -c Release -p:Version=${VERSION}\"\n        echo \"dotnet sonarscanner build OK\"\n    }\n   stage('dotnet test') {\n       echo \"dotnet test Start\"\n       bat  \"dotnet test ${TheJobName}.Test --logger:trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover\"\n       echo \"dotnet test OK\"\n   }\n    stage(\"dotnet sonarscanner end\") {\n        echo \"dotnet sonarscanner end Start\"\n        bat  \"dotnet sonarscanner end\"\n        echo \"dotnet sonarscanner end OK\"\n    }\n}\n\n```\n\n## 參考\n\n* [Analyzing with SonarScanner for MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)\n* [Code Coverage Results Import (C#, VB.NET)](https://docs.sonarqube.org/pages/viewpage.action?pageId=6389770)\n* [Cross platform code coverage arrives for .NET Core](http://tattoocoder.com/cross-platform-code-coverage-arrives-for-net-core/)\n* [Collecting test coverage using Coverlet and SonarQube for a .net core project](https://medium.com/agilix/collecting-test-coverage-using-coverlet-and-sonarqube-for-a-net-core-project-ef4a507d4b28)\n* [Code Coverage Results Import (C#, VB.NET)](https://docs.sonarqube.org/pages/viewpage.action?pageId=6389770#CodeCoverageResultsImport(C#,VB.NET)-OpenCover)\n* [C# unit testing on a jenkins pipeline](https://medium.com/@toja/c-unit-testing-on-a-jenkins-pipeline-532e6d5dd133)","tags":["Jenkins","Pipeline","SonarQube"],"categories":["SonarQube"]},{"title":"ELK Stack","url":"/2019/01/09/ELK Stack/","content":"\n# ELK Stack\nELK Stack 是 Elasticsearch、Logstash、Kibana這三個Open Source專案\n\n![](https://i.imgur.com/Fk7k1EP.png)\n\n\n### Elasticsearch \n\n> Elasticsearch是用於分佈式搜索和實時數據進行分析的平台\n\n### Kibana \n\n> Kibana是讓Elasticsearch儲存的數據視覺化的平台\n\n### Logstash\n\n> 日誌搜集工具\n\n### Beat\n\n> Beats是一系列產品的統稱，屬於ElasticStack裡面收集數據的這一層\n\n\n#  Docker Run ELK\n\n## 1. Install Dokcer\n\n```\ncurl -fsSL https://get.docker.com/ | sh\n```\n#### Dokcer 指令\n>  -d 背景執行\n    --name 名稱\n    --restart=always 自動重啟\n    -p port\n    -V 指定資料夾位置\n\n## 2. Run elasticsearch\n\n\n### 2-1. Creat elasticsearch 持久層資料夾跟設定權限\n\n```\nmkdir -m 777 /data/elasticsearch\n```\n\n### 2-2. Run elasticsearch 之前要先設定 [max_map_count](https://github.com/docker-library/elasticsearch/issues/111)\n\n```\nsudo sysctl -w vm.max_map_count=262144\n```\n### 2-3. docker run\n\n```\ndocker run  -d -p 9200:9200 -p 9300:9300 --name elasticsearch -v /data/elasticsearch:/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:6.5.4\n```\n> [Install Elasticsearch with Docker](https://www.elastic.co/guide/en/elasticsearch/reference/6.5/docker.html#docker)\n> \n### 2-4 Preview elasticsearch\n\n```\ncurl 127.0.0.1:9200\n```\n![](https://i.imgur.com/DspQBxW.png)\n\n## 3. Run kibana\n\n### 3-1 docker run\n```\ndocker run -d --name kibana --restart=always -p 5601:5601 --link elasticsearch:elasticsearch docker.elastic.co/kibana/kibana:6.5.4\n```\n> [Run kibana with Docker](https://www.elastic.co/guide/en/kibana/6.5/docker.html)\n\n> Set [kibana.yml](https://www.elastic.co/guide/en/kibana/6.5/settings.html)\n\n### 3-2 Preview kibana(http://yourhost:5601)\n\n![](https://i.imgur.com/NRw4J3U.png)\n\n### 3-3  Check kibana status (http://yourhost:5601/status)\n\n![](https://i.imgur.com/LUBhBbr.png)\n\n## 4. Run Logstash\n\n### 4-1 Run [donetcoreapi](https://ste5022424.github.io/2019/01/04/Net-Core-Nlog/)\n\n#### Run\n![](https://i.imgur.com/2lT45G1.png)\n#### Log\n![](https://i.imgur.com/zoE34DD.png)\n\n### 4-2 Creat logstash.conf\n\n#### Creat in /tmp/logstash/pipeline/\n```\ncd ..\ncd /tmp/logstash/pipeline/\nvi logstash.conf\n```\n#### logstash.conf\n```\nfile {\n    path => \"/usr/share/logstash/Log/*\"\n    type => \"file\"\n    start_position => \"beginning\"\n   }\n }\n\nfilter {\n    grok {\n           match => [\"message\", \"%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{NUMBER:threadid} %{LOGLEVEL:loglevel} %{NOTSPACE:logger} %{GREEDYDATA:message}\"]\n           overwrite => [ \"message\" ]\n        }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    index => \"logstash-test\"  \n   }\n  stdout { codec => rubydebug}\n}\n```\n> [logstash pattern](https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns)\n\n> [Grok filter plugin](https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html)\n### 4-3 docker run\n```\ndocker run it ---name logstash --link elasticsearch:elasticsearch -v /tmp/logstash/pipeline:/usr/share/logstash/pipeline/ -v /tmp/Log/:/usr/share/logstash/Log/ docker.elastic.co/logstash/logstash:6.5.4\n```\n\n> /tmp/Log/:/usr/share/logstash/Log/   → [donetcoreapi](https://ste5022424.github.io/2019/01/04/Net-Core-Nlog/) log 共用至 logstash\n \n> /tmp/logstash/pipeline:/usr/share/logstash/pipeline/ →  自定義 logstash.conf\n\n> [Configuring Logstash for Docker](https://www.elastic.co/guide/en/logstash/6.5/config-setting-files.html)\n  \n### 4-4 Push to elasticsearch\n\n#### attach  logstash\n```\ndocker attach logstash\n```\n![](https://i.imgur.com/H5u5hz5.png)\n\n### 4-4 Set kibana\n\n#### Set index\n![](https://i.imgur.com/JZOrSEX.png)\n\n#### Set Time Filter\n![](https://i.imgur.com/jfVaVXd.png)\n\n#### Discover\n![](https://i.imgur.com/0GrJwU1.png)\n\n## 5. Filebeat\n\n> 官網的[架構圖](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html)可以知道 Filebeat 是一個搜集器，它可以把 log 蒐集起來之後往後面送\n\n![架構圖](https://i.imgur.com/l9fRRUE.png)\n\n\n> Integrating with Messaging Queuesedit\n\n> 在Log量很大的情況下，會使用 MessagQueue 來減輕負擔，以下是官方網站的[架構圖](https://www.elastic.co/guide/en/logstash/current/deploying-and-scaling.html)\n\n![架構圖](https://www.elastic.co/guide/en/logstash/current/static/images/deploy4.png)\n\n> filebeat 蒐集log後，推送到 kafka，logstash 訂閱 kafka，logstash 從 kafa 抓資料後，再將 log parser，然後再送到 elasticsearch ，最後再由 kibana 顯示資料\n\n## 5.1 Docker  run [Filebeat](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html#_custom_image_configuration)\n\n> Dockerfile\n\n```bash\nFROM docker.elastic.co/beats/filebeat:6.6.2\nCOPY filebeat.yml /usr/share/filebeat/filebeat.yml\nUSER root\nRUN chown root:filebeat /usr/share/filebeat/filebeat.yml\nUSER filebeat\n```\n\n> [Configure the Logstash output](https://www.elastic.co/guide/en/beats/filebeat/master/kafka-output.html)\n\n## 參考\n\n* [installing-elastic-stack](https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html)\n* [deploying-and-scaling](https://www.elastic.co/guide/en/logstash/6.5/deploying-and-scaling.html)\n* [官方網站](https://www.elastic.co/cn/elk-stack)","tags":["Docker","ELK Stack","Elasticsearch","Kibana","Logstash"],"categories":["ELK Stack"]},{"title":".Net Core Nlog","url":"/2019/01/04/Net-Core-Nlog/","content":"## .Net Core Nlog\n\n### 1. 用之前的[webapi範例](https://ste5022424.github.io/2018/12/28/Net-Core-CLI/)來實作\n\n### 2. 安裝 Nlog\n\n```\nInstall-Package NLog.Web.AspNetCore -Version 4.7.0\n```\n![](https://i.imgur.com/kTy4hbj.png)\n\n### 3. 新增 nlog.config\n\n![](https://i.imgur.com/PvtJXCY.png)\n\n\n### 4. 設定相關檔案\n\nnlog 設定可以看[官網](https://github.com/nlog/NLog/wiki/Configuration-file)\n\n> nlog.config\n\n```conf\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-ins tance\"\n      autoReload=\"true\"\n      internalLogLevel=\"info\"\n      internalLogFile=\"c:\\temp\\internal-nlog.txt\">\n\n\t<!-- enable asp.net core layout renderers -->\n\t<extensions>\n\t\t<add assembly=\"NLog.Web.AspNetCore\" />\n\t</extensions>\n\t<!-- the targets to write to -->\n\t<targets>\n\t\t<target xsi:type=\"File\"\n\t\t\tname=\"file\"\n\t\t\tencoding=\"utf-8\"\n\t\t\tlayout=\"${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff} ${threadid} ${uppercase:${level}} ${logger} ${message} ${exception:format=tostring}\"\n\t\t\tfileName=\"D:\\Log\\donetcore.log\"\n\t\t\tarchiveFileName=\"D:\\Log\\donetcore.{#}.log\"\n\t\t\tarchiveNumbering=\"Date\"\n\t\t\tarchiveEvery=\"Hour\"\n\t\t\tarchiveDateFormat=\"yyyyMMdd-HH\"\n\t\t\tmaxArchiveFiles=\"720\" />\n\n\t\t<target xsi:type=\"File\"\n\t\t\tname=\"filelinux\"\n\t\t\tencoding=\"utf-8\"\n\t\t\tlayout=\"${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff} ${threadid} ${uppercase:${level}} ${logger} ${message} ${exception:format=tostring}\"\n\t\t\tfileName=\"Log/donetcore.log\"\n\t\t\tarchiveFileName=\"Log/donetcore.{#}.log\"\n\t\t\tarchiveNumbering=\"Date\"\n\t\t\tarchiveEvery=\"Hour\"\n\t\t\tarchiveDateFormat=\"yyyyMMdd-HH\"\n\t\t\tmaxArchiveFiles=\"720\" />\n\t</targets>\n\t<rules>\n\t\t<!--Skip non-critical Microsoft logs and so log only own logs-->\n\t\t<logger name=\"Microsoft.*\" maxLevel=\"Info\" final=\"true\" />\n\t\t<!--<logger name=\"*\" minlevel=\"Info\" writeTo=\"filelinux\" />-->\n\t\t<logger name=\"*\" minlevel=\"Info\" writeTo=\"file\" />\n\t</rules>\n</nlog>\n```\n\n> program.cs\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing NLog.Web;\n\nnamespace donetcore\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // NLog: setup the logger first to catch all errors\n            var logger = NLog.Web.NLogBuilder.ConfigureNLog(\"nlog.config\").GetCurrentClassLogger();\n            try\n            {\n                logger.Debug(\"init main\");\n                CreateWebHostBuilder(args).Build().Run();\n            }\n            catch (Exception ex)\n            {\n                //NLog: catch setup errors\n                logger.Error(ex, \"Stopped program because of exception\");\n                throw;\n            }\n            finally\n            {\n                // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux)\n                NLog.LogManager.Shutdown();\n            }\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>()\n                .ConfigureLogging(logging =>\n                {\n                    logging.ClearProviders();\n                    logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);\n                })\n                .UseNLog();  // NLog: setup NLog for Dependency injection\n    }\n}\n```\n\n> appsettings.json\n\n```conf\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n```\n\n### 5. 程式寫 log\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\n\nnamespace donetcore.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class ValuesController : ControllerBase\n    {\n        private readonly ILogger<ValuesController> _logger;\n\n        public ValuesController(ILogger<ValuesController> logger)\n        {\n            _logger = logger;\n        }\n\n        // GET api/values\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n            this._logger.LogInformation(\".net core api 測試\");\n            return new string[] { \"value1\", \"value2\" };\n        }\n    }\n}\n```\n\n### 6. Run 專案並檢查 log 是否有寫成功\n\n![run](https://i.imgur.com/3puq5ZY.png)\n\n## Run docker in linux\n\n### 1. 更改 nlog.config 設定\n\n>nlog.config\n\n```conf\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      autoReload=\"true\"\n      internalLogLevel=\"info\"\n      internalLogFile=\"c:\\temp\\internal-nlog.txt\">\n\n\t<!-- enable asp.net core layout renderers -->\n\t<extensions>\n\t\t<add assembly=\"NLog.Web.AspNetCore\" />\n\t</extensions>\n\t<!-- the targets to write to -->\n\t<targets>\n\t\t<!--<target xsi:type=\"File\"\n\t\t\tname=\"file\"\n\t\t\tencoding=\"utf-8\"\n\t\t\tlayout=\"${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff} ${threadid} ${uppercase:${level}} ${logger} ${message} ${exception:format=tostring}\"\n\t\t\tfileName=\"D:\\Log\\donetcore.log\"\n\t\t\tarchiveFileName=\"D:\\Log\\donetcore.{#}.log\"\n\t\t\tarchiveNumbering=\"Date\"\n\t\t\tarchiveEvery=\"Hour\"\n\t\t\tarchiveDateFormat=\"yyyyMMdd-HH\"\n\t\t\tmaxArchiveFiles=\"720\" />-->\n\n\t\t<target xsi:type=\"File\"\n\t\t\tname=\"filelinux\"\n\t\t\tencoding=\"utf-8\"\n\t\t\tlayout=\"${date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff} ${threadid} ${uppercase:${level}} ${logger} ${message} ${exception:format=tostring}\"\n\t\t\tfileName=\"Log/donetcore.log\"\n\t\t\tarchiveFileName=\"Log/donetcore.{#}.log\"\n\t\t\tarchiveNumbering=\"Date\"\n\t\t\tarchiveEvery=\"Hour\"\n\t\t\tarchiveDateFormat=\"yyyyMMdd-HH\"\n\t\t\tmaxArchiveFiles=\"720\" />\n\t</targets>\n\t<rules>\n\t\t<!--Skip non-critical Microsoft logs and so log only own logs-->\n\t\t<logger name=\"Microsoft.*\" maxLevel=\"Info\" final=\"true\" />\n\t\t<logger name=\"*\" minlevel=\"Info\" writeTo=\"filelinux\" />\n\t\t<!--<logger name=\"*\" minlevel=\"Info\" writeTo=\"file\" />-->\n\t</rules>\n</nlog>\n```\n\n### 2. build docker image\n\n> linux 建置 .net core 可以參考[這篇](https://ste5022424.github.io/2018/12/28/Net-Core-SKD-For-Linux/)\n\n```bash\ndocker  build -t dotnetcoreapi:v2 .\n```\n\n### 3. docker run\n\n```bash\ndocker run -d -p 8181:80 --name netcorenlog -v /tmp/Log:/app/Log dotnetcoreapi:v2\n```\n\n> 如果要進入docker內，可以使用 [exec](https://philipzheng.gitbooks.io/docker_practice/content/container/enter.html) \n\n```bash\ndocker exec -ti netcorenlog bash\n```\n\n### 4. 執行\n\n![run](https://i.imgur.com/1UmE73P.png)\n\n### 5. 檢查宿主就可以看到 log已經共享出來了\n\n![check](https://i.imgur.com/0Xr9hvW.png)\n\n![check](https://i.imgur.com/5glSt7g.png)\n\n> [範例檔案](https://github.com/ste5022424/donetcorewebapi)\n\n## 參考\n\n* [Getting started with ASP.NET Core 2](https://github.com/NLog/NLog.Web/wiki/Getting-started-with-ASP.NET-Core-2)\n* [nlog設定](https://github.com/nlog/NLog/wiki/Configuration-file)\n","tags":[".Net Core","Nlog"],"categories":[".net core"]},{"title":"GCP K8s Quickstart","url":"/2018/12/28/GCP K8s Quickstart/","content":"\n## GCP K8s Quickstart\n\n### 1. 安裝 gcloud\n\n>[GCP Container Registry image安裝](https://ste5022424.github.io/2018/12/26/GCP-Container-Registry/)\n>[Cloud SDK(Linux)快速入門](https://cloud.google.com/sdk/docs/quickstart-linux)\n\n### 2. Creating a GKE cluster\n\n```\n./gcloud/google-cloud-sdk/bin/gcloud container clusters create [CLUSTER_NAME]\n```\n![](https://i.imgur.com/fcpVqKY.png)\n\n### 3. 安裝 kubectl\n\n```\n./gcloud/google-cloud-sdk/bin/gcloud components install kubectl\n```\n![](https://i.imgur.com/2gtxj6u.png)\n\n### 4. kubectl run Container Registry\n\n#### 4.1 Build Docker image \n\n> .net core webapi 建立可以參考這篇[.net core webapi](https://ste5022424.github.io/2018/12/28/Net-Core-CLI/)\n\n```\ndocker build -t gcr.io/[your-projectid]/netcorewebapi:v1\n```\n#### 4.2 Push image to GCR\n\n```\ndocker push gcr.io/[your-projectid]/netcorewebapi:v1\n```\n#### 4.3 執行服務\n\n```\nkubectl run netcorewebapi --image gcr.io/[your-projectid]/netcorewebapi:v1 --port 80\n```\n![](https://i.imgur.com/vWp9gWH.png)\n\n#### 4.4. 公開 k8s 容器\n```\nkubectl expose deployment netcorewebapi  --type LoadBalancer --port 80 --target-port 80\n```\n#### 4.5. 取得服務的資訊\n```\nkubectl get service netcorewebapi \n```\n![](https://i.imgur.com/IX5PCxJ.png)\n\n####  4.6 預覽\n\n![](https://i.imgur.com/3DX0Tcb.png)\n\n\n## 參考\n\n* [K8S Quickstart](https://cloud.google.com/kubernetes-engine/docs/quickstart)","tags":["Docker","k8s","GCP"],"categories":["k8s"]},{"title":".Net Core SKD For Linux","url":"/2018/12/28/Net-Core-SKD-For-Linux/","content":"## .Net Core SKD For Linux\n\n```\ncd tmp/\nmkdir netcoresdk2.1\ncd netcoresdk2.1\n\nwget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n\n\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1\n\n```\n\n## 參考\n* [https://dotnet.microsoft.com/download/dotnet-core/2.1](https://dotnet.microsoft.com/download/dotnet-core/2.1)\n* [Install .NET Core 2.1 SDK on Linux Ubuntu 16.04 x64](https://dotnet.microsoft.com/download/linux-package-manager/ubuntu16-04/sdk-2.1.502)\n","tags":[".net core","Linux build"],"categories":[".net core"]},{"title":".Net Core CLI run Docker Web API","url":"/2018/12/28/Net-Core-CLI/","content":"\n先下載 [.net core sdk](https://dotnet.microsoft.com/download)\n\n### .Net Core CLI run Docker Web API\n\n```bash\ndotnet new webapi -lang C#\n```\n\n![run](https://i.imgur.com/Cl6NlP2.png)\n\n![](https://i.imgur.com/hmUgDAO.png)\n\n### 執行站台\n\n```bash\ndotnet run\n```\n\n![dotnet](https://i.imgur.com/ZeOSddd.png)\n\n![dotnet](https://i.imgur.com/97j7YQL.png)\n\n### 打包 Docker Image 並執行 Docker Web API\n\n#### Creat Dockerfile\n\n```bash\necho Dockerfile > Dockerfile\n```\n\n > 把官方網站的[範例](https://docs.docker.com/engine/examples/dotnetcore/)貼上去\n\n```bash\nFROM microsoft/dotnet:sdk as build-env\nWORKDIR /app\n\n# Copy csproj and restore as distinct layers\nCOPY *.csproj ./\nRUN dotnet restore\n\n# Copy everything else and build\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM microsoft/dotnet:aspnetcore-runtime\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"donetcore.dll\"]\n```\n\n#### Docker build\n\n```bash\ndocker build -t apitest:v1 .\n```\n\n![docker](https://i.imgur.com/iN1NrFT.png)\n\n#### Docker run\n\n```bash\ndocker run -d  --name apitest -p 90:80 apitest:v1\n```\n\n#### 瀏覽 <http://127.0.0.1:90/api/values>\n\n![瀏覽](https://i.imgur.com/BfEQqZn.png)\n\n> [範例檔案](https://github.com/ste5022424/donetcorewebapi)\n\n## 參考\n\n* [Dockerize a .NET Core application](https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-new?tabs=netcore21)\n* [Dockerize a .NET Core application](https://docs.docker.com/engine/examples/dotnetcore/)","tags":["Docker",".net core",".net core cli","web api"],"categories":[".net core"]},{"title":"GCP Container Registry","url":"/2018/12/26/GCP-Container-Registry/","content":"\n## GCP Container Registry\n\n### 1. 確認帳號已經啟用付費功能\n### 2. [開啟API服務](https://console.cloud.google.com/flows/enableapi?apiid=containerregistry.googleapis.com&redirect=https://cloud.google.com/container-registry/docs/quickstart&_ga=2.224013522.-850793838.1545806748)\n\n![](https://i.imgur.com/jHv4PGH.png)\n\n\n### 3. 安裝 [Cloud SDK](https://cloud.google.com/sdk/docs/)\n\n#### 3.1 下載 SDK\n```\nmkdir gcloud\ncd gcloud\nwget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-218.0.0-linux-x86_64.tar.gz\n```\n#### 3.2 解壓縮\n```\ngunzip google-cloud-sdk-218.0.0-linux-x86_64.tar.gz\ntar xvf google-cloud-sdk-218.0.0-linux-x86_64.tar\n```\n> 這時候就可以看到 google-cloud-sdk/ 這個資料夾\n![](https://i.imgur.com/Mh6PsOr.png)\n\n#### 3.3 執行指令\n\n```\ncd google-cloud-sdk/\n./install.sh\n```\n![](https://i.imgur.com/2iG0Dp3.png)\n\n#### 3.4 init SDK\n\n```\ncd bin\n./gcloud init\n```\n> 把網址貼到網頁上面 取得 verification code\n \n![](https://i.imgur.com/rQRHit0.png)\n\n![](https://i.imgur.com/zz1RyRD.png)\n\n### 4. Build image\n\n#### 4.1.1 建立 Dockerfile\n```\nmkdir gcpimagetest\ncd gcpimagetest/\nvi Dockerfile\n```\n#### 4.1.2 將官方的範例貼上去\n```\n# The Dockerfile defines the image's environment\n# Import Python runtime and set up working directory\nFROM python:2.7-alpine\nWORKDIR /app\nADD . /app\n\n# Install any necessary dependencies\nRUN pip install -r ./requirements.txt\n\n# Open port 80 for serving the webpage\nEXPOSE 80\n\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n```\n\n#### 4.1.3 建立 requirements.txt\n\n```\n# This file defines the image's dependencies\nFlask\n```\n\n\n#### 4.1.4 建立 app.py\n```\n# The Docker image contains the following code\nfrom flask import Flask\nimport os\nimport socket\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    html = \"<h3>Hello, World!</h3>\"\n    return html\n\nif __name__ == \"__main__\":\n  app.run(host='0.0.0.0', port=80)\n```\n\n#### 4.2 建立 image\n\n```\ndocker build -t quickstart-image .\n```\n![](https://i.imgur.com/QzIpb2r.png)\n\n\n> gcloud auth 設定(只要設定一次就可以了)\n\n```\n./gcloud auth configure-docker\n```\n![](https://i.imgur.com/4vnE8VL.png)\n\n#### 4.3 tag image\n\n```\ndocker tag quickstart-image gcr.io/[PROJECT-ID]/quickstart-image:tag1\n```\n### 5. Push Image\n\n#### 5.1 push 前要安裝[憑證](https://cloud.google.com/container-registry/docs/advanced-authentication)\n![](https://i.imgur.com/U8eL3Hp.png)\n\n\n#### 5.2 建立 docker-credential-gcr\n```\nvi docker-credential-gcr\n```\n\n####  5.3 輸入以下憑證\n```\nVERSION=1.5.0\nOS=linux  # or \"darwin\" for OSX, \"windows\" for Windows.\nARCH=amd64  # or \"386\" for 32-bit OSs\n\ncurl -fsSL \"https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v${VERSION}/docker-credential-gcr_${OS}_${ARCH}-${VERSION}.tar.gz\" \\\n  | tar xz --to-stdout ./docker-credential-gcr \\\n  > /usr/bin/docker-credential-gcr && chmod +x /usr/bin/docker-credential-gcr\n```\n\n####  5.4 設定憑證\n\n> 記得要回到目錄的最上層才可以設定\n\n```\n./gcloud/google-cloud-sdk/bin/gcloud  components install docker-credential-gcr\n```\n> 成功畫面\n\n![](https://i.imgur.com/TtZkdtE.png)\n\n#### 5.5 提升 docker-credential-gcr 文件權限 並執行 docker-credential-gcr設定\n```\nchmod 777 docker-credential-gcr\ndocker-credential-gcr configure-docker\n```\n#### 5.6 設定完成之後就可以 推送到 gcp 上面了\n\n```\ndocker push gcr.io/[PROJECT-ID]/quickstart-imag:tag1\n```\n![](https://i.imgur.com/NZnYOf0.png)\n\n![](https://i.imgur.com/SpO0EuV.png)\n\n### 6. Pull Image\n\n```\ndocker pull gcr.io/[PROJECT-ID]/quickstart-image:tag1\n```\n## 參考\n* [官方說明文件](https://cloud.google.com/container-registry/docs/)\n* [Authentication](https://cloud.google.com/container-registry/docs/advanced-authentication)","tags":["Docker","GCP","GCP Registry","Gcloud"],"categories":["GCP Container Registry"]},{"title":"mac ll","url":"/2018/12/26/mac-ll/","content":"\n新增一個　.bash_profile\n/Users/YOUR_USER_NAME/.bash_profile\n\n```bash\nalias ll='ls -lG'\n```\n\n# 參考\n* [How can I install the `ll` command on Mac OS X?](https://unix.stackexchange.com/questions/28425/how-can-i-install-the-ll-command-on-mac-os-x)","tags":["mac"],"categories":["mac"]},{"title":"Gitea","url":"/2018/12/25/Gitea/","content":"# Gitea\n\n## Docker run\n\n### 1. 建立儲存庫資料夾\n\n```bash\nsudo mkdir -p /var/lib/gitea\n```\n\n### 2. Docker run\n\n```bash\n\ndocker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest\n```\n\n### 3. 預覽 Yourhost:10080\n\n![預覽](https://i.imgur.com/OmcRKBY.png)\n\n### 4.進入安裝\n\n![進入安裝](https://i.imgur.com/DznoR4g.png)\n\n## 設定 Gitea\n\n### 資料庫\n\n>可以選擇多種資料庫類型\n\n![資料庫](https://i.imgur.com/tEwQvrd.png)\n\n### 一般設定\n\n> SSH 伺服器域名 可以設定主機的Domain\n> Gitea 基本 URL 可以設定主機的Domain 或者IP\n \n![一般設定](https://i.imgur.com/ZwBVomv.png)\n\n### 可選設定 >  管理員帳號設定\n\n> 設定管理員帳號\n\n![設定管理員帳號](https://i.imgur.com/ZvkuMfN.png)\n\n### 完成之後就可以看到 git 的畫面了\n\n![完成之後就可以看到](https://i.imgur.com/2xu0ZI2.png)\n\n## 參考\n\n* [Gitea](https://docs.gitea.io/zh-tw/)\n* [Gitea Docker](https://docs.gitea.io/zh-tw/install-with-docker/)","tags":["Gitea","Git"],"categories":["Gitea"]},{"title":"redis lua script","url":"/2018/12/24/redis-lua-script/","tags":["redis","redis lua script"],"categories":["redis"]},{"title":"Jenkins Pipeline Parallel 平行處理","url":"/2018/12/21/Jenkins-Pipeline-Parallel-平行處理/","content":"\n## Jenkins Pipeline Parallel 平行處理\n\n\n### 將 parallel 語法設定在專案上\n![](https://i.imgur.com/BYD3cvl.png)\n\n> parallel  範例如下\n```\nnode {\n\n   stage('Git Clone') {\n       echo \"Git Clone OK\"\n   }\n   stage('Nuget Restore') {\n       echo \"Nuget Restore OK\"\n   }\n   stage('Msbuild') {\n       echo \"Msbuild OK\"\n   }\n\n parallel (\n  \"Push\": {\n    stage(\"Push Server\") {\n       echo \"Push OK\"\n    }\n  },\n  \"Scan Code\": {\n    stage(\"Scan Code\") {\n        echo \" Scan Code OK\"\n    }\n  }\n )\n}\n```\n\n### Jenkins 上可以看到建置過程\n![](https://i.imgur.com/e67Wju4.png)\n\n### Blue Ocean 就可以看到 建置過程是有水平執行\n![](https://i.imgur.com/WmTbRhY.png)\n\n> 要看到Blue Ocean圖形可以參考這篇安裝 [Jenkins Pipeline Blue Ocean](https://ste5022424.github.io/2018/12/20/Jenkins-Pipeline-Blue-Ocean/)\n\n## 參考\n\n* [What's New in Declarative Pipeline 1.3: Sequential Stages](https://jenkins.io/blog/2018/07/02/whats-new-declarative-piepline-13x-sequential-stages/)","tags":["Jenkins","Pipeline Parallel"],"categories":["Jenkins"]},{"title":"Jenkins Pipeline Blue Ocean","url":"/2018/12/20/Jenkins-Pipeline-Blue-Ocean/","content":"## Jenkins Pipeline Blue Ocean\n\n### 搜尋 Blue Ocean 並安裝\n![](https://i.imgur.com/epT45cZ.png)\n\n![](https://i.imgur.com/6R07Bsn.png)\n\n### 安裝完成後就可以看到 Open Blue Ocean\n![](https://i.imgur.com/IkPF79d.png)\n\n### Open Blue Ocean 點進去可以看到執行的狀態\n![](https://i.imgur.com/EaXr2Tz.png)\n\n### 勾勾點進去就可以可以看到圖形化的 Pipeline\n![](https://i.imgur.com/5DgoySv.png)\n\n![](https://i.imgur.com/Q5DHF0Q.png)\n\n## 參考\n\n* [Jenkins Pipeline Blue Ocean](https://jenkins.io/projects/blueocean/)\n* [[Day 27] Pipeline 專案 (下)](https://ithelp.ithome.com.tw/articles/10196252?sc=iThelpR)\n* [Create a Pipeline in Blue Ocean ](https://jenkins.io/doc/tutorials/create-a-pipeline-in-blue-ocean/)","tags":["Jenkins","Pipeline","Blue Ocean"],"categories":["Jenkins"]},{"title":"Docker compose Run Redis","url":"/2018/12/12/Docker-compose-Run-Redis/","content":"# Docker compose Run Redis\n\n## 建立資料夾 及 Dockerfile\n\n```bash\n mkdir composeredis\n cd composeredis\n vi docker-compose.yml\n```\n\n## docker-compose.yml\n\n```bash\nversion: \"3\"\nservices:\n  redis:\n    image: redis\n    ports:\n     - \"1233:6379\"\n    volumes:\n     - \"./tmp/redis:/data\"\n```\n\n## docker-compse run redis\n\n```bash\ndocker-compose up -d\n```\n\n![docker-compose](https://i.imgur.com/fzhLCey.png)\n\n## docekr ps -a\n\n![docekr ps -a](https://i.imgur.com/oCA5fVw.png)\n\n## 連線測試\n\n```bash\ntelnet 127.0.0.1 1233\nset mykey 999\nget mykey\n```\n\n![telnet](https://i.imgur.com/zz3UsVZ.png)","tags":["Docker","Docker compose","Redis","Visual Studio Code"],"categories":["Redis"]},{"title":"Docker compose","url":"/2018/12/12/Docker-compose/","content":"# Docker compose\n\n> 安裝 [Docker Compose](https://docs.docker.com/compose/install/)\n\n```bash\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\nsudo chmod +x /usr/local/bin/docker-compose\n\ndocker-compose --version\n```\n\n## 安裝完成就可以看版本資訊\n\n![安裝](https://i.imgur.com/mwTzUhO.png)\n\n## Step 1: Setup\n\n### 1.建立 composetest 資料夾\n\n```bash\nmkdir composetest\ncd composetest\n```\n\n### 2.建立 app.py\n\n```bash\ntouch app.py\n```\n\n#### 2.1.編輯 app.py\n\n```bash\nvi app.py\n```\n\nVi指令\n> i 編輯\n> ESC 結束編輯\n> :wq 存檔並離開\n\n#### 2.2輸入以下內容\n\n```bash\nimport time\n\nimport redis\nfrom flask import Flask\n\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return 'Hello World! I have been seen {} times.\\n'.format(count)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True)\n```\n\n### 3. 建立 requirements.txt\n\n```bash\ntouch requirements.txt\n```\n\n#### 3.1. 編輯 requirements.txt\n\n```bash\nvi requirements.txt\n```\n\n#### 3.2. 輸入文字\n\n```bash\nflask\nredis\n```\n\n## Step 2: Create a Dockerfile\n\n### 1. 建立 touch Dockerfile\n\n```bash\ntouch Dockerfile\n```\n#### 1.1. 輸入內容\n\n```\nFROM python:3.4-alpine\nADD . /code\nWORKDIR /code\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n```\n## Step 3: Define services in a Compose file\n\n### 1. 建立 docker-compose.yml\n```\ntouch docker-compose.yml\n```\n#### 1.1. 輸入內容\n```\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n     - \"5000:5000\"\n  redis:\n    image: \"redis\"\n    ports:\n     - \"6379:6379\"\n```\n\n> 這時候 檔案結構會是這樣\n> \n![](https://i.imgur.com/mgKu7Wa.png)\n\n## Step 4: Build and run your app with Compose\n\n```\ndocker-compose up -d\n```\n\n>這時後就可以看到剛剛 Run 的 python 網站\n\n![](https://i.imgur.com/ftdICEH.png)\n\n\n## Step 5: Edit the Compose file to add a bind mount\n\n```\nversion: '3.1'\nservices:\n  web:\n    build: .\n    ports:\n     - \"5000:5000\"\n    volumes:\n     - .:/code\n  redis:\n    image: \"redis\"\n    ports:\n     - \"6379:6379\"\n```\n### 5.1. 再重新 build 一次就可以看到剛剛修改的內容\n\n```\ndocker-compose up -d\n```\n\n![](https://i.imgur.com/YT90O9u.png)\n\n\n## docker-compose 其他指令\n> 背景執行 docker-compose\n```\n docker-compose up -d\n```\n> 檢查 docker-compose 容器狀態\n \n```\ndocker-compose ps\n```\n\n\n# 參考\n\n* [Docker Compose](https://docs.docker.com/compose/)\n* [Get started with Docker Compose](https://docs.docker.com/compose/gettingstarted/)","tags":["Docker","Docker compose"],"categories":["Docker compose"]},{"title":"GRPC C# Quickstart","url":"/2018/12/11/GRPC-C-Quickstart/","content":"\n# GRPC Quickstart\n\n## Clone GRPC\n\n```bash\ngit clone -b v1.17.0 https://github.com/grpc/grpc\n\n```\n\n![Clone GRPC](https://i.imgur.com/F5MAgGK.png)\n\n## Build\n\n```bash\ncd D:\\GRPC\\grpc\\examples\\csharp\\Helloworld\ndotnet build Greeter.sln\n\n```\n\n![Build](https://i.imgur.com/p9eDKj6.png)\n\n### Run a gRPC application\n\n> Server\n\n```bash\ncd D:\\GRPC\\grpc\\examples\\csharp\\Helloworld\\GreeterServer>\n dotnet run -f netcoreapp2.1\n\n```\n\n![Server](https://i.imgur.com/snarP0h.png)\n\n> Client\n\n```bash\ncd D:\\GRPC\\grpc\\examples\\csharp\\Helloworld\\GreeterClient\ndotnet run -f netcoreapp2.1\n```\n\n![Client](https://i.imgur.com/xQDQpZC.png)\n\n## 參考\n\n* [C# Quickstart](https://grpc.io/docs/quickstart/csharp.html)\n* [gRPC 官方文檔中文版 V1.0](https://doc.oschina.net/grpc?t=60132)\n* [https://github.com/grpc/grpc](https://github.com/grpc/grpc)","tags":["GRPC"],"categories":["GRPC"]},{"title":"Protocol buffers","url":"/2018/12/11/Protocol-buffers/","content":"\n# Protocol buffers\n\n### Protocol Buffers是一種序列化資料結構的協定。對於透過管線(pipeline)或儲存資料進行通訊的程式開發上是很有用的。這個方法包含一個埠描述語言，描述一些資料結構，並提供程式工具根據這些描述產生程式碼，用於將這些資料結構產生或解析資料串流。\n\n\n# 參考\n\n* [Protocol buffers](https://developers.google.com/protocol-buffers/)\n* [Protocol Buffers wiki](https://zh.wikipedia.org/wiki/Protocol_Buffers)","tags":["Protocol buffers"],"categories":["Protocol buffers"]},{"title":"Docker Nginx Reverse Proxy","url":"/2018/12/10/Docker Nginx Reverse Proxy/","content":"\n# Docker Nginx Reverse Proxy\n\n## 1. 建立 nginx_reverseproxy 資料夾\n\n```bash\nmkdir nginx_reverseproxy\ncd ngixn_reverseproxy/\n```\n\n## 2. 建立 nginx.conf\n\n```bash\ntouch nginx.conf\n```\n\n## 3. 編輯 nginx.conf\n\n```bash\nvi nginx.conf\n```\n\n> 輸入 i可以進入編輯模式\n> 輸入 ESC離開編輯模式，在輸入 \":wq\"存檔\n> 刪除資料夾可以使用 \"rm -r 資料夾名稱\"\n\n## 4. 設定 nginx.conf\n\n```bash\nevents {\n\n}\n\nhttp {\nserver {\n  listen 80;\n  server_name www.google.com;\n  location / {\n    proxy_pass http://www.google.com;\n  }\n}\n}\n```\n\n## 5. Run Docker Nginx\n\n```bash\ndocker run --name proxy_nginx -v /nginx_reverseproxy/nginx.conf:/etc/nginx/nginx.conf:ro -p 8088:80 -d nginx\n```\n\n## 6. 瀏覽 Yourhost:8088\n\n![瀏覽](https://i.imgur.com/imLE42t.png)\n\n## 使用 Dockerfile 建立 image & docker run container\n\n### 1. Dockerfile\n\n```bash\nFROM nginx\nADD nginx.conf /etc/nginx/nginx.conf\n```\n\n### 2. build\n\n```bash\ndocker build -t nginx_dockerfile:v1 .\n```\n\n### 3. docker run\n\n```bash\ndocker run --name nginx_dockerfile -p 8089:80 -d nginx_dockerfile:v1\n```\n\n# 參考\n\n* [[ DevOps ] Nginx 設定 Proxy Server 及 Load balance](https://oranwind.org/-devops-ubuntu-shang-nginx-an-zhuang-yu-she-ding/)\n* [NGINX Reverse Proxy](https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/)","tags":["Docker","Nginx"],"categories":["Nginx"]},{"title":"Docker run Nginx","url":"/2018/12/07/Docker-run-Nginx/","content":"\n## Docker run Nginx\n\n### Run Nginx\n\n```\ndocker run -d -p 1324:80 --name mynginx nginx\n```\n![](https://i.imgur.com/q64ALvt.png)\n\n### Using Dockerfile Create Nginx & Run Nginx\n\n#### Creat Docker file\n\n> Dockerfile\n```\nFROM nginx\nCOPY ./index.html /usr/share/nginx/html\n```\n\n> index.html\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n        <p>Hello Nginx</p>\n    </body>\n</html>\n\n```\n\n#### build docker imgage\n```\ndocker build -t mynginx:1 .\n```\n#### Run mynginx\n\n```\ndocker run -d --name mynginx -p 1234:80 mynginx:1\n```\n![](https://i.imgur.com/yeybXMF.png)\n\n\n# 參考\n\n* [https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)","tags":["Docker","Nginx"],"categories":["Nginx"]},{"title":"Python redis","url":"/2018/12/06/Python-redis/","content":"\n# Python redis\n\n```\nimport redis\nr = redis.Redis(host='localhost', port=6379, db=0)\nr.set('foo', 'bar123123132')\nprint(r.get('foo'))\n\n```\n\n![](https://i.imgur.com/pOuqySo.png)\n\n# 參考\n\n* [https://pypi.org/project/redis/](https://pypi.org/project/redis/)","tags":["python","redis"],"categories":["python"]},{"title":"Gogs Git webhook","url":"/2018/11/28/Gogs-Git-webhook/","content":"\n# Git Commit 後通知Jenkins 建置\n\n### 點選倉庫設定\n\n![](https://i.imgur.com/6bT5cqK.png)\n\n### 管理 Web 鉤子\n\n![ Web 鉤子](https://i.imgur.com/BnxMzq9.png)\n\n### 添加鉤子\n\n![添加鉤子](https://i.imgur.com/HcebZ16.png)\n\n### 選 Gogs\n\n![選 Gogs](https://i.imgur.com/eZUBZL0.png)\n\n### 推送地址 & 密鑰本文(自行定義)\n\n![推送地址 & 密鑰本文(自行定義)](https://i.imgur.com/HOVOc4Z.png)\n\n```bash\nhttp://Jenkins位置/gogs-webhook/?job=專案名稱\n\n```\n\n### Jenkins 記得安裝  Gogs Webhook Plugin\n\n![Jenkins](https://i.imgur.com/YFMyGCe.png)\n\n### 專案記得設定剛才的密鑰本文\n\n![設定](https://i.imgur.com/Y5UFomw.png)","tags":["Jenkins","Git","Gogs","webhook"],"categories":["Gogs"]},{"title":"Jenkins Build .Net Core With Pipeline","url":"/2018/11/27/Jenkins-Build-Net-Core-With-Pipeline/","tags":["Jenkins"],"categories":["Jenkins"]},{"title":"Jenkins Pipeline","url":"/2018/11/23/Jenkins-pipeline/","content":"# Jenkins Pipeline\n\n### 可以將部屬流程視覺化來顯示，請看官方的這張[圖](https://jenkins.io/doc/book/pipeline/)\n\n![視覺化](https://i.imgur.com/OXUX6Ca.png)\n\n### 新增作業\n\n![新增作業](https://i.imgur.com/1H6nKrr.png)\n\n### 選擇 Pipeline 專案\n![選擇](https://i.imgur.com/Rk6oGvB.png)\n\n### 建立成功之後就可以在 script 的地方撰寫\n\n![建立](https://i.imgur.com/Ms2I0GI.png)\n\n### Pipeline Script 有分兩種方式\n\n > Pipeline Script 直接寫在 jenkins Script 上面\n > Pipeline script from SCM 可以使用版控來管理 Pipeline script\n * Pipeline Script\n\n![Pipeline Script](https://i.imgur.com/1yz6bPX.png)\n\n```bash\nnode {\n    stage('Clone') {\n        echo 'Clone'\n    }\n    stage('Build') {\n        echo 'Build'\n    }\n    stage('Test') {\n        echo 'Teset'\n    }\n    stage('Deploy') {\n        echo 'Deploy'\n    }\n}\n```\n\n#### 馬上建置\n![](https://i.imgur.com/RIVUvf9.png)\n\n#### 這時候就可以看到 建置的步驟已經視覺化顯示了\n![](https://i.imgur.com/yszPWq1.png)\n\n#### Console Output\n![](https://i.imgur.com/rUJMmpo.png)\n\n#### 這裡可以看到剛剛寫的執行log\n![](https://i.imgur.com/rgn76nJ.png)\n\n* Pipeline script from SCM\n\n![](https://i.imgur.com/zD7vhP5.png)\n\n![](https://i.imgur.com/QkY1rdW.png)\n\n> Repository URL 在github上面建立一個專案\n\n#### 新增一個檔案叫　Jenkinsfile　\n![](https://i.imgur.com/vmYUUY0.png)\n> 檔案名稱要不一樣可以再 Script Path 設定\n\n#### 把剛剛寫的code 貼上去，並且 commit\n![](https://i.imgur.com/p1e0ECp.png)\n\n#### 第二次建置也成功了\n![](https://i.imgur.com/VLtTcJQ.png)\n\n#### 這時候看一下 Console Output，確認就是從 git 上面取下來執行的\n\n![](https://i.imgur.com/u3da9mL.png)\n\n##  Pipeline Syntax 產生語法的小工具\n![](https://i.imgur.com/TNiTpxw.png)\n\n![](https://i.imgur.com/AEJ81l7.png)\n\n### 選擇 bat: Windows Batch Script\n![](https://i.imgur.com/04A1RjJ.png)\n\n### 按下 Generate Pipeline Script，會產生語法，可以直接在 pipeline 中使用\n![](https://i.imgur.com/0AMFpET.png)\n> pipeline 是使用 Groovy語言來撰寫，可以參考 [Groovy’s syntax](http://groovy-lang.org/syntax.html)\n\n# 參考\n* [Pipeline - Jenkins]https://jenkins.io/doc/book/pipeline/\n* [[DevOps自動化-6] Jenkins持續整合、發布](https://dotblogs.com.tw/aken1215/2016/10/11/000455)\n* [[持續交付實踐] pipeline：pipeline使用之快速入門](https://testerhome.com/topics/10003)\n","tags":["Jenkins","Pipeline"],"categories":["Jenkins"]},{"title":"SonarQubeScanner for MSBuild 使用 Jenkins Plugin","url":"/2018/11/21/SonarQubeScanner for MSBuild 使用 Jenkins Plugin/","content":"\n### 在 Jenkins 外掛中心 找到 SonarQube Scanner 把它安裝起來\n\n![Jenkins](https://i.imgur.com/MGOpSwT.png)\n\n### 檢查是否安裝完成\n\n![檢查是否安裝完成](https://i.imgur.com/VOpA38L.png)\n\n### 管理 Jenkins > 設定系統 > SonarQube servers\n\n![Jenkins](https://i.imgur.com/W69D8aY.png)\n\n![Jenkins](https://i.imgur.com/djQB5ye.png)\n\n### 啟用並且設定Sonarqube server\n\n![Sonarqube server](https://i.imgur.com/j0Gj3jM.png)\n\n### Global Tool Configuration\n\n![Global](https://i.imgur.com/jKyGsJC.png)\n\n![Global](https://i.imgur.com/iOBJvyD.png)\n\n### 建置步驟 >依序加入 樣板\n\n![建置步驟](https://i.imgur.com/pbY24W3.png)\n\n![建置步驟](https://i.imgur.com/CVv8mss.png)\n\n### 將參數設定上去\n\n![忽略掃描](https://i.imgur.com/Uaejl96.png)\n\n> 忽略掃描 sonar.exclusions=obj\\\\*,bin\\\\*,packages\\\\**,Properties\\\\* \n\n### 建置專案就會開始掃描\n\n![建置專案就會開始掃描](https://i.imgur.com/uNnnE9D.png)\n\n### 掃描成功\n\n![掃描成功](https://i.imgur.com/h15iB8R.png)\n\n![掃描成功](https://i.imgur.com/TTqBhsQ.png)\n\n# 參考\n\n* [如何使用 SonarQube 檢查 PHP 專案？](https://oomusou.io/sonarqube/php/)","tags":["Jenkins","SonarQube"],"categories":["SonarQube"]},{"title":"升級 Jenkins ver. 2.151 發生問題","url":"/2018/11/20/升級-Jenkins-ver-2-151-發生問題/","content":"## 升級 Jenkins ver. 2.151 發生問題\n\norg.apache.commons.jelly.JellyTagException:jar:file:/D:/Jenkins/war/WEB-INF/lib/jenkins-core-2.151.jar!/lib/layout/hasPermission.jelly:35:20: <d:invokeBody> com/trilead/ssh2/crypto/Base64\n\n![升級](https://i.imgur.com/1H5x5TZ.png)\n\n## issue\n\n<https://issues.jenkins-ci.org/browse/JENKINS-54708>\n<https://issues.jenkins-ci.org/browse/JENKINS-54686?focusedCommentId=354378&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-354378>\n\n### 問題是發生SSH Slaves版本(1.29.0)不相容，所以降版至(1.28.1)就可以了\n\n>因為jenkins掛掉了，所以要手動更新\n\n### 先找到要下載的pluin [ssh-slaves.hpi](http://updates.jenkins-ci.org/download/plugins/)\n\n![下載](https://i.imgur.com/MN9ATxE.png)\n![下載](https://i.imgur.com/7DDIV6T.png)\n\n### 下載 [jenkins-cli.jar](https://wiki.jenkins.io/display/JENKINS/Jenkins+CLI)\n\n```bash\nhttps://你的jenkins網址/jnlpJars/jenkins-cli.jar\n```\n\n### 使用 [jenkins-cli.jar 手動安裝](https://jenkins.io/doc/book/managing/plugins/#install-with-cli)\n\n```bash\njava -jar jenkins-cli.jar -s http://127.0.0.1 install-plugin http://updates.jenkins-ci.org/download/plugins/ssh-slaves/1.28.1/ssh-slaves.hpi -restart\n```\n\n![手動安裝](https://i.imgur.com/UZkX9KM.png)\n\n> 如果有權限不足，先調整權限，之後再刪除 [config.xml](https://blog.csdn.net/myNameIssls/article/details/70227838)\n\n![權限不足](https://i.imgur.com/k9IF6yL.png)\n\n```bash\n<permission>hudson.model.Hudson.Administer:anonymous</permission>\n<permission>hudson.model.Hudson.ConfigureUpdateCenter:anonymous</permission>\n<permission>hudson.model.Hudson.Read:anonymous</permission>\n<permission>hudson.model.Hudson.RunScripts:anonymous</permission>\n<permission>hudson.model.Hudson.UploadPlugins:anonymous</permission>\n```\n\n### 重新啟動 jenkins 就可以了\n\n![重新啟動](https://i.imgur.com/WSE6PIE.png)\n","tags":["Jenkins"],"categories":["Jenkins"]},{"title":"SonarQube 程式碼品質分析工具","url":"/2018/11/20/SonarQube-程式碼品質分析工具/","content":"\n## 建立 SonarQube Server\n\n### 下載 [SonarQube](https://www.sonarqube.org/downloads/)\n![](https://i.imgur.com/VYxvKTz.png)\n\n### 下載最新的 [Java jre](https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html)\n![](https://i.imgur.com/m4f7K2k.png)\n\n\n### 執行 StartSonar.bat\n![](https://i.imgur.com/l9Qe4Tx.png)\n\n![](https://i.imgur.com/OnvhdDR.png)\n\n\n### 進入 http://localhost:9000 就可以看到啟動成功\n\n![](https://i.imgur.com/0nZCYF9.png)\n\n\n### 新增一個專案\n\n![](https://i.imgur.com/h7qM0QX.png)\n![](https://i.imgur.com/yiT3Ca5.png)\n![](https://i.imgur.com/Pw3ekAH.png)\n![](https://i.imgur.com/IrHmCyG.png)\n![](https://i.imgur.com/3DsIYqs.png)\n> 這時候就會產生一個專案的key 給掃描驗證使用 4e4602940368f811feba160cc8797ac455ca65d8\n\n## 掃描自己的程式(Analyzing with SonarScanner for MSBuild)\n\n### 下載 [Analyzing with SonarScanner for MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)\n![](https://i.imgur.com/OMWi3KS.png)\n\n### 先設定環境變數\n\n```\nD:\\sonarqube-7.4\\bin\\sonar-scanner-msbuild-4.4.2.1543-net46\n```\n![](https://i.imgur.com/qvTXqjF.png)\n\n![](https://i.imgur.com/MRfmYMW.png)\n\n![](https://i.imgur.com/icY2raU.png)\n\n![](https://i.imgur.com/HFT14QA.png)\n\n### 建立 SonaQube 專案，它會在專案目錄底下建立 .sonarqube 資料夾\n\n>k:\"{Project Index}\" 在 sonarquble 上面建立的 key\n> n:\"{Project Name}\" 要掃描的專案名稱\n```\nSonarQube.Scanner.MSBuild.exe begin /k:\"4e4602940368f811feba160cc8797ac455ca65d8\" /n:\"MyConsolTest\" /v:\"1.0\"\n```\n![](https://i.imgur.com/bTou3P8.png)\n\n### 執行 Msbuild\n```\n\"C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\amd64\\msbuild.exe\" MyConsolTest.sln /t:Rebuild\n```\n![](https://i.imgur.com/yLj7IAj.png)\n\n### 執行掃描\n```\nSonarQube.Scanner.MSBuild.exe end\n```\n![](https://i.imgur.com/wZsXqhA.png)\n\n![](https://i.imgur.com/yCmU7y8.png)\n\n\n# 參考\n\n* [SonarQube](https://zh.wikipedia.org/wiki/SonarQube)\n* [https://www.sonarqube.org/](https://www.sonarqube.org/)","tags":["SonarQube"],"categories":["SonarQube"]},{"title":"Python Web Application Django","url":"/2018/11/14/Python-Web-Application-Django/","content":"## Writing your first Django app\n\n### 建立專案\n\n```\ndjango-admin startproject mysite\n\n mysite/urls.py\n```\n\n![](https://i.imgur.com/BYPZQIH.png)\n\n### 啟動 Server\n\n```\npython manage.py runserver\n```\n![](https://i.imgur.com/JU85NzY.png)\n\n![](https://i.imgur.com/zDb7byA.png)\n\n### 建立 Polls App\n```\npython manage.py startapp polls\n```\n![](https://i.imgur.com/upH5XoD.png)\n\n#### 建立一個 views.py\n\n```\nfrom django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n```\n\n![](https://i.imgur.com/V47boWo.png)\n\n#### 建立一個 urls.py\n\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n```\n\n![](https://i.imgur.com/fDb7ZSY.png)\n\n##### 修改 mysite/urls.py\n\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n```\n![](https://i.imgur.com/gzYI2UE.png)\n\n#### 在 run 一次就可以看到剛剛寫的 Hello, world. You're at the polls index.\n\n```\npython manage.py runserver\n```\n\n![](https://i.imgur.com/RLjX5c4.png)\n\n\n# 參考\n* [Writing your first Django app, part 1](https://docs.djangoproject.com/en/2.1/intro/tutorial01/)\n\n* [Use Django in Visual Studio Code](https://code.visualstudio.com/docs/python/tutorial-django)","tags":["Visual Studio Code","Python","Django"],"categories":["python"]},{"title":"Python Hello World","url":"/2018/11/14/Python-Hello-World/","content":"\n## Python Hello World \n\n### Visual Studio Code 安裝 Python 外掛\n![](https://i.imgur.com/EMIoQ8z.png)\n\n### 安裝 Python (https://www.python.org/downloads)\n![](https://i.imgur.com/OuXGcON.png)\n\n\n### 新增一個 hello.py，並輸入 hello world\n\n![](https://i.imgur.com/EVuhZc4.png)\n\n```\nmsg = \"Hello world~\"\nprint(msg)\n```\n\n### F5 執行就可以看到 hello world\n![](https://i.imgur.com/RCTdYm9.png)\n\n\n> 將程式片段選取後，按下 Shift + Enter 就可以執行程式碼片段\n\n![](https://i.imgur.com/n3fRaaf.png)\n\n![](https://i.imgur.com/NS8tmX1.png)\n\n## 參考\n* [Getting Started with Python in VS Code](https://code.visualstudio.com/docs/python/python-tutorial)","tags":["Visual Studio Code","Python"],"categories":["Python"]},{"title":"AutoMapper","url":"/2018/11/08/AutoMapper/","content":"\n# AutoMapper\n\n> 兩個 class 要對映，可以使用linq來寫，但是當欄位一多的時候，就要寫的很多，這時候就可以使用 AutoMapper。\n\n```code\nprivate class MyClass\n{\n    public int A { get; set; }\n    public int b { get; set; }\n    public int c { get; set; }\n    public int d { get; set; }\n    public int e { get; set; }\n    public int f { get; set; }\n    public int g { get; set; }\n    public int h { get; set; }\n    public int i { get; set; }\n    public int j { get; set; }\n    public int k { get; set; }\n    public int l { get; set; }\n    public int hh { get; set; }\n}\n\nprivate class MyClass2\n{\n    public int A { get; set; }\n    public int b { get; set; }\n    public int c { get; set; }\n    public int d { get; set; }\n    public int e { get; set; }\n    public int hh { get; set; }\n}\n```\n\n## 使用 Linq\n\n```code\n\nList<MyClass2> data = my.Select(x => new MyClass2()\n{\n    A = x.A,\n    b = x.b,\n    c = x.c,\n    d = x.d,\n    e = x.e,\n    hh = x.hh\n}).ToList();\n```\n\n## 使用 AutoMapper 對映\n\n```bash\nMapper.Initialize(cfg =>\n{\n    cfg.CreateMap<MyClass, MyClass2>();\n});\nList<MyClass2> data2 = Mapper.Map<List<MyClass2>>(my);\n\n```\n\n# 參考網址\n\n* [Automapper官網](https://automapper.org/)\n* [Automapper Github](https://github.com/AutoMapper/AutoMapper)","tags":["AutoMapper","C#"],"categories":["AutoMapper"]},{"title":"Rancher","url":"/2018/11/07/Rancher/","content":"\n\n## 參考網址\n* [官網](https://rancher.com/)\n* [官方文件](https://rancher.com/docs/rancher/latest/zh/)","tags":["Docker","k8s","Rancher"],"categories":["Rancher"]},{"title":"CV","url":"/2018/11/05/CV/","content":"\n### 基本資料\n\n姓名: 巫佳溢\nEmail: ste5022424@gmail.com\n學歷: 僑光科技大學資訊科技系\n\n### 專業領域\n\n* Web:\nAsp.net Mvc(C#), AngularJs, Asp.Net Core\n* DB:\nMsSql、Redis、Mongo\n* 容器技術應用:\nDocker、Kubernetes\n* Cloud:\nGCP\n* DevOps:\nCI: Jenkins\nCD: Octopus\nELK\nGrafana\n* 遊戲API串接:\nEzgui、Yggdrasil Gaming\n\n### 工作經歷\n\n* 2013 僑光科技大學資訊科技系畢業\n* 2014 向上國際股份有限公司 抓寶網: 開發及維護\n* 2015 向上國際股份有限公司 至尊、百老匯、Golden City: Web全端開發、維護\n* 2016 向上國際股份有限公司 老子有錢: Web全端開發、維護\n* 2017 向上國際股份有限公司 老子有錢: Web全端開發、維護、遊戲串接\n* 2018 向上國際股份有限公司 老子有錢: Web全端開發、維護、遊戲串接","tags":["CV"]},{"title":"Surge 免費靜態網頁空間","url":"/2018/11/02/surge/","content":"\n# Surge\n免費靜態網頁空間\n\n### 安裝 \n\n```\nnpm install --global surge\n```\n>請先安裝 Node.js\n\n### 新增一個網頁\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <P>Hello! world</P>\n</body>\n</html>\n```\n![](https://i.imgur.com/C2AqlfU.png)\n\n### 輸入 surge 指令\n\n```\nsurge\n```\n![](https://i.imgur.com/nalP9TX.png)\n\n> 請自行輸入email 跟 密碼，還可以自訂Domain\n \n\n### 上傳成功就可以看到網頁\n\n![](https://i.imgur.com/DLoh5KV.png)\n\n[http://ste5022424.surge.sh/index.html](http://ste5022424.surge.sh/index.html)\n\n\n### 部屬到自己定義的網址\n\n```\nsurge --domain ste5022424.surge.sh\n```\n\n![](https://i.imgur.com/OFKTSrX.png)\n\n### 設定 https\n\n```\nsurge --domain https://ste5022424.surge.sh\n```\n![](https://i.imgur.com/SxhyGA7.png)\n\n\n\n# 參考網址\n* [Surge](https://www.minwt.com/website/server/17359.html)","tags":["Surge"],"categories":["surge"]},{"title":"Docker 介紹","url":"/2018/10/19/Docker/","content":"\n![](https://i.imgur.com/XFB46do.png)\n\n\n> Docker 是一個開源專案，它使用GO語言實作，讓應用程式在容器中工作並且可以自動進行，使用者不需要去關心容器的管理，操作 Docker 的容器就像操作一個快速輕量級的虛擬機。\n\n[https://www.docker.com/](https://www.docker.com/ \"https://www.docker.com/\")\n\n## Container 容器\n\n> Container技術採取共用Host OS ，不需在每一個Container內執行Guest OS，而是在OS內的核心系統層來打造虛擬執行環境，也被稱為是OS層的虛擬化技術。\n\n![](https://i.imgur.com/XF9AmNd.png)\n\n## Image 映像檔\n\n> 映像檔一個唯讀的板模，裏面包含了容器內的所有應用程式\n\n\n## Docker 倉庫\n\n> 存放Docker映像檔的倉庫，可以建立公用或者私用的倉庫\n\n\n[https://hub.docker.com/](https://hub.docker.com/ \"hub.docker.com\")\n\n\n# Docker 常用指令\n\n### 安裝Docker\n```\ncurl -fsSL https://get.docker.com/ | sh\n```\n\n### 查 Docker 版本\n    docker version\n    \n### 取得 映像檔\n    docker pull\n\n### 查看 映像檔\n    docker images\n\n    -a 完整資訊\n    -q 只列檔名\n\n### 刪除 映像檔\n    docker rmi image_id \n\n### 匯出 映像檔\n    docker save -o\n\n#### 載入 映像檔\n    docker load \n\n\n### 查看 容器\n    docker ps -a\n\n### 執行容器\n    docker run\n\n    -d 背景執行\n    --name 命名container\n    -p 指定主機的port 轉到 container 的 port\n\n### 刪除 容器 \n    docker stop container_id\n    docker rm container_id\n\n### 批次停止跟刪除 容器\n    docker stop $(docker ps -a -q)\n    docker rm $(docker ps -a -q)","tags":["Docker"],"categories":["Docker"]},{"title":"Docker run Jenkins","url":"/2018/10/19/Docker run Jenkins/","content":"\n## Docker run Jenkins\n\n### 安裝 jenkins\n\n```\nmkdir -p -m 777 jenkins_home\ndocker run -d -p 8080:8080 -p 50000:50000 -v /jenkins_home:/var/jenkins_home --name jenkins jenkins\n\n```\n### 取得密碼(initialAdminPassword)\n```\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n```\n\n### 進入Jenkins\nhttp://127.0.0.1:8080/\n\n\n## 參考網址\n* [Jenkins On Doker](https://github.com/jenkinsci/docker/blob/master/README.md)\n* [Get Started with Jenkins 2.0 with Docker](https://www.cloudbees.com/blog/get-started-jenkins-20-docker)","tags":["Jenkins","Docker"],"categories":["Jenkins"]},{"title":"SQL-Server-2017-安裝-登入","url":"/2018/10/17/SQL-Server-2017-安裝-登入/","content":"# SQL Server 2017 安裝 & 登入\n\n## 1. 下載sql server express\nhttps://www.microsoft.com/zh-tw/sql-server/sql-server-downloads\n\n![](https://i.imgur.com/DSjWrRS.png)\n\n## 2. 安裝 \n\n![](https://i.imgur.com/9CU5pZG.png)\n\n![](https://i.imgur.com/PIVQE5B.png)\n\n![](https://i.imgur.com/BX2qXDA.png)\n\n\n## 3. 設定允許用帳號登入\n\n![](https://i.imgur.com/PlWgPoh.png)\n\n**右鍵 > 屬性**\n\n![](https://i.imgur.com/AARhZ9K.png)\n\n## 4. 設定 127.0.0.1 可以連線\n\n(1)**開啟 > SQL Server 2017 組態管理員**\n\n![](https://i.imgur.com/hnHGAwg.png)\n\n(2)**啟動 TCP/IP**\n(3)**IPAll > TCP通訊埠輸入 : 1433**\n\n![](https://i.imgur.com/rtitoTG.png)\n\n(3)重新啟動 SQL Server \n\n![](https://i.imgur.com/GCoZYqe.png)\n\n\n## 5. 使用帳號登入\n\n![](https://i.imgur.com/SFuHqtZ.png)\n\n\n## 參考網址\n\n* [sql sa 登入失敗(18456)](https://dotblogs.com.tw/messboy000/archive/2014/05/31/145324.aspx)\n* [最近sql server 炸了,重新安装后出现登录出现 连接SQL Server:无法连接到127.0.0.1也就是.](https://blog.csdn.net/QQ459932400/article/details/78002633)","tags":["SQL-Server"],"categories":["SQL Server"]},{"title":"Kafka學習","url":"/2018/10/17/Kafka學習/","content":"# Kafka\n\n  ### Broker 叢集\n> Kafka 叢集\n  ### Topic 主題\n> 每條發布的消息的有一個主題，像是頻道一樣\n  #### Patition \n> 每個 Topic 包含多個 Patition\n  ### Producer 生產者\n> 生產者負責發布消息到 Broker 上\n  ### Consumer 消費者\n> 消費者向 Kafka 讀取消息\n  #### Conusumer Group\n> 消費者群組\n\n### Kafka Client\n\n    * Confluent.Kafka\n    * https://cwiki.apache.org/confluence/display/KAFKA/Clients#Clients-.NET\n    * https://github.com/confluentinc/confluent-kafka-dotnet\n\n### Kafka GUI\n\n    * Kafka Tool\n    * http://www.kafkatool.com/\n\n## 參考網站\n\n* [Kafka剖析（一）：Kafka背景及架构介绍](http://www.infoq.com/cn/articles/kafka-analysis-part-1)\n* [kafka](http://kafka.apache.org/intro)\n* [為什麼Kafka這麼快](https://read01.com/Dx7n63.html#.W02zFtIzaUk)","tags":["Kafka"],"categories":["Kafka"]},{"title":"GO lang Hello World","url":"/2018/10/17/Go-lang-學習/","content":"# GO lang Hello World !\n\n## 安裝 GO\n\n### 1. 下載\n\n<https://golang.org/>\n\n![下載](https://i.imgur.com/nqkLVtr.png)\n\n### 2. 選擇自己的作業系統\n\n![選擇自己的作業系統](https://i.imgur.com/L4Xbr7h.png)\n\n### 3. 安裝\n\n![安裝](https://i.imgur.com/L9HsVaY.png)\n\n![安裝](https://i.imgur.com/oRDbix1.png)\n\n### 4. 測試GO 是否有安裝成功\n\n![測試GO](https://i.imgur.com/n0W4ziL.png)\n\n## Visual Studio Code 開發\n\n### 安裝套件\n\n![安裝套件](https://i.imgur.com/qxy8dCo.png)\n\n### Hello World\n\n![Hello](https://i.imgur.com/TrwsY6c.png)\n\n```bash\npackage main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello, 世界\")\n}\n```\n\n## GO WebApi\n\n### 簡單的 router 範例\n\n![router](https://i.imgur.com/KlzrTTI.png)\n\n![router](https://i.imgur.com/7xnUwXu.png)\n\n\n```bash\npackage main\nimport (\n\"fmt\"\n\"log\"\n\"net/http\"\n\"github.com/gorilla/mux\"\n)\n\nfunc main() {\nrouter := mux.NewRouter().StrictSlash(true)\nrouter.HandleFunc(\"/\", Index)\nrouter.HandleFunc(\"/news\", News)\nrouter.HandleFunc(\"/news/{DetailID}\", Detail)\nlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\nfunc Index(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintln(w, \"Home!\")\n}\n\nfunc News(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintln(w, \"最新消息 Master\")\n}\n\nfunc Detail(w http.ResponseWriter, r *http.Request) {\nvars := mux.Vars(r)\nDetailID := vars[\"DetailID\"]\nfmt.Fprintln(w, \"最新消息 Detail ID:\", DetailID)\n}\n\n```\n\n## 參考網址\n\n* [官方網站](https://golang.org/)\n* [GO WEB API](https://tutorialedge.net/golang/creating-restful-api-with-golang/)\n* [7個GO WEB API框架](https://nordicapis.com/7-frameworks-to-build-a-rest-api-in-go/)\n* [微服務 GO](https://nordicapis.com/writing-microservices-in-go/)\n* [用GO構建 Restful API](https://blog.csdn.net/xingwangc2014/article/details/51623157)\n* [Golang 建構簡單WEB 框架](https://zhuanlan.zhihu.com/p/27604688)","tags":["Visual Studio Code","Go"],"categories":["Go"]},{"title":"使用 Hexo 建立 Github Blog","url":"/2018/10/17/使用-Hexo-建立-Github-Blog/","content":"\n## 事先安裝\n\n* [Git](https://git-scm.com/)\n* [Node js](https://https://nodejs.org/en/) \n* [Visual Studio Code](https://code.visualstudio.com/)\n\n### Github 新增.github.io專案\n\n![Github](https://i.imgur.com/PO7dlOS.png)\n\n## 安裝 Hexo\n\n```bash=\nnpm install hexo-cli -g\n```\n\n![](https://i.imgur.com/5rz5CHP.png)\n\n## 建立專案\n\n```bash=\nhexo init D:\\\\blog\n```\n\n![](https://i.imgur.com/59eoBCu.png)\n\n### 使用 vs code 開啟\n![](https://i.imgur.com/SeD9liQ.png)\n\n### 更換部落格樣式\n#### 挑選自己喜歡的主題\nhttps://hexo.io/themes/index.html\n![](https://i.imgur.com/a8KgChZ.png)\n\n#### 取得套件(以 Noise為範例)\n\n![](https://i.imgur.com/WIA4TRG.png)\n\n```bash=\ngit clone https://github.com/iissnan/hexo-theme-next.git ./themes/Noise\n```\n\n#### 設定 _config.yml\n\n![](https://i.imgur.com/sdYrMVo.png)\n\n```bash=\ntheme: Noise\n```\n\n### 啟動server\n![](https://i.imgur.com/Y3UI7EA.png)\n\n```\nhexo s -p 8080\n```\n#### 檢視網站\n![](https://i.imgur.com/MQAv634.png)\n\n### 發佈到自己的Github\n\n#### 安裝 hexo-deployer-git。\n![](https://i.imgur.com/Jd0uVhz.png)\n```\nnpm install hexo-deployer-git --save\n```\n#### 設定_config.yml\n```\ndeploy:\n  type: git\n  repo: https://github.com/yourUsername/yourUsername.github.io.git\n  branch: master\n```\n![](https://i.imgur.com/p2eoUwL.png)\n\n#### 部屬至 github\n\n![](https://i.imgur.com/KiO1WNm.png)\n```\nhexo deploy\n```\n#### 檢視網站\n![](https://i.imgur.com/wAw1gfC.png)\n\n### 建立第一篇文章\n\n#### 建立文章\n![](https://i.imgur.com/rkrC6xS.png)\n```\nhexo new \"使用 Hexo 建立 Github Blog\"\n```\n#### 編輯文章\n\n![](https://i.imgur.com/ClTN0Q7.png)\n\n### 建立網站 categories\n#### 新增一個 categories 頁面\n![](https://i.imgur.com/Alwebxp.png)\n\n```\nhexo new page categories\n```\n\n#### 編輯 categories/index.md\n![](https://i.imgur.com/6MkMNVk.png)\n```\n---\ntitle: 文章分類\ndate: 2018-10-17 18:25:40\ntype: \"categories\"\n---\n```\n#### 在文章上加入 categories\n![](https://i.imgur.com/cMKKYti.png)\n\n````\n---\ntitle: 使用 Hexo 建立 Github Blog\ndate: 2018-10-17 17:23:06\ntags: \ncategories:\n- 學習\n---\n````\n\n![](https://i.imgur.com/VrItgdZ.png)\n\n### 建立網站 tag\n#### 新增一個 tags 頁面\n\n````\nhexo new page tags\n````\n![](https://i.imgur.com/53PecP6.png)\n\n\n#### 編輯 tags/index.md\n![](https://i.imgur.com/WfD3HDq.png)\n````\n---\ntitle: tags\ndate: 2018-10-17 18:40:57\ntype: \"tags\"\n---\n````\n#### 在文章上加入 tags\n![](https://i.imgur.com/vCQUMWW.png)\n````\n---\ntitle: 使用 Hexo 建立 Github Blog\ndate: 2018-10-17 17:23:06\ntags:\n- Hexo\ncategories:\n- 學習\n---\n````\n\n### 搜尋功能\n\n#### 安裝 hexo-generator-search\n[hexo-generator-search](\nhttps://www.npmjs.com/package/hexo-generator-search)\n\n```\nnpm install hexo-generator-search --save\n```\n####  在_config.yml 找到 local_search 將 enable 設定為true\n\n![](https://i.imgur.com/pdUPxJC.png)\n\n![](https://i.imgur.com/sid0Bvr.png)\n\n![](https://i.imgur.com/oawpKOu.png)\n\n\n## 參考網址\nHexo 官方網站 : https://hexo.io/zh-tw/\nHexo 文件 :https://hexo.io/zh-tw/api/\nHexo Them :https://hexo.io/themes/index.html\n[Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)\n[[Hexo] 快速上手 Hexo 網誌框架](https://oawan.me/2016/easy-hexo-easy-blog/)\n[可能是最詳細的 Hexo + GitHub Pages 搭建部落格的教程](http://www.lovebxm.com/2018/06/24/hexo-github-blog/)\n[用Hexo + Github Pages搭建個人部落格](https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#comments)\n[Hexo的NexT主题个性化：添加文章阅读量](http://www.jeyzhang.com/hexo-next-add-post-views.html)\n[Sign up to Leancloud and create an app](https://github.com/theme-next/hexo-theme-next/blob/master/docs/LEANCLOUD-COUNTER-SECURITY.md)","tags":["Hexo"],"categories":["Hexo"]}]