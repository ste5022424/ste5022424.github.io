{"meta":{"title":"5+1's 技術學習筆記","subtitle":"5+1's 技術學習筆記","description":"5+1's 技術學習筆記","author":"ste5022424","url":"https://ste5022424.github.io","root":"/"},"pages":[],"posts":[{"title":"Sequelize Migrations","slug":"Sequelize-Migrations","date":"2019-07-02T08:54:34.000Z","updated":"2019-12-12T06:26:29.552Z","comments":true,"path":"2019/07/02/Sequelize-Migrations/","link":"","permalink":"https://ste5022424.github.io/2019/07/02/Sequelize-Migrations/","excerpt":"","text":"mysql 可以參考這篇 1. Installing CLI123npm install --save sequelizenpm install --save sequelize-clinpm install mysql2 2. Init1npx sequelize-cli init 3. 設定相關連線資訊 4. Create Database1npx sequelize-cli db:create mydatabase 5. Create First Model1npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string 6. Running Migrations1npx sequelize-cli db:migrate 7. Creating First Seed1npx sequelize-cli seed:generate --name demo-user seeders/xxxxxxxxxxxx-demo-user.js 1234567891011121314151617181920212223'use strict';module.exports = &#123; up: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkInsert( 'Users', [ &#123; firstName: 'John', lastName: 'Doe', email: 'demo@demo.com', createdAt: new Date(), updatedAt: new Date() &#125; ], &#123;&#125; ); &#125;, down: (queryInterface, Sequelize) =&gt; &#123; return queryInterface.bulkDelete('Users', null, &#123;&#125;); &#125;&#125;; 8. Running Seeds1npx sequelize-cli db:seed:all Reference \bSequelizejs Sequelize-cli","categories":[{"name":"Sequelize","slug":"Sequelize","permalink":"https://ste5022424.github.io/categories/Sequelize/"}],"tags":[{"name":"Sequelize","slug":"Sequelize","permalink":"https://ste5022424.github.io/tags/Sequelize/"},{"name":"Node js","slug":"Node-js","permalink":"https://ste5022424.github.io/tags/Node-js/"}]},{"title":"Mongo on Docker","slug":"Mongo-on-Docker","date":"2019-06-26T09:31:44.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2019/06/26/Mongo-on-Docker/","link":"","permalink":"https://ste5022424.github.io/2019/06/26/Mongo-on-Docker/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132# Use root/example as user/password credentialsversion: '3.5'networks: consumer: name: consumerservices: mongo: container_name: 'mongo' image: mongo restart: always volumes: - '/tmp/docker/data/mongo:/data/db' environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: root networks: - consumer mongo-express: container_name: 'mongo_express' image: mongo-express restart: always ports: - 8082:8081 environment: ME_CONFIG_MONGODB_ADMINUSERNAME: root ME_CONFIG_MONGODB_ADMINPASSWORD: root networks: - consumer Reference mongo docker mongo","categories":[],"tags":[]},{"title":"Node Js - Log4js","slug":"Node-Js-Log4js","date":"2019-06-18T10:44:42.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2019/06/18/Node-Js-Log4js/","link":"","permalink":"https://ste5022424.github.io/2019/06/18/Node-Js-Log4js/","excerpt":"","text":"1. install package12npm i confignpm i log4js 2. Creat config/default.json123456789101112131415161718192021222324&#123; \"logger\": &#123; \"appenders\": &#123; \"file\": &#123; \"type\": \"file\", \"filename\": \"logs/log.log\", \"maxLogSize\": 104857600, \"backups\": 10, \"layout\": &#123; \"type\": \"json\" &#125; &#125;, \"console\": &#123; \"type\": \"console\" &#125; &#125;, \"categories\": &#123; \"default\": &#123; \"appenders\": [\"file\"], \"level\": \"trace\" &#125; &#125; &#125;&#125; 3. Creat log.js123456789101112131415const config = require('config');const log4js = require('log4js');log4js.addLayout('json', function(config) &#123; return function(logEvent) &#123; return JSON.stringify(logEvent); &#125;;&#125;);log4js.configure(config.logger);module.exports = &#123; log4js, getLogger: log4js.getLogger&#125;; 4. Ceate index.js1234567const logger = require('./log').getLogger('logtest');logger.trace('testTrace');logger.debug('testDebug');logger.info('testInfo');logger.warn('testWarn');logger.error('testError');logger.fatal('testFatal'); 5. Run1node index.js Demo Reference log4js log4js-node.github.io","categories":[{"name":"log4js","slug":"log4js","permalink":"https://ste5022424.github.io/categories/log4js/"}],"tags":[{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"},{"name":"log4js","slug":"log4js","permalink":"https://ste5022424.github.io/tags/log4js/"}]},{"title":"Json Web Token","slug":"Json-Web-Token","date":"2019-06-17T08:34:05.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2019/06/17/Json-Web-Token/","link":"","permalink":"https://ste5022424.github.io/2019/06/17/Json-Web-Token/","excerpt":"","text":"Json Web Token123456var jwt = require('jsonwebtoken');var token = jwt.sign(&#123; data: 'mydata' &#125;, 'mysecret');console.log(`Token : $&#123;token&#125;`);var decode = jwt.verify(token, 'mysecret');console.log(`Data : $&#123;decode.data&#125;`); Reference JWT node-jsonwebtoken","categories":[{"name":"JWT","slug":"JWT","permalink":"https://ste5022424.github.io/categories/JWT/"}],"tags":[{"name":"Node Js","slug":"Node-Js","permalink":"https://ste5022424.github.io/tags/Node-Js/"},{"name":"JWT","slug":"JWT","permalink":"https://ste5022424.github.io/tags/JWT/"}]},{"title":"Sequelize-sequelize-auto","slug":"Sequelize-sequelize-auto","date":"2019-06-14T04:00:55.000Z","updated":"2019-12-12T06:26:29.553Z","comments":true,"path":"2019/06/14/Sequelize-sequelize-auto/","link":"","permalink":"https://ste5022424.github.io/2019/06/14/Sequelize-sequelize-auto/","excerpt":"","text":"Sequelize-sequelize-auto 自動產生資料庫關聯模型 1. install sequelize-auto1npm install -g sequelize-auto 2. install mysql1npm install -g mysql 3. Run sequelize-auto1sequelize-auto -o \"./models\" -d tablename -h localhost -u my_username -p 5432 -x my_password -e mysql 4. User.js 這時候就會產生一個跟資料庫對應的模型(/model/User.js)如果欄位自動號碼的話記得加上 （autoIncrement: true) 12345678910111213141516171819202122232425262728/* jshint indent: 2 */module.exports = function (sequelize, DataTypes) &#123; return sequelize.define('User', &#123; ID: &#123; type: DataTypes.INTEGER(11), allowNull: false, primaryKey: true, autoIncrement: true, &#125;, Name: &#123; type: DataTypes.STRING(50), allowNull: false &#125;, Telephone: &#123; type: DataTypes.STRING(20), allowNull: true &#125;, Age: &#123; type: DataTypes.INTEGER(11), allowNull: true &#125; &#125;, &#123; tableName: 'User', timestamps: false &#125;);&#125;; 5. sequelize.js12345678910const Sequelize = require('sequelize');const config = require('config');module.exports = new Sequelize(config.db.database, config.db.user, config.db.password, &#123; host: config.db.host, dialect: 'mysql', define: &#123; timestamps: false &#125;&#125;); 6. index.js1234567891011121314151617181920212223242526272829303132333435const Sequelize = require('sequelize');const sequelize = require('./database/sequelize/sequelize')const User = require('./models/User')(sequelize, Sequelize);// Find all usersUser.findAll().then(users =&gt; &#123; console.log(\"All users:\", JSON.stringify(users, null, 4));&#125;);// InsertUser.create(&#123; Name: 'Tom', Telephone: '09097895541s', Age: '20'&#125;).then(the =&gt; &#123; console.log(`Insert OK &gt;&gt; ID:$&#123;the.ID&#125;`);&#125;);// DeleteUser.destroy(&#123; where: &#123; Name: \"Tom\" &#125;&#125;).then(() =&gt; &#123; console.log(`Delete Tom Done`);&#125;);// UpdateUser.update(&#123; Name: \"WuWu\" &#125;, &#123; where: &#123; Name: \"Wu\" &#125;&#125;).then(() =&gt; &#123; console.log(\"Update Wu Done\");&#125;); DemoReference sequelizejs sequelize-auto","categories":[{"name":"Sequelize","slug":"Sequelize","permalink":"https://ste5022424.github.io/categories/Sequelize/"}],"tags":[{"name":"Sequelize","slug":"Sequelize","permalink":"https://ste5022424.github.io/tags/Sequelize/"},{"name":"Node js","slug":"Node-js","permalink":"https://ste5022424.github.io/tags/Node-js/"}]},{"title":"Google Cloud Pub/Sub: Qwik Start - Command Line","slug":"Google-Cloud-Pub-Sub-Qwik-Start-Command-Line","date":"2019-06-10T07:31:21.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2019/06/10/Google-Cloud-Pub-Sub-Qwik-Start-Command-Line/","link":"","permalink":"https://ste5022424.github.io/2019/06/10/Google-Cloud-Pub-Sub-Qwik-Start-Command-Line/","excerpt":"","text":"Google Cloud Pub/Sub: Qwik Start - Command LineSet Project ID 設定 Project ID1gcloud config set project qwiklabs-gcp-5c43d7b7f27776fe TopicsCreate Pub/Sub Topics 建立主題123gcloud pubsub topics create myTopicgcloud pubsub topics create Test1gcloud pubsub topics create Test2 Delete Topics 刪除主題1gcloud pubsub topics delete Test1 SubscriptionsCreate Subscriptions 建立訂閱1gcloud pubsub subscriptions create --topic myTopic mySubscription Delete Subscription 刪除主題1gcloud pubsub subscriptions delete mySubscription Autoack1gcloud pubsub subscriptions pull mySubscription --auto-ack PublishPublish message 加入 Message 至 Topic1gcloud pubsub topics publish myTopic --message \"Hello\" PullPull Message1gcloud pubsub subscriptions pull mySubscription --auto-ack --limit=3 –limit=3 取得前三個 Reference Google Cloud Pub/Sub: Qwik Start - Command Line 將 Cloud Pub/Sub 與 Node.js 搭配使用 nodejs-pubsub","categories":[{"name":"GCP Pub/Sub","slug":"GCP-Pub-Sub","permalink":"https://ste5022424.github.io/categories/GCP-Pub-Sub/"}],"tags":[{"name":"GCP Pub/Sub","slug":"GCP-Pub-Sub","permalink":"https://ste5022424.github.io/tags/GCP-Pub-Sub/"}]},{"title":"Google Cloud Pub/Sub: Node.js Client","slug":"Google-Cloud-Pub-Sub-Node-js-Client","date":"2019-06-10T07:12:30.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2019/06/10/Google-Cloud-Pub-Sub-Node-js-Client/","link":"","permalink":"https://ste5022424.github.io/2019/06/10/Google-Cloud-Pub-Sub-Node-js-Client/","excerpt":"","text":"Google Cloud Pub/Sub: Node.js Client1. 啟用 API 服務 2. 建立服務帳戶金鑰 3. 啟用驗證 將下載的檔案放到專案中並指定路徑 1export GOOGLE_APPLICATION_CREDENTIALS=\"[PATH]\" 4. install Package1npm install @google-cloud/pubsub 5. Create Topic123456789101112131415// Imports the Google Cloud client libraryconst &#123; PubSub &#125; = require('@google-cloud/pubsub');async function quickstart( projectId = 'your-project-id', // Your Google Cloud Platform project ID topicName = 'my-topic' // Name for the new topic to create) &#123; // Instantiates a client const pubsub = new PubSub(&#123; projectId &#125;); // Creates the new topic const [topic] = await pubsub.createTopic(topicName); console.log(`Topic $&#123;topic.name&#125; created.`);&#125;quickstart(); 6. Create Subscription123456789101112131415161718192021async function createSubscription(topicName, subscriptionName) &#123; // [START pubsub_create_pull_subscription] // Imports the Google Cloud client library const &#123; PubSub &#125; = require('@google-cloud/pubsub'); // Creates a client const pubsub = new PubSub(); /** * TODO(developer): Uncomment the following lines to run the sample. */ // const topicName = 'my-topic'; // const subscriptionName = 'my-sub'; // Creates a new subscription await pubsub.topic(topicName).createSubscription(subscriptionName); console.log(`Subscription $&#123;subscriptionName&#125; created.`); // [END pubsub_create_pull_subscription]&#125;createSubscription('my-topic', 'my-topic-Subscription'); 7. Push Message12345678910111213141516171819202122232425async function publishMessage(topicName, data) &#123; // [START pubsub_publish] // [START pubsub_quickstart_publisher] // Imports the Google Cloud client library const &#123; PubSub &#125; = require('@google-cloud/pubsub'); // Creates a client const pubsub = new PubSub(); /** * TODO(developer): Uncomment the following lines to run the sample. */ // const topicName = 'my-topic'; // const data = JSON.stringify(&#123; foo: 'bar' &#125;); // Publishes the message as a string, e.g. \"Hello, world!\" or JSON.stringify(someObject) const dataBuffer = Buffer.from(data); const messageId = await pubsub.topic(topicName).publish(dataBuffer); console.log(`Message $&#123;messageId&#125; published.`); // [END pubsub_publish] // [END pubsub_quickstart_publisher]&#125;publishMessage('my-topic', 'TestData'); 8. Pull Message1234567891011121314151617181920212223242526272829303132333435363738394041function listenForMessages(subscriptionName, timeout) &#123; // [START pubsub_subscriber_async_pull] // [START pubsub_quickstart_subscriber] // Imports the Google Cloud client library const &#123; PubSub &#125; = require('@google-cloud/pubsub'); // Creates a client const pubsub = new PubSub(); /** * TODO(developer): Uncomment the following lines to run the sample. */ // const subscriptionName = 'my-sub'; // const timeout = 60; // References an existing subscription const subscription = pubsub.subscription(subscriptionName); // Create an event handler to handle messages let messageCount = 0; const messageHandler = message =&gt; &#123; console.log(`Received message $&#123;message.id&#125;:`); console.log(`\\tData: $&#123;message.data&#125;`); console.log(`\\tAttributes: $&#123;message.attributes&#125;`); messageCount += 1; // \"Ack\" (acknowledge receipt of) the message message.ack(); &#125;; // Listen for new messages until timeout is hit subscription.on(`message`, messageHandler); setTimeout(() =&gt; &#123; subscription.removeListener('message', messageHandler); console.log(`$&#123;messageCount&#125; message(s) received.`); &#125;, timeout * 1000); // [END pubsub_subscriber_async_pull] // [END pubsub_quickstart_subscriber]&#125;listenForMessages('my-topic-Subscription', 3); 範例 Reference nodejs-pubsub 將 Cloud Pub/Sub 與 Node.js 搭配使用 Google Cloud Pub/Sub: Node.js Client","categories":[{"name":"GCP Pub/Sub","slug":"GCP-Pub-Sub","permalink":"https://ste5022424.github.io/categories/GCP-Pub-Sub/"}],"tags":[{"name":"GCP Pub/Sub","slug":"GCP-Pub-Sub","permalink":"https://ste5022424.github.io/tags/GCP-Pub-Sub/"},{"name":"Node.js","slug":"Node-js","permalink":"https://ste5022424.github.io/tags/Node-js/"}]},{"title":"Google OAuth","slug":"Google-OAuth","date":"2019-06-05T08:06:18.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2019/06/05/Google-OAuth/","link":"","permalink":"https://ste5022424.github.io/2019/06/05/Google-OAuth/","excerpt":"","text":"Google OAuth1. 建立一組 Goole APIS Clinet ID1.1 憑證 &gt; 建立憑證 1.2 OAuth 用戶端 ID 1.3 設定 來源網址 ＆ 重新導向 URL 因為 Goole 會驗證來源網址，所以網址必須是要公開的，為了方便測試這邊使用 Surge建立一個對外的 Domain 1.4 建立新增成功，取得用戶端 ID， 2. 新增一個 index.html，貼上官方的範例，並將 ID 貼到範例提供的 meta 上面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt; &lt;script src=\"https://apis.google.com/js/platform.js\" async defer&gt;&lt;/script&gt; &lt;meta name=\"google-signin-client_id\" content=\"YourClinetID.apps.googleusercontent.com\" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"login\" class=\"g-signin2\" data-onsuccess=\"onSignIn\" data-theme=\"dark\" &gt;&lt;/div&gt; &lt;p id=\"ID\"&gt;&lt;/p&gt; &lt;p id=\"Full\"&gt;&lt;/p&gt; &lt;p id=\"Given\"&gt;&lt;/p&gt; &lt;p id=\"Family\"&gt;&lt;/p&gt; &lt;img id=\"Image\" /&gt; &lt;p id=\"Email\"&gt;&lt;/p&gt; &lt;a id=\"logout\" href=\"#\" onclick=\"signOut()\"&gt;Logout&lt;/a&gt; &lt;/body&gt; &lt;script&gt; document.getElementById('logout').style.display = 'none'; function onSignIn(googleUser) &#123; document.getElementById('login').style.display = 'none'; document.getElementById('logout').style.display = 'inline'; // Useful data for your client-side scripts: var profile = googleUser.getBasicProfile(); document.getElementById('ID').innerHTML = 'ID:' + profile.getId(); document.getElementById('Full').innerHTML = 'Full:' + profile.getEmail(); document.getElementById('Given').innerHTML = 'Given:' + profile.getGivenName(); document.getElementById('Family').innerHTML = 'Family:' + profile.getFamilyName(); document.getElementById('Image').src = profile.getImageUrl(); document.getElementById('Email').innerHTML = 'Email:' + profile.getEmail(); var id_token = googleUser.getAuthResponse().id_token; console.log('ID Token: ' + id_token); &#125; function signOut() &#123; var auth2 = gapi.auth2.getAuthInstance(); auth2.signOut().then(function() &#123; console.log('User signed out.'); location.reload(); &#125;); &#125; &lt;/script&gt;&lt;/html&gt; 2.1 http://myoauth.surge.sh/ 參考 ntegrating Google Sign-In into your web app Authenticate with a backend server","categories":[{"name":"Google OAuth","slug":"Google-OAuth","permalink":"https://ste5022424.github.io/categories/Google-OAuth/"}],"tags":[{"name":"Google OAuth","slug":"Google-OAuth","permalink":"https://ste5022424.github.io/tags/Google-OAuth/"}]},{"title":"Node Js Json Web Token","slug":"Node-Js-Json-Web-Token","date":"2019-06-05T06:41:02.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2019/06/05/Node-Js-Json-Web-Token/","link":"","permalink":"https://ste5022424.github.io/2019/06/05/Node-Js-Json-Web-Token/","excerpt":"","text":"Node Js Json Web Token參考 Node JS jsonwebtoken JWT","categories":[{"name":"JWT","slug":"JWT","permalink":"https://ste5022424.github.io/categories/JWT/"}],"tags":[{"name":"Node JS - JWT","slug":"Node-JS-JWT","permalink":"https://ste5022424.github.io/tags/Node-JS-JWT/"}]},{"title":"Axios Post Form Data","slug":"Axios-Post-Form-Data","date":"2019-05-31T02:26:33.000Z","updated":"2019-12-12T06:26:29.542Z","comments":true,"path":"2019/05/31/Axios-Post-Form-Data/","link":"","permalink":"https://ste5022424.github.io/2019/05/31/Axios-Post-Form-Data/","excerpt":"","text":"Axios Post Form Data安裝套件123npm initnpm install axiosnpm i qs Code12345678910111213141516171819202122const axios = require('axios');const qs = require('qs');let formdata = qs.stringify(&#123; Name: 'Andy', Age : 18&#125;);axios(&#123; method: 'post', url: 'Your Url', data: formdata, config: &#123; headers: &#123; 'Content-Type': 'application/x-www-form-urlencoded' &#125; &#125;&#125;) .then(function (response) &#123; //handle success console.log(response.data); &#125;) .catch(function (response) &#123; //handle error console.log(response); &#125;); 參考 axios qs","categories":[{"name":"Axios","slug":"Axios","permalink":"https://ste5022424.github.io/categories/Axios/"}],"tags":[{"name":"Axios","slug":"Axios","permalink":"https://ste5022424.github.io/tags/Axios/"},{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"}]},{"title":"Node js ORM Sequelize","slug":"Node-js-ORM-Sequelize","date":"2019-05-30T08:17:00.000Z","updated":"2019-12-12T06:26:29.551Z","comments":true,"path":"2019/05/30/Node-js-ORM-Sequelize/","link":"","permalink":"https://ste5022424.github.io/2019/05/30/Node-js-ORM-Sequelize/","excerpt":"","text":"","categories":[],"tags":[{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"}]},{"title":"Mysql on Docker","slug":"Mysql-on-Docker","date":"2019-05-28T01:52:26.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2019/05/28/Mysql-on-Docker/","link":"","permalink":"https://ste5022424.github.io/2019/05/28/Mysql-on-Docker/","excerpt":"","text":"Mysql on Docker docker-compose.yml 123456789101112131415161718version: \"3.1\"services: db: container_name: \"mysql\" image: \"mysql\" volumes: - \"/data/mysql:/var/lib/mysql\" command: --default-authentication-plugin=mysql_native_password restart: always environment: MYSQL_ROOT_PASSWORD: \"root\" adminer: container_name: \"adminer\" image: \"adminer\" restart: always ports: - 8081:8080 參考 dockerhub mysql mysql adminer","categories":[{"name":"Mysql","slug":"Mysql","permalink":"https://ste5022424.github.io/categories/Mysql/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Mysql","slug":"Mysql","permalink":"https://ste5022424.github.io/tags/Mysql/"}]},{"title":"Node.js Web on Docker","slug":"Node-js-Web-on-Docker","date":"2019-05-27T07:59:35.000Z","updated":"2019-12-12T06:26:29.551Z","comments":true,"path":"2019/05/27/Node-js-Web-on-Docker/","link":"","permalink":"https://ste5022424.github.io/2019/05/27/Node-js-Web-on-Docker/","excerpt":"","text":"Node.js Web on Docker1. init Project12345npm initnpm installgit initgit add .git -commit -m \"git init\" 2. Edit package.json1234567891011121314&#123; \"name\": \"nodejs_docker\", \"version\": \"1.0.0\", \"description\": \"nodejs_docker\", \"main\": \"index.js\", \"scripts\": &#123; \"start\": \"node index.js\" &#125;, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": &#123; \"express\": \"^4.17.1\" &#125;&#125; 3. Install express.js1npm install express --save 4.Creat index.js12345678910111213141516'use strict';const express = require('express');// Constantsconst PORT = 8080;const HOST = '0.0.0.0';// Appconst app = express();app.get('/', (req, res) =&gt; &#123; res.send('Hello world\\n');&#125;);app.listen(PORT, HOST);console.log(`Running on http://$&#123;HOST&#125;:$&#123;PORT&#125;`); 5. Creat Dockerfile12345678910111213141516171819FROM node:8# Create app directoryWORKDIR /usr/src/app# Install app dependencies# A wildcard is used to ensure both package.json AND package-lock.json are copied# where available (npm@5+)COPY package*.json ./RUN npm install# If you are building your code for production# RUN npm ci --only=production# Bundle app sourceCOPY . .EXPOSE 8080CMD [ \"npm\", \"start\" ] 6. Build Docker Images1docker build -t node-web-app . 7. Docker Run1docker run -p 49160:8080 -d --name node-web-app node-web-app 8. Demo1curl 127.0.0.1:49160 範例連結 參考 把一個Node.js web 應用程序給Docker 化","categories":[{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/categories/Node-JS/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"}]},{"title":"Gitlab server on Docker","slug":"Gitlab-server-on-Docker","date":"2019-05-24T05:55:55.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2019/05/24/Gitlab-server-on-Docker/","link":"","permalink":"https://ste5022424.github.io/2019/05/24/Gitlab-server-on-Docker/","excerpt":"","text":"Gitlab server on Docker123456789sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:latest 參考 GitLab Docker","categories":[{"name":"Gitlab","slug":"Gitlab","permalink":"https://ste5022424.github.io/categories/Gitlab/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Gitlab","slug":"Gitlab","permalink":"https://ste5022424.github.io/tags/Gitlab/"}]},{"title":"ESLint Javascript 程式碼規範檢查工具","slug":"ESLint-Javascript-程式碼規範檢查工具","date":"2019-05-21T09:42:06.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2019/05/21/ESLint-Javascript-程式碼規範檢查工具/","link":"","permalink":"https://ste5022424.github.io/2019/05/21/ESLint-Javascript-程式碼規範檢查工具/","excerpt":"","text":"ESLint Javascript 程式碼規範檢查工具1. 安裝工具1npm install eslint --save-dev 2. 跑規則 如果方案沒有 package.json 記得先 npm init 1./node_modules/.bin/eslint --init 3. 跑完之後會發現 檔案呈現紅色的 4. 這邊就可以看到要些改的項目 5. 自動修復1./node_modules/.bin/eslint --fix My.js VsCode ESLintESLint 參考 Getting Started with ESLint 在 VSCode 啟用程式碼規範工具 (ESLint) eslint ESLint Quickstart - find errors automatically","categories":[{"name":"ESLint","slug":"ESLint","permalink":"https://ste5022424.github.io/categories/ESLint/"}],"tags":[{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"},{"name":"ESLint","slug":"ESLint","permalink":"https://ste5022424.github.io/tags/ESLint/"},{"name":"Javascriptd","slug":"Javascriptd","permalink":"https://ste5022424.github.io/tags/Javascriptd/"}]},{"title":"Node js Hello world!","slug":"Node-js-Hello-world","date":"2019-05-20T08:47:59.000Z","updated":"2019-12-12T06:26:29.551Z","comments":true,"path":"2019/05/20/Node-js-Hello-world/","link":"","permalink":"https://ste5022424.github.io/2019/05/20/Node-js-Hello-world/","excerpt":"","text":"Node js Hello world! 記得先安裝 node js 1. Init1npm init 2. 新增 HelloNode.js1console.log('Hello Node JS'); 3. 執行執行有三種方式(1) node XXX.js1node .\\HelloNode.js (2) node runpackage.json 加入以下片段1\"HelloNode\": \"node HelloNode.js Run1npm run HelloNode (3) Vs Code 偵錯選擇偵錯(Crtl + Shift + D) &gt; 設定 選 node js 調整設定檔 F5 啟動偵錯 參考 建立 第一個 Node.js 專案","categories":[{"name":"Node Js","slug":"Node-Js","permalink":"https://ste5022424.github.io/categories/Node-Js/"}],"tags":[{"name":"Node JS","slug":"Node-JS","permalink":"https://ste5022424.github.io/tags/Node-JS/"},{"name":"VsCode","slug":"VsCode","permalink":"https://ste5022424.github.io/tags/VsCode/"}]},{"title":"Vue js Hello World!","slug":"Vue-js-Hello-World","date":"2019-05-20T03:41:47.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/05/20/Vue-js-Hello-World/","link":"","permalink":"https://ste5022424.github.io/2019/05/20/Vue-js-Hello-World/","excerpt":"","text":"Vue js Hello World! 記得先安裝 node js 1.安裝 Vue Cli1npm install -g @vue/cli 2. Creat hello-world1vue create hello-world 3. Run Server12cd hello-worldnpm run serve 4. http://localhost:8081/ 參考 Vue js Vue-create Vue cli node js","categories":[{"name":"Vue js","slug":"Vue-js","permalink":"https://ste5022424.github.io/categories/Vue-js/"}],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"https://ste5022424.github.io/tags/VsCode/"},{"name":"Vue js","slug":"Vue-js","permalink":"https://ste5022424.github.io/tags/Vue-js/"}]},{"title":"Visual Studio Code 存檔自動排版","slug":"Visual-Studio-Code-存檔自動排版","date":"2019-05-15T03:38:49.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/05/15/Visual-Studio-Code-存檔自動排版/","link":"","permalink":"https://ste5022424.github.io/2019/05/15/Visual-Studio-Code-存檔自動排版/","excerpt":"","text":"Visual Studio Code 存檔自動排版1. 開啟 setting (Ctrl + ,) 2. 輸入 “Format On Save” &gt; 將它打勾 ， 這樣存檔的時候就會自動排了","categories":[{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://ste5022424.github.io/categories/Visual-Studio-Code/"}],"tags":[{"name":"筆記","slug":"筆記","permalink":"https://ste5022424.github.io/tags/筆記/"},{"name":"Visual Studio Code 存檔自動排版","slug":"Visual-Studio-Code-存檔自動排版","permalink":"https://ste5022424.github.io/tags/Visual-Studio-Code-存檔自動排版/"}]},{"title":"SonarLint - Sonqrqube Server Custom Rules","slug":"SonarLint-Sonqrqube-Server-Custom-Rules","date":"2019-05-14T05:39:45.000Z","updated":"2019-12-12T06:26:29.554Z","comments":true,"path":"2019/05/14/SonarLint-Sonqrqube-Server-Custom-Rules/","link":"","permalink":"https://ste5022424.github.io/2019/05/14/SonarLint-Sonqrqube-Server-Custom-Rules/","excerpt":"","text":"SonarLint - Sonqrqube Server Custom Rules1. 安裝 SonarLint2. 檢視 &gt; Team Explore 3. 連到 Sonqrqube Server 4. Connet 5. 連線之後，選擇自己的專案下載規則 6. 專案會出現 .sonarlint 跟 .ruleset 檔案 可以將檔案加入版控，組員就可以直接連線 7. 建置 &gt; 針對方案程式碼進行分析 (Alt + F11 ) 8. 回到 sonarqube server &gt; 選擇 &gt; 代碼規則 &gt; 質量配置 &gt; 選擇一個自己做的樣板 9. 隱藏某條規則 (使用S1118 當範例) 10. 回 Team Explore 再去下載一次 profile 11. 就可以看到 S1118 這條規則已經被隱藏了","categories":[{"name":"SonarLint","slug":"SonarLint","permalink":"https://ste5022424.github.io/categories/SonarLint/"}],"tags":[{"name":"SonarLint","slug":"SonarLint","permalink":"https://ste5022424.github.io/tags/SonarLint/"},{"name":"Sonqrqube","slug":"Sonqrqube","permalink":"https://ste5022424.github.io/tags/Sonqrqube/"}]},{"title":"Express Web Hello World","slug":"Express-Node-js-Web","date":"2019-05-13T03:45:30.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2019/05/13/Express-Node-js-Web/","link":"","permalink":"https://ste5022424.github.io/2019/05/13/Express-Node-js-Web/","excerpt":"","text":"Express Web Hello World Express 是最小又靈活的 Node.js Web 應用程式架構，為 Web 與行動式應用程式提供一組健全的特性。 1. 安裝 express 套件1npm install express --save 2. 新增 一個 app.js1234567const express = require('express')const app = express()const port = 3000app.get('/', (req, res) =&gt; res.send('Hello World!'))app.listen(port, () =&gt; console.log('Example app listening on port $&#123;port&#125;!')) 3. Run node1node app.js 4. Hello World! RestfulAPI 實作 Get / Post / Put / Delete12345678910111213141516171819202122232425const express = require('express')const app = express()const port = 3000//// RestfulAPI// getapp.get('/myget', (req, res) =&gt;res.send('Hello World myget!'))// postapp.post('/mypost', function (req, res) &#123; res.json(&#123; RestfulAPI: 'mypost' &#125;)&#125;)// putapp.put('/myput', function (req, res) &#123; res.json(&#123; RestfulAPI: 'myput' &#125;)&#125;)// deleteapp.delete('/mydelete', function (req, res) &#123; res.json(&#123; RestfulAPI: 'mydelete' &#125;)&#125;) Get http://localhost:3000/myget Post http://localhost:3000/mypost Put http://localhost:3000/myput Delete http://localhost:3000/mydelete Static File12345678const express = require('express')const app = express()const port = 3000//// static filesapp.use(express.static('static'))app.listen(port, () =&gt; console.log(`Example app listening on port $&#123;port&#125;!`)) 參考 expressjs","categories":[{"name":"Express","slug":"Express","permalink":"https://ste5022424.github.io/categories/Express/"}],"tags":[{"name":"Express","slug":"Express","permalink":"https://ste5022424.github.io/tags/Express/"},{"name":"Node Js","slug":"Node-Js","permalink":"https://ste5022424.github.io/tags/Node-Js/"}]},{"title":"android 遠程調試 WebView","slug":"android-遠程調試-WebView","date":"2019-05-06T10:40:24.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2019/05/06/android-遠程調試-WebView/","link":"","permalink":"https://ste5022424.github.io/2019/05/06/android-遠程調試-WebView/","excerpt":"","text":"android 遠程調試 WebView1. 安卓 應用程式 加入 允許 debug1WebView.setWebContentsDebuggingEnabled(true); 2. 開啟 chrome &gt;輸入網址 chrome://inspect/#devices 3. 手機 &gt; 設定 &gt; 啟用 USB 偵錯 4. 手機進入 Webbview &gt; 點選 inspect &gt; 就可以針對 Webbview 進行偵錯 參考 遠程調試 WebView","categories":[{"name":"android","slug":"android","permalink":"https://ste5022424.github.io/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"https://ste5022424.github.io/tags/android/"},{"name":"WebView","slug":"WebView","permalink":"https://ste5022424.github.io/tags/WebView/"}]},{"title":"Sonar-scanner-msbuild : credentials must be passed in both begin and end steps or not at all","slug":"Sonar-scanner-msbuild-credentials-must-be-passed-in-both-begin-and-end-steps-or-not-at-all","date":"2019-04-23T03:54:14.000Z","updated":"2019-12-12T06:26:29.554Z","comments":true,"path":"2019/04/23/Sonar-scanner-msbuild-credentials-must-be-passed-in-both-begin-and-end-steps-or-not-at-all/","link":"","permalink":"https://ste5022424.github.io/2019/04/23/Sonar-scanner-msbuild-credentials-must-be-passed-in-both-begin-and-end-steps-or-not-at-all/","excerpt":"","text":"Sonar-scanner-msbuild : credentials must be passed in both begin and end steps再跑 SonarScanner 的時候跳出了錯誤(credentials must be passed in both begin and end steps)，如果再 SonarScanner.MSBuild.exe中要使用 /d:sonar.login，必須在 begin 和 end 都要加入 /d:sonar.login，才會生效。 123SonarScanner.MSBuild.exe begin /k:\"project-key\" /d:sonar.login=\"YourToken\"MSBuild.exe &lt;path to solution.sln&gt; /t:RebuildSonarScanner.MSBuild.exe end /d:sonar.login=\"YourToken\" Token 的部分可以去帳號設定產出來 參考 sonar-scanner-msbuild : 4.1.0.1148 SonarQube+Scanner+for+MSBuild","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"}]},{"title":"Linq Join Lambda expression","slug":"Linq-Join-Lambda-expression","date":"2019-04-18T10:06:29.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2019/04/18/Linq-Join-Lambda-expression/","link":"","permalink":"https://ste5022424.github.io/2019/04/18/Linq-Join-Lambda-expression/","excerpt":"","text":"Linq Join Lambda expression Eaxlample 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace ConsoleApp20&#123; internal class Program &#123; private static void Main(string[] args) &#123; var memberdata = new List&lt;Member&gt;() &#123; new Member()&#123; MemberID = 1, MemberAccount = &quot;小明&quot;&#125;, new Member()&#123; MemberID = 2, MemberAccount = &quot;小王&quot;&#125;, new Member()&#123; MemberID = 3, MemberAccount = &quot;小華&quot;&#125;, &#125;; var scoredata = new List&lt;Score&gt;() &#123; new Score()&#123; MemberID = 1, score = 100&#125;, new Score()&#123; MemberID = 2, score = 50&#125;, new Score()&#123; MemberID = 3, score = 40&#125;, &#125;; var membergamelogdata = new List&lt;MemberGameLog&gt;() &#123; new MemberGameLog() &#123; MemberID = 1 , LogID = 4001 , LogName = &quot;打棒球&quot; &#125;, new MemberGameLog() &#123; MemberID = 2 , LogID = 4002 , LogName = &quot;打羽球&quot; &#125;, new MemberGameLog() &#123; MemberID = 3 , LogID = 4003 , LogName = &quot;打籃球&quot; &#125; &#125;; var joindata = memberdata .Join(membergamelogdata, member =&gt; member.MemberID, gamelogdata =&gt; gamelogdata.MemberID, (member, gamelogdata) =&gt; new &#123; MemberID = member.MemberID, MemberAccount = member.MemberAccount, LogID = gamelogdata.LogID, LogName = gamelogdata.LogName &#125;) .Join(scoredata, memberjoin1 =&gt; memberjoin1.MemberID, score =&gt; score.MemberID, (memberjoin1, thescore) =&gt; &#123; // Declare variable within LINQ select var getscorestring = getScoreString(thescore.score); return new &#123; MemberID = memberjoin1.MemberID, MemberAccount = memberjoin1.MemberAccount, score = getscorestring, LogID = memberjoin1.LogID, LogName = memberjoin1.LogName &#125;; &#125;); foreach (var item in joindata) &#123; Console.WriteLine($&quot;&#123;item.MemberID&#125;, &#123;item.MemberAccount&#125;, &#123;item.score&#125;, &#123;item.LogID&#125;, &#123;item.LogName&#125;&quot;); &#125; &#125; private static string getScoreString(int score) &#123; if (score &gt; 80) &#123; return &quot;甲&quot;; &#125; else if (score &gt; 60) &#123; return &quot;乙&quot;; &#125; else &#123; return &quot;丙&quot;; &#125; &#125; private class Score &#123; public int MemberID &#123; get; set; &#125; public int score &#123; get; set; &#125; &#125; private class Member &#123; public int MemberID &#123; get; set; &#125; public string MemberAccount &#123; get; set; &#125; &#125; private class MemberGameLog &#123; public int MemberID &#123; get; set; &#125; public int LogID &#123; get; set; &#125; public string LogName &#123; get; set; &#125; &#125; &#125;&#125; 參考Linq Join &amp; Lambda JoinHow to rewrite this LINQ using join with lambda expressions?How to join 3 tables with lambda expression?Declare variable within LINQ select","categories":[{"name":"Linq","slug":"Linq","permalink":"https://ste5022424.github.io/categories/Linq/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ste5022424.github.io/tags/C/"},{"name":"Linq","slug":"Linq","permalink":"https://ste5022424.github.io/tags/Linq/"}]},{"title":"Sonarqube 權限設定","slug":"Sonarqube-權限設定","date":"2019-04-17T09:24:42.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/04/17/Sonarqube-權限設定/","link":"","permalink":"https://ste5022424.github.io/2019/04/17/Sonarqube-權限設定/","excerpt":"","text":"Sonarqube 權限設定1. Security &gt; Groups 2. Creat User 2. Creat Group 3. Add Group 4. Security &gt; Permission Templates 4. Projects &gt; Management &gt; Creat Project 5. Projects &gt; Management &gt; Apply Permission Templates 6. Check","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"}]},{"title":"Sonarqube in visual studio SonarLint","slug":"Sonarqube-in-visual-studio-SonarLint","date":"2019-04-15T07:42:39.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/04/15/Sonarqube-in-visual-studio-SonarLint/","link":"","permalink":"https://ste5022424.github.io/2019/04/15/Sonarqube-in-visual-studio-SonarLint/","excerpt":"","text":"SonarLint 安裝1. 工具 &gt; 擴充功能和更新 2. 搜尋 &gt; SonarLint &gt; 下載 &gt; 重新啟動 Visual Studio 3. 建置 &gt; 針對方案執行程式碼分析 (Alt+ F11) 4. 錯誤清單 &gt; 組件 + IntelliSense 這邊就可以看到要修改的項目(S開頭的為sonrquebe的規則) 5. 修改程式碼 程式碼就會顯示 綠色的蚯蚓 alt+. 就會出現建議 參考 www.sonarlint.org 如何在 Visual Studio 使用 SonarLint ?","categories":[{"name":"sonarlint","slug":"sonarlint","permalink":"https://ste5022424.github.io/categories/sonarlint/"}],"tags":[{"name":"sonarlint","slug":"sonarlint","permalink":"https://ste5022424.github.io/tags/sonarlint/"},{"name":"sonarqube","slug":"sonarqube","permalink":"https://ste5022424.github.io/tags/sonarqube/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://ste5022424.github.io/tags/Visual-Studio/"}]},{"title":"docker-compose run ELK","slug":"docker-compose-run-ELK","date":"2019-04-02T08:32:39.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2019/04/02/docker-compose-run-ELK/","link":"","permalink":"https://ste5022424.github.io/2019/04/02/docker-compose-run-ELK/","excerpt":"","text":"docker-comepost run ELK1. 新增 elasticsearch 持久層資料夾1mkdir -m 777 /data/elasticsearch &amp; mkdir -m 777 /data/elasticsearch2 &amp; cp -r logstash /data/logstash logstash.conf123456789101112131415161718192021file &#123; path =&gt; &quot;/usr/share/logstash/Log/*&quot; type =&gt; &quot;file&quot; start_position =&gt; &quot;beginning&quot; &#125; &#125;filter &#123; grok &#123; match =&gt; [&quot;message&quot;, &quot;%&#123;TIMESTAMP_ISO8601:[@metadata][timestamp]&#125; %&#123;NUMBER:threadid&#125; %&#123;LOGLEVEL:loglevel&#125; %&#123;NOTSPACE:logger&#125; %&#123;GREEDYDATA:message&#125;&quot;] overwrite =&gt; [ &quot;message&quot; ] &#125;&#125;output &#123; elasticsearch &#123; hosts =&gt; [&quot;elasticsearch:9200&quot;] index =&gt; &quot;logstash-test&quot; &#125; stdout &#123; codec =&gt; rubydebug&#125;&#125; docker-compose.yaml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455version: '3.2'services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0 container_name: elasticsearch environment: - cluster.name=docker-cluster - bootstrap.memory_lock=true - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" ulimits: memlock: soft: -1 hard: -1 volumes: - /data/elasticsearch:/usr/share/elasticsearch/data ports: - 9200:9200 networks: - esnet elasticsearch2: image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0 container_name: elasticsearch2 environment: - cluster.name=docker-cluster - bootstrap.memory_lock=true - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\" - \"discovery.zen.ping.unicast.hosts=elasticsearch\" ulimits: memlock: soft: -1 hard: -1 volumes: - /data/elasticsearch2:/usr/share/elasticsearch/data networks: - esnet restart: always kibana: image: docker.elastic.co/kibana/kibana:6.7.0 container_name: kibana ports: - \"5601:5601\" restart: always networks: - esnet logstash: image: docker.elastic.co/logstash/logstash:6.7.0 container_name: logstash volumes: - /tmp/Log/:/usr/share/logstash/Log - /data/logstash/pipeline:/usr/share/logstash/pipeline/ restart: always networks: - esnetnetworks: esnet: 2. docker-compose 全部啟動 1docker-compose up -d 全部關閉 1docker-compose down #參考 ELK-Stack.git elasticsearch logstash kibana filebeat","categories":[{"name":"ELK Stack","slug":"ELK-Stack","permalink":"https://ste5022424.github.io/categories/ELK-Stack/"}],"tags":[{"name":"ELK Stack","slug":"ELK-Stack","permalink":"https://ste5022424.github.io/tags/ELK-Stack/"}]},{"title":"Kubernetes Logging with Fluentd","slug":"Kubernetes-Logging-with-Fluentd","date":"2019-04-01T07:28:43.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2019/04/01/Kubernetes-Logging-with-Fluentd/","link":"","permalink":"https://ste5022424.github.io/2019/04/01/Kubernetes-Logging-with-Fluentd/","excerpt":"","text":"Kubernetes Logging with Fluentd參考 Kubernetes Logging with Fluentd fluent/fluentd-kubernetes-daemonset Logging in Kubernetes with Elasticsearch, Kibana, and Fluentd","categories":[{"name":"Fluentd","slug":"Fluentd","permalink":"https://ste5022424.github.io/categories/Fluentd/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://ste5022424.github.io/tags/Kubernetes/"},{"name":"kubectl","slug":"kubectl","permalink":"https://ste5022424.github.io/tags/kubectl/"}]},{"title":"C# HttpWebRequest Expect:100-continue","slug":"HttpWebRequestExpect100continue","date":"2019-03-20T12:31:18.000Z","updated":"2019-12-12T06:26:29.548Z","comments":true,"path":"2019/03/20/HttpWebRequestExpect100continue/","link":"","permalink":"https://ste5022424.github.io/2019/03/20/HttpWebRequestExpect100continue/","excerpt":"","text":"HttpWebRequest Expect:100-continue’ 使用 .net HttpWebRequest Post時，碰到第三方串接商API無回應，導致 Reseponse TimeOut，使用 Fiddler 攔了一下，發現Header多了一個 “Expect:100-continue”，原來第三方串接商API不支援，所以才會沒有回應導致Reseponse Timeout，把 Expect100Continue 設定成 false 就可以解決了 12HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(&quot;Url&quot;);request.ServicePoint.Expect100Continue = false; 參考 How to disable the “Expect: 100 continue” header in HttpWebRequest for a single request? Expect:100-continue100 Continue","categories":[{"name":"HttpWebRequest","slug":"HttpWebRequest","permalink":"https://ste5022424.github.io/categories/HttpWebRequest/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ste5022424.github.io/tags/C/"},{"name":"HttpWebRequest","slug":"HttpWebRequest","permalink":"https://ste5022424.github.io/tags/HttpWebRequest/"},{"name":"筆記","slug":"筆記","permalink":"https://ste5022424.github.io/tags/筆記/"}]},{"title":"C# HttpWebRequest ClientCertificates","slug":"C-HttpWebRequest-ClientCertificates","date":"2019-03-19T12:00:14.000Z","updated":"2019-12-12T06:26:29.542Z","comments":true,"path":"2019/03/19/C-HttpWebRequest-ClientCertificates/","link":"","permalink":"https://ste5022424.github.io/2019/03/19/C-HttpWebRequest-ClientCertificates/","excerpt":"","text":"C# HttpWebRequest ClientCertificates12345678910111213141516171819202122232425262728293031323334353637byte[] aryData = Encoding.UTF8.GetBytes(string.Empty); HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(&quot;URL&quot;); //// 設定私有憑證 req.ClientCertificates.Add(new X509Certificate(HttpRuntime.AppDomainAppPath + @&quot;\\yourCertificates.p12&quot;, &quot;yourpassword&quot;)); X509Store certStore = new X509Store(&quot;My&quot;, StoreLocation.LocalMachine); certStore.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly); X509Certificate2 cert = certStore.Certificates[0]; certStore.Close(); req.ClientCertificates.Add(cert); req.Method = &quot;POST&quot;; req.ContentType = &quot;application/json&quot;; req.ContentLength = aryData.Length; req.Accept = &quot;application/json&quot;; using (Stream reqStream = req.GetRequestStream()) &#123; reqStream.Write(aryData, 0, aryData.Length); &#125; string strResult = string.Empty; using (WebResponse res = req.GetResponse()) &#123; using (Stream resStream = res.GetResponseStream()) &#123; using (StreamReader objSR = new StreamReader(resStream)) &#123; strResult = objSR.ReadToEnd(); &#125; &#125; &#125; return strResult; 參考 Force HttpWebRequest to send client certificate","categories":[{"name":"HttpWebRequest","slug":"HttpWebRequest","permalink":"https://ste5022424.github.io/categories/HttpWebRequest/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ste5022424.github.io/tags/C/"},{"name":"HttpWebRequest","slug":"HttpWebRequest","permalink":"https://ste5022424.github.io/tags/HttpWebRequest/"},{"name":"筆記","slug":"筆記","permalink":"https://ste5022424.github.io/tags/筆記/"}]},{"title":"kubectl 常用指令","slug":"kubectl-常用指令","date":"2019-03-15T03:15:23.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2019/03/15/kubectl-常用指令/","link":"","permalink":"https://ste5022424.github.io/2019/03/15/kubectl-常用指令/","excerpt":"","text":"kubectl 常用指令以下列舉常用指令 version :查看 kubectl 版本 1kubectl version cluster-info :顯示叢集資訊 1kubectl cluster-info top :查看CPU、記憶體狀態 12kubectl top podkubectl top node get :取得K8s相關資訊 12kubectl get podskubectl get service run :執行容器 1kubectl run [your-name] --image gcr.io/[your-projectid]/netcorewebapi:v1 --port 80 logs :查看容器log 1kubectl logs [pod-name] exec :對容器下指令 1kubectl exec -it [pod-name] bash apply :使用 yaml 更新 K8s 1kubectl apply [youtrname].yaml config view :查看 kubectl 設定 1kubectl config view 參考 kubectl-commands K8S指令","categories":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://ste5022424.github.io/categories/Kubernetes/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://ste5022424.github.io/tags/Kubernetes/"},{"name":"kubectl","slug":"kubectl","permalink":"https://ste5022424.github.io/tags/kubectl/"}]},{"title":"curl for windows","slug":"curl-for-windows","date":"2019-03-07T08:27:11.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2019/03/07/curl-for-windows/","link":"","permalink":"https://ste5022424.github.io/2019/03/07/curl-for-windows/","excerpt":"","text":"curl for windows1.下載 2.curl.exe 3.測試 1curl -X get \"www.google.com\" 參考 curl 7.64.0 for Windows curl online","categories":[{"name":"curl","slug":"curl","permalink":"https://ste5022424.github.io/categories/curl/"}],"tags":[{"name":"curl","slug":"curl","permalink":"https://ste5022424.github.io/tags/curl/"}]},{"title":"Slack Incoming Webhooks","slug":"Slack-Incoming-Webhooks","date":"2019-03-07T07:55:46.000Z","updated":"2019-12-12T06:26:29.554Z","comments":true,"path":"2019/03/07/Slack-Incoming-Webhooks/","link":"","permalink":"https://ste5022424.github.io/2019/03/07/Slack-Incoming-Webhooks/","excerpt":"","text":"Slack Incoming Webhooks1. 建立 Slack app App Name: 應用程式名稱Workspace: 選擇一個 Workspace ，如果沒有就建立一個 2.選擇 Incoming Webhooks 3. 將開關打開 4. 先在 slack 上面建立一個頻道 5. Add New Webhook to Workspace 6. 複製網址 7. 發送訊息 使用 Restlet Client - REST API Testing 來測試post channel:頻道名稱text:要發送的data 1234&#123; \"channel\":\"myhooktest\", \"text\": \"Hello, world.ipblock\"&#125; 8. 確認有收到訊息 參考 Incoming Webhooks","categories":[{"name":"Slack","slug":"Slack","permalink":"https://ste5022424.github.io/categories/Slack/"}],"tags":[{"name":"Slack","slug":"Slack","permalink":"https://ste5022424.github.io/tags/Slack/"},{"name":"Incoming Webhooks","slug":"Incoming-Webhooks","permalink":"https://ste5022424.github.io/tags/Incoming-Webhooks/"}]},{"title":"mac code.","slug":"mac-code","date":"2019-02-27T06:55:36.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2019/02/27/mac-code/","link":"","permalink":"https://ste5022424.github.io/2019/02/27/mac-code/","excerpt":"","text":"1&gt;shell command 參考 “code .” Not working in Command Line for Visual Code Studio on OSX/Mac","categories":[{"name":"mac","slug":"mac","permalink":"https://ste5022424.github.io/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://ste5022424.github.io/tags/mac/"}]},{"title":"Grafana 監控","slug":"Grafana 監控","date":"2019-02-25T03:50:40.000Z","updated":"2019-12-12T06:26:29.548Z","comments":true,"path":"2019/02/25/Grafana 監控/","link":"","permalink":"https://ste5022424.github.io/2019/02/25/Grafana 監控/","excerpt":"","text":"Grafana 監控influxdb1. Docker Run1docker run -d -p 8083:8083 -p 8086:8086 -e INFLUXDB_ADMIN_ENABLED=true --name influxdb --restart=always -v influxdb:/var/lib/influxdb influxdb:1.1 2. 進入 influxdb (http://YourHost:8083) 3. 建立一個 grafana 資料庫1CREATE DATABASE \"grafana\" 4. 檢查是否建立成功1SHOW DATABASES grafana1. Docker run1docker run -d -p 3000:3000 --link influxdb:influxdb --restart=always --name grafana grafana/grafana:4.6.2 2. 登入grafana http://YourHost:3000) 帳號跟密碼預設是 admin 3. Add data source!Add data source 3.1 Name Name 輸入 grafana 3.2 HTTP settings URL輸入 http://influxdb:8086 (influxdb為你的 containerau名稱) 3.3 InfluxDB Details Database 輸入gragana 設定完就可以看到 Grafana 與 InfluxDB 已經連結成功 Telegraftelegraf官網 1. 下載2. 設定 telegraf.conf 2.1. Input Plugins 使用 win_perf_counters 這個套件(官方預設套件) 2.2 設定 Output influxdb 3. 啟動服務1234D:cd D:\\telegraf\\telegraf.exe -config D:\\telegraf\\telegraf.conf --service installnet start telegraf 4. grafana 新增一個 dashborad 4.1 輸入 1902 1902 dashboards 4.2 選擇 grafana db 4.3 進入 grafana 就可以看到系統的資訊 參考 influxdb docker hub Grafana docker hub telegraf官網 telegraf git telegraf Input Plugins - win_perf_counters","categories":[{"name":"Grafana","slug":"Grafana","permalink":"https://ste5022424.github.io/categories/Grafana/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Grafana","slug":"Grafana","permalink":"https://ste5022424.github.io/tags/Grafana/"},{"name":"InfluxDb","slug":"InfluxDb","permalink":"https://ste5022424.github.io/tags/InfluxDb/"},{"name":"telegraf","slug":"telegraf","permalink":"https://ste5022424.github.io/tags/telegraf/"}]},{"title":"SonarQube Server pluin StyleCop","slug":"SonarQube-Server-pluin-StyleCop","date":"2019-01-18T05:56:52.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/01/18/SonarQube-Server-pluin-StyleCop/","link":"","permalink":"https://ste5022424.github.io/2019/01/18/SonarQube-Server-pluin-StyleCop/","excerpt":"","text":"SonarQube Server pluin SyleCop Pluin1. 下載外掛官網下載 指令下載1wget http://downloads.sonarsource.com/plugins/org/codehaus/sonar-plugins/stylecop/sonar-stylecop-plugin/1.1/sonar-stylecop-plugin-1.1.jar 2.下載到 /extensions/plugins 資料夾底下，然後重新啟動12docker restart sonarqubedocker logs sonarqube","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"},{"name":"SyleCop","slug":"SyleCop","permalink":"https://ste5022424.github.io/tags/SyleCop/"}]},{"title":"SonarQube Server on Docker","slug":"SonarQube-Server-on-Docker","date":"2019-01-15T08:34:30.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/01/15/SonarQube-Server-on-Docker/","link":"","permalink":"https://ste5022424.github.io/2019/01/15/SonarQube-Server-on-Docker/","excerpt":"","text":"SonarQube Server on Docker1. 建立持久層資料夾1mkdir -p -m 777 ./sonarqube &amp;&amp; mkdir -p -m 777 ./sonarqube/conf &amp;&amp; mkdir -p -m 777 ./sonarqube/data &amp;&amp; mkdir -p -m 777 ./sonarqube/logs &amp;&amp; mkdir -p -m 777 ./sonarqube/extensions 2. docker-compose.yml123456789101112131415161718192021222324252627282930version: &quot;3.5&quot;services: postgresql: container_name: &quot;postgresql&quot; image: &quot;postgres&quot; ports: - &quot;5432:5432&quot; volumes: - &quot;/postgresql:/var/lib/postgresql/data&quot; environment: - &quot;POSTGRES_USER=sonar&quot; - &quot;POSTGRES_PASSWORD=sonar&quot; restart: always sonarqube: container_name: &quot;sonarqube&quot; image: &quot;sonarqube:7.7-community&quot; ports: - &quot;9000:9000&quot; volumes: - &quot;/sonarqube/conf:/opt/sonarqube/conf&quot; - &quot;/sonarqube/data:/opt/sonarqube/data&quot; - &quot;/sonarqube/logs:/opt/sonarqube/logs&quot; - &quot;/sonarqube/extensions:/opt/sonarqube/extensions&quot; environment: - &quot;sonar.jdbc.username=sonar&quot; - &quot;sonar.jdbc.password=sonar&quot; - &quot;sonar.jdbc.url=jdbc:postgresql://postgresql/sonar&quot; links: - &quot;postgresql:postgresql&quot; restart: always ADserver 設定 設定LDAP Plugin团队环境：代码质量管理SonarQube安装 1. 將 sonar.properties 放置 SONARQUBE_HOME/conf/sonar.properties123456789101112131415# General Configuration# LDAP configurationsonar.security.realm=LDAPsonar.authenticator.createUsers=truesonar.security.savePassword=truesonar.security.updateUserAttributes=trueldap.url=ldap://YourAdServerldap.bindDn=bindDnldap.bindPassword=bindPassword# User Configurationldap.user.baseDn=baseDnldap.user.request=(&amp;(objectClass=user)(sAMAccountName=&#123;login&#125;)) #參考 sonarqube-postgres-docker.md postgres docker sonarqube docker","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://ste5022424.github.io/tags/docker-compose/"},{"name":"PostgreSql","slug":"PostgreSql","permalink":"https://ste5022424.github.io/tags/PostgreSql/"}]},{"title":"SonarQubeScanner & UnitTest 使用 Jenkins Pipeline","slug":"SonarQubeScanner-for-MSBuild-使用-Jenkins-Pipeline","date":"2019-01-15T07:55:17.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2019/01/15/SonarQubeScanner-for-MSBuild-使用-Jenkins-Pipeline/","link":"","permalink":"https://ste5022424.github.io/2019/01/15/SonarQubeScanner-for-MSBuild-使用-Jenkins-Pipeline/","excerpt":"","text":"SonarQubeScanner &amp; UnitTest 使用 Jenkins Pipeline 使用 Jenkins Plugin 可以參考這篇，此篇是使用 Pipeline 來實現 SonarQube 掃描 .net framework1. 下載 sonar-scanner-msbuild-4.4.2.1543-net462. 下載 Opencover Tool3. Pipeline1234567891011121314151617181920212223242526node &#123; VERSION = VersionNumber([projectStartDate: '2015-01-01', versionNumberString: '$&#123;YEARS_SINCE_PROJECT_START&#125;.$&#123;BUILD_MONTH&#125;.$&#123;BUILD_DAY&#125;.$&#123;BUILDS_TODAY&#125;', versionPrefix: '', worstResultForIncrement: 'NOT_BUILT']) TheJobName =\"$&#123;env.JOB_NAME&#125;\" stage('Sonarqube Scan Begin')&#123; echo \"Sonarqube Scan Begin Start\" bat \"D:\\\\tools\\\\sonar-scanner-msbuild-4.4.2.1543-net46\\\\SonarQube.Scanner.MSBuild.exe begin /k:$&#123;TheJobName&#125; /n:$&#123;TheJobNopame&#125; /v:$&#123;VERSION&#125; /d:sonar.exclusions=obj\\\\*,bin\\\\*,packages\\\\**,Properties\\\\*\" echo \"Sonarqube Scan Begin OK\" &#125; stage('Msbuild')&#123; echo \"Msbuild Start\" bat \"\\\"C:/Program Files (x86)/MSBuild/14.0/bin/amd64/msbuild.exe\\\" $&#123;TheJobName&#125;.sln /t:Rebuild /p:Configuration=Release\" echo \"Msbuild OK\" &#125; stage('OpenCover') &#123; echo \"OpenCover Start\" bat \"%LOCALAPPDATA%\\\\Apps\\\\OpenCover\\\\OpenCover.Console.exe -output:\\\"%CD%\\\\opencover.xml\\\" -register:user -target:\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TestWindow\\\\vstest.console.exe\\\" -targetargs:\\\"$&#123;TheJobName&#125;.Test\\\\bin\\\\Release \\\\$&#123;TheJobName&#125;.Test.dll \\\"/logger:trx\\\"\" echo \"OpenCover OK\" &#125; stage('Sonarqube Scan End')&#123; echo \"Sonarqube Scan End Start\" bat \"D:\\\\tools\\\\sonar-scanner-msbuild-4.4.2.1543-net46\\\\SonarQube.Scanner.MSBuild.exe end\" echo \"Sonarqube Scan End OK\" &#125;&#125; .Net Core1. 專案安裝 coverlet.msbuild，因為要產生 coverage.opencover.xm1dotnet add package coverlet.msbuild 2. jenkins Server 安裝 dotnet-sonarscanner1dotnet tool install --global dotnet-sonarscanner --version 4.3.1 3. pipeline1234567891011121314151617181920212223242526node &#123; VERSION = VersionNumber([projectStartDate: '2015-01-01', versionNumberString: '$&#123;YEARS_SINCE_PROJECT_START&#125;.$&#123;BUILD_MONTH&#125;.$&#123;BUILD_DAY&#125;.$&#123;BUILDS_TODAY&#125;', versionPrefix: '', worstResultForIncrement: 'NOT_BUILT']) TheJobName =\"$&#123;env.JOB_NAME&#125;\" stage('dotnet sonarscanner begin') &#123; echo \"dotnet sonarscanner begin Start\" bat \"dotnet sonarscanner begin /k:$&#123;TheJobName&#125; /n:$&#123;TheJobName&#125; /v:$&#123;VERSION&#125; /d:sonar.exclusions=obj\\\\*,bin\\\\*,packages\\\\**,Properties\\\\* /d:sonar.cs.opencover.reportsPaths=\\\"$&#123;TheJobName&#125;.Test\\\\coverage.opencover.xml\\\" \" echo \"dotnet sonarscanner begin OK\" &#125; stage('dotnet sonarscanner build') &#123; echo \"dotnet sonarscanner build Start\" bat \"dotnet build $&#123;TheJobName&#125;.sln -c Release -p:Version=$&#123;VERSION&#125;\" echo \"dotnet sonarscanner build OK\" &#125; stage('dotnet test') &#123; echo \"dotnet test Start\" bat \"dotnet test $&#123;TheJobName&#125;.Test --logger:trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover\" echo \"dotnet test OK\" &#125; stage(\"dotnet sonarscanner end\") &#123; echo \"dotnet sonarscanner end Start\" bat \"dotnet sonarscanner end\" echo \"dotnet sonarscanner end OK\" &#125;&#125; 參考 Analyzing with SonarScanner for MSBuild Code Coverage Results Import (C#, VB.NET) Cross platform code coverage arrives for .NET Core Collecting test coverage using Coverlet and SonarQube for a .net core project Code Coverage Results Import (C#, VB.NET) C# unit testing on a jenkins pipeline","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Pipeline","slug":"Pipeline","permalink":"https://ste5022424.github.io/tags/Pipeline/"},{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"}]},{"title":"ELK Stack","slug":"ELK Stack","date":"2019-01-09T09:00:00.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2019/01/09/ELK Stack/","link":"","permalink":"https://ste5022424.github.io/2019/01/09/ELK Stack/","excerpt":"","text":"ELK StackELK Stack 是 Elasticsearch、Logstash、Kibana這三個Open Source專案 Elasticsearch Elasticsearch是用於分佈式搜索和實時數據進行分析的平台 Kibana Kibana是讓Elasticsearch儲存的數據視覺化的平台 Logstash 日誌搜集工具 Beat Beats是一系列產品的統稱，屬於ElasticStack裡面收集數據的這一層 Docker Run ELK1. Install Dokcer1curl -fsSL https://get.docker.com/ | sh Dokcer 指令 -d 背景執行 –name 名稱 –restart=always 自動重啟 -p port -V 指定資料夾位置 2. Run elasticsearch2-1. Creat elasticsearch 持久層資料夾跟設定權限1mkdir -m 777 /data/elasticsearch 2-2. Run elasticsearch 之前要先設定 max_map_count1sudo sysctl -w vm.max_map_count=262144 2-3. docker run1docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch -v /data/elasticsearch:/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:6.5.4 Install Elasticsearch with Docker 2-4 Preview elasticsearch1curl 127.0.0.1:9200 3. Run kibana3-1 docker run1docker run -d --name kibana --restart=always -p 5601:5601 --link elasticsearch:elasticsearch docker.elastic.co/kibana/kibana:6.5.4 Run kibana with Docker Set kibana.yml 3-2 Preview kibana(http://yourhost:5601) 3-3 Check kibana status (http://yourhost:5601/status) 4. Run Logstash4-1 Run donetcoreapiRun Log 4-2 Creat logstash.confCreat in /tmp/logstash/pipeline/123cd ..cd /tmp/logstash/pipeline/vi logstash.conf logstash.conf123456789101112131415161718192021file &#123; path =&gt; &quot;/usr/share/logstash/Log/*&quot; type =&gt; &quot;file&quot; start_position =&gt; &quot;beginning&quot; &#125; &#125;filter &#123; grok &#123; match =&gt; [&quot;message&quot;, &quot;%&#123;TIMESTAMP_ISO8601:[@metadata][timestamp]&#125; %&#123;NUMBER:threadid&#125; %&#123;LOGLEVEL:loglevel&#125; %&#123;NOTSPACE:logger&#125; %&#123;GREEDYDATA:message&#125;&quot;] overwrite =&gt; [ &quot;message&quot; ] &#125;&#125;output &#123; elasticsearch &#123; hosts =&gt; [&quot;elasticsearch:9200&quot;] index =&gt; &quot;logstash-test&quot; &#125; stdout &#123; codec =&gt; rubydebug&#125;&#125; logstash pattern Grok filter plugin 4-3 docker run1docker run it ---name logstash --link elasticsearch:elasticsearch -v /tmp/logstash/pipeline:/usr/share/logstash/pipeline/ -v /tmp/Log/:/usr/share/logstash/Log/ docker.elastic.co/logstash/logstash:6.5.4 /tmp/Log/:/usr/share/logstash/Log/ → donetcoreapi log 共用至 logstash /tmp/logstash/pipeline:/usr/share/logstash/pipeline/ → 自定義 logstash.conf Configuring Logstash for Docker 4-4 Push to elasticsearchattach logstash1docker attach logstash 4-4 Set kibanaSet index Set Time Filter Discover 5. Filebeat 官網的架構圖可以知道 Filebeat 是一個搜集器，它可以把 log 蒐集起來之後往後面送 Integrating with Messaging Queuesedit 在Log量很大的情況下，會使用 MessagQueue 來減輕負擔，以下是官方網站的架構圖 filebeat 蒐集log後，推送到 kafka，logstash 訂閱 kafka，logstash 從 kafa 抓資料後，再將 log parser，然後再送到 elasticsearch ，最後再由 kibana 顯示資料 5.1 Docker run Filebeat Dockerfile 12345FROM docker.elastic.co/beats/filebeat:6.6.2COPY filebeat.yml /usr/share/filebeat/filebeat.ymlUSER rootRUN chown root:filebeat /usr/share/filebeat/filebeat.ymlUSER filebeat Configure the Logstash output 參考 installing-elastic-stack deploying-and-scaling 官方網站","categories":[{"name":"ELK Stack","slug":"ELK-Stack","permalink":"https://ste5022424.github.io/categories/ELK-Stack/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"ELK Stack","slug":"ELK-Stack","permalink":"https://ste5022424.github.io/tags/ELK-Stack/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://ste5022424.github.io/tags/Elasticsearch/"},{"name":"Kibana","slug":"Kibana","permalink":"https://ste5022424.github.io/tags/Kibana/"},{"name":"Logstash","slug":"Logstash","permalink":"https://ste5022424.github.io/tags/Logstash/"}]},{"title":".Net Core Nlog","slug":"Net-Core-Nlog","date":"2019-01-04T06:26:39.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2019/01/04/Net-Core-Nlog/","link":"","permalink":"https://ste5022424.github.io/2019/01/04/Net-Core-Nlog/","excerpt":"","text":".Net Core Nlog1. 用之前的webapi範例來實作2. 安裝 Nlog1Install-Package NLog.Web.AspNetCore -Version 4.7.0 3. 新增 nlog.config 4. 設定相關檔案nlog 設定可以看官網 nlog.config 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-ins tance&quot; autoReload=&quot;true&quot; internalLogLevel=&quot;info&quot; internalLogFile=&quot;c:\\temp\\internal-nlog.txt&quot;&gt; &lt;!-- enable asp.net core layout renderers --&gt; &lt;extensions&gt; &lt;add assembly=&quot;NLog.Web.AspNetCore&quot; /&gt; &lt;/extensions&gt; &lt;!-- the targets to write to --&gt; &lt;targets&gt; &lt;target xsi:type=&quot;File&quot; name=&quot;file&quot; encoding=&quot;utf-8&quot; layout=&quot;$&#123;date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff&#125; $&#123;threadid&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;logger&#125; $&#123;message&#125; $&#123;exception:format=tostring&#125;&quot; fileName=&quot;D:\\Log\\donetcore.log&quot; archiveFileName=&quot;D:\\Log\\donetcore.&#123;#&#125;.log&quot; archiveNumbering=&quot;Date&quot; archiveEvery=&quot;Hour&quot; archiveDateFormat=&quot;yyyyMMdd-HH&quot; maxArchiveFiles=&quot;720&quot; /&gt; &lt;target xsi:type=&quot;File&quot; name=&quot;filelinux&quot; encoding=&quot;utf-8&quot; layout=&quot;$&#123;date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff&#125; $&#123;threadid&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;logger&#125; $&#123;message&#125; $&#123;exception:format=tostring&#125;&quot; fileName=&quot;Log/donetcore.log&quot; archiveFileName=&quot;Log/donetcore.&#123;#&#125;.log&quot; archiveNumbering=&quot;Date&quot; archiveEvery=&quot;Hour&quot; archiveDateFormat=&quot;yyyyMMdd-HH&quot; maxArchiveFiles=&quot;720&quot; /&gt; &lt;/targets&gt; &lt;rules&gt; &lt;!--Skip non-critical Microsoft logs and so log only own logs--&gt; &lt;logger name=&quot;Microsoft.*&quot; maxLevel=&quot;Info&quot; final=&quot;true&quot; /&gt; &lt;!--&lt;logger name=&quot;*&quot; minlevel=&quot;Info&quot; writeTo=&quot;filelinux&quot; /&gt;--&gt; &lt;logger name=&quot;*&quot; minlevel=&quot;Info&quot; writeTo=&quot;file&quot; /&gt; &lt;/rules&gt;&lt;/nlog&gt; program.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore;using Microsoft.AspNetCore.Hosting;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.Logging;using NLog.Web;namespace donetcore&#123; public class Program &#123; public static void Main(string[] args) &#123; // NLog: setup the logger first to catch all errors var logger = NLog.Web.NLogBuilder.ConfigureNLog(&quot;nlog.config&quot;).GetCurrentClassLogger(); try &#123; logger.Debug(&quot;init main&quot;); CreateWebHostBuilder(args).Build().Run(); &#125; catch (Exception ex) &#123; //NLog: catch setup errors logger.Error(ex, &quot;Stopped program because of exception&quot;); throw; &#125; finally &#123; // Ensure to flush and stop internal timers/threads before application-exit (Avoid segmentation fault on Linux) NLog.LogManager.Shutdown(); &#125; &#125; public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt; WebHost.CreateDefaultBuilder(args) .UseStartup&lt;Startup&gt;() .ConfigureLogging(logging =&gt; &#123; logging.ClearProviders(); logging.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); &#125;) .UseNLog(); // NLog: setup NLog for Dependency injection &#125;&#125; appsettings.json 123456789&#123; &quot;Logging&quot;: &#123; &quot;LogLevel&quot;: &#123; &quot;Default&quot;: &quot;Trace&quot;, &quot;Microsoft&quot;: &quot;Information&quot; &#125; &#125;, &quot;AllowedHosts&quot;: &quot;*&quot;&#125; 5. 程式寫 log1234567891011121314151617181920212223242526272829using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Logging;namespace donetcore.Controllers&#123; [Route(&quot;api/[controller]&quot;)] [ApiController] public class ValuesController : ControllerBase &#123; private readonly ILogger&lt;ValuesController&gt; _logger; public ValuesController(ILogger&lt;ValuesController&gt; logger) &#123; _logger = logger; &#125; // GET api/values [HttpGet] public ActionResult&lt;IEnumerable&lt;string&gt;&gt; Get() &#123; this._logger.LogInformation(&quot;.net core api 測試&quot;); return new string[] &#123; &quot;value1&quot;, &quot;value2&quot; &#125;; &#125; &#125;&#125; 6. Run 專案並檢查 log 是否有寫成功 Run docker in linux1. 更改 nlog.config 設定 nlog.config 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; autoReload=&quot;true&quot; internalLogLevel=&quot;info&quot; internalLogFile=&quot;c:\\temp\\internal-nlog.txt&quot;&gt; &lt;!-- enable asp.net core layout renderers --&gt; &lt;extensions&gt; &lt;add assembly=&quot;NLog.Web.AspNetCore&quot; /&gt; &lt;/extensions&gt; &lt;!-- the targets to write to --&gt; &lt;targets&gt; &lt;!--&lt;target xsi:type=&quot;File&quot; name=&quot;file&quot; encoding=&quot;utf-8&quot; layout=&quot;$&#123;date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff&#125; $&#123;threadid&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;logger&#125; $&#123;message&#125; $&#123;exception:format=tostring&#125;&quot; fileName=&quot;D:\\Log\\donetcore.log&quot; archiveFileName=&quot;D:\\Log\\donetcore.&#123;#&#125;.log&quot; archiveNumbering=&quot;Date&quot; archiveEvery=&quot;Hour&quot; archiveDateFormat=&quot;yyyyMMdd-HH&quot; maxArchiveFiles=&quot;720&quot; /&gt;--&gt; &lt;target xsi:type=&quot;File&quot; name=&quot;filelinux&quot; encoding=&quot;utf-8&quot; layout=&quot;$&#123;date:universalTime=true:format=yyyy-MM-dd HH\\:mm\\:ss.fff&#125; $&#123;threadid&#125; $&#123;uppercase:$&#123;level&#125;&#125; $&#123;logger&#125; $&#123;message&#125; $&#123;exception:format=tostring&#125;&quot; fileName=&quot;Log/donetcore.log&quot; archiveFileName=&quot;Log/donetcore.&#123;#&#125;.log&quot; archiveNumbering=&quot;Date&quot; archiveEvery=&quot;Hour&quot; archiveDateFormat=&quot;yyyyMMdd-HH&quot; maxArchiveFiles=&quot;720&quot; /&gt; &lt;/targets&gt; &lt;rules&gt; &lt;!--Skip non-critical Microsoft logs and so log only own logs--&gt; &lt;logger name=&quot;Microsoft.*&quot; maxLevel=&quot;Info&quot; final=&quot;true&quot; /&gt; &lt;logger name=&quot;*&quot; minlevel=&quot;Info&quot; writeTo=&quot;filelinux&quot; /&gt; &lt;!--&lt;logger name=&quot;*&quot; minlevel=&quot;Info&quot; writeTo=&quot;file&quot; /&gt;--&gt; &lt;/rules&gt;&lt;/nlog&gt; 2. build docker image linux 建置 .net core 可以參考這篇 1docker build -t dotnetcoreapi:v2 . 3. docker run1docker run -d -p 8181:80 --name netcorenlog -v /tmp/Log:/app/Log dotnetcoreapi:v2 如果要進入docker內，可以使用 exec 1docker exec -ti netcorenlog bash 4. 執行 5. 檢查宿主就可以看到 log已經共享出來了 範例檔案 參考 Getting started with ASP.NET Core 2 nlog設定","categories":[{"name":".net core","slug":"net-core","permalink":"https://ste5022424.github.io/categories/net-core/"}],"tags":[{"name":".Net Core","slug":"Net-Core","permalink":"https://ste5022424.github.io/tags/Net-Core/"},{"name":"Nlog","slug":"Nlog","permalink":"https://ste5022424.github.io/tags/Nlog/"}]},{"title":"GCP K8s Quickstart","slug":"GCP K8s Quickstart","date":"2018-12-28T07:19:04.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/12/28/GCP K8s Quickstart/","link":"","permalink":"https://ste5022424.github.io/2018/12/28/GCP K8s Quickstart/","excerpt":"","text":"GCP K8s Quickstart1. 安裝 gcloud GCP Container Registry image安裝Cloud SDK(Linux)快速入門 2. Creating a GKE cluster1./gcloud/google-cloud-sdk/bin/gcloud container clusters create [CLUSTER_NAME] 3. 安裝 kubectl1./gcloud/google-cloud-sdk/bin/gcloud components install kubectl 4. kubectl run Container Registry4.1 Build Docker image .net core webapi 建立可以參考這篇.net core webapi 1docker build -t gcr.io/[your-projectid]/netcorewebapi:v1 4.2 Push image to GCR1docker push gcr.io/[your-projectid]/netcorewebapi:v1 4.3 執行服務1kubectl run netcorewebapi --image gcr.io/[your-projectid]/netcorewebapi:v1 --port 80 4.4. 公開 k8s 容器1kubectl expose deployment netcorewebapi --type LoadBalancer --port 80 --target-port 80 4.5. 取得服務的資訊1kubectl get service netcorewebapi 4.6 預覽 參考 K8S Quickstart","categories":[{"name":"k8s","slug":"k8s","permalink":"https://ste5022424.github.io/categories/k8s/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"k8s","slug":"k8s","permalink":"https://ste5022424.github.io/tags/k8s/"},{"name":"GCP","slug":"GCP","permalink":"https://ste5022424.github.io/tags/GCP/"}]},{"title":".Net Core SKD For Linux","slug":"Net-Core-SKD-For-Linux","date":"2018-12-28T04:02:10.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2018/12/28/Net-Core-SKD-For-Linux/","link":"","permalink":"https://ste5022424.github.io/2018/12/28/Net-Core-SKD-For-Linux/","excerpt":"","text":".Net Core SKD For Linux1234567891011cd tmp/mkdir netcoresdk2.1cd netcoresdk2.1wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.debsudo dpkg -i packages-microsoft-prod.debsudo apt-get install apt-transport-httpssudo apt-get updatesudo apt-get install dotnet-sdk-2.1 參考 https://dotnet.microsoft.com/download/dotnet-core/2.1 Install .NET Core 2.1 SDK on Linux Ubuntu 16.04 x64","categories":[{"name":".net core","slug":"net-core","permalink":"https://ste5022424.github.io/categories/net-core/"}],"tags":[{"name":".net core","slug":"net-core","permalink":"https://ste5022424.github.io/tags/net-core/"},{"name":"Linux build","slug":"Linux-build","permalink":"https://ste5022424.github.io/tags/Linux-build/"}]},{"title":".Net Core CLI run Docker Web API","slug":"Net-Core-CLI","date":"2018-12-28T02:19:04.000Z","updated":"2019-12-12T06:26:29.550Z","comments":true,"path":"2018/12/28/Net-Core-CLI/","link":"","permalink":"https://ste5022424.github.io/2018/12/28/Net-Core-CLI/","excerpt":"","text":"先下載 .net core sdk .Net Core CLI run Docker Web API1dotnet new webapi -lang C# 執行站台1dotnet run 打包 Docker Image 並執行 Docker Web APICreat Dockerfile1echo Dockerfile &gt; Dockerfile 把官方網站的範例貼上去 12345678910111213141516FROM microsoft/dotnet:sdk as build-envWORKDIR /app# Copy csproj and restore as distinct layersCOPY *.csproj ./RUN dotnet restore# Copy everything else and buildCOPY . ./RUN dotnet publish -c Release -o out# Build runtime imageFROM microsoft/dotnet:aspnetcore-runtimeWORKDIR /appCOPY --from=build-env /app/out .ENTRYPOINT [\"dotnet\", \"donetcore.dll\"] Docker build1docker build -t apitest:v1 . Docker run1docker run -d --name apitest -p 90:80 apitest:v1 瀏覽 http://127.0.0.1:90/api/values 範例檔案 參考 Dockerize a .NET Core application Dockerize a .NET Core application","categories":[{"name":".net core","slug":"net-core","permalink":"https://ste5022424.github.io/categories/net-core/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":".net core","slug":"net-core","permalink":"https://ste5022424.github.io/tags/net-core/"},{"name":".net core cli","slug":"net-core-cli","permalink":"https://ste5022424.github.io/tags/net-core-cli/"},{"name":"web api","slug":"web-api","permalink":"https://ste5022424.github.io/tags/web-api/"}]},{"title":"GCP Container Registry","slug":"GCP-Container-Registry","date":"2018-12-26T06:48:55.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/12/26/GCP-Container-Registry/","link":"","permalink":"https://ste5022424.github.io/2018/12/26/GCP-Container-Registry/","excerpt":"","text":"GCP Container Registry1. 確認帳號已經啟用付費功能2. 開啟API服務 3. 安裝 Cloud SDK3.1 下載 SDK123mkdir gcloudcd gcloudwget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-218.0.0-linux-x86_64.tar.gz 3.2 解壓縮12gunzip google-cloud-sdk-218.0.0-linux-x86_64.tar.gztar xvf google-cloud-sdk-218.0.0-linux-x86_64.tar 這時候就可以看到 google-cloud-sdk/ 這個資料夾 3.3 執行指令12cd google-cloud-sdk/./install.sh 3.4 init SDK12cd bin./gcloud init 把網址貼到網頁上面 取得 verification code 4. Build image4.1.1 建立 Dockerfile123mkdir gcpimagetestcd gcpimagetest/vi Dockerfile 4.1.2 將官方的範例貼上去1234567891011121314# The Dockerfile defines the image&apos;s environment# Import Python runtime and set up working directoryFROM python:2.7-alpineWORKDIR /appADD . /app# Install any necessary dependenciesRUN pip install -r ./requirements.txt# Open port 80 for serving the webpageEXPOSE 80# Run app.py when the container launchesCMD [&quot;python&quot;, &quot;app.py&quot;] 4.1.3 建立 requirements.txt12# This file defines the image&apos;s dependenciesFlask 4.1.4 建立 app.py1234567891011121314# The Docker image contains the following codefrom flask import Flaskimport osimport socketapp = Flask(__name__)@app.route(&quot;/&quot;)def hello(): html = &quot;&lt;h3&gt;Hello, World!&lt;/h3&gt;&quot; return htmlif __name__ == &quot;__main__&quot;: app.run(host=&apos;0.0.0.0&apos;, port=80) 4.2 建立 image1docker build -t quickstart-image . gcloud auth 設定(只要設定一次就可以了) 1./gcloud auth configure-docker 4.3 tag image1docker tag quickstart-image gcr.io/[PROJECT-ID]/quickstart-image:tag1 5. Push Image5.1 push 前要安裝憑證 5.2 建立 docker-credential-gcr1vi docker-credential-gcr 5.3 輸入以下憑證1234567VERSION=1.5.0OS=linux # or &quot;darwin&quot; for OSX, &quot;windows&quot; for Windows.ARCH=amd64 # or &quot;386&quot; for 32-bit OSscurl -fsSL &quot;https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v$&#123;VERSION&#125;/docker-credential-gcr_$&#123;OS&#125;_$&#123;ARCH&#125;-$&#123;VERSION&#125;.tar.gz&quot; \\ | tar xz --to-stdout ./docker-credential-gcr \\ &gt; /usr/bin/docker-credential-gcr &amp;&amp; chmod +x /usr/bin/docker-credential-gcr 5.4 設定憑證 記得要回到目錄的最上層才可以設定 1./gcloud/google-cloud-sdk/bin/gcloud components install docker-credential-gcr 成功畫面 5.5 提升 docker-credential-gcr 文件權限 並執行 docker-credential-gcr設定12chmod 777 docker-credential-gcrdocker-credential-gcr configure-docker 5.6 設定完成之後就可以 推送到 gcp 上面了1docker push gcr.io/[PROJECT-ID]/quickstart-imag:tag1 6. Pull Image1docker pull gcr.io/[PROJECT-ID]/quickstart-image:tag1 參考 官方說明文件 Authentication","categories":[{"name":"GCP Container Registry","slug":"GCP-Container-Registry","permalink":"https://ste5022424.github.io/categories/GCP-Container-Registry/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"GCP","slug":"GCP","permalink":"https://ste5022424.github.io/tags/GCP/"},{"name":"GCP Registry","slug":"GCP-Registry","permalink":"https://ste5022424.github.io/tags/GCP-Registry/"},{"name":"Gcloud","slug":"Gcloud","permalink":"https://ste5022424.github.io/tags/Gcloud/"}]},{"title":"mac ll","slug":"mac-ll","date":"2018-12-26T03:54:12.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2018/12/26/mac-ll/","link":"","permalink":"https://ste5022424.github.io/2018/12/26/mac-ll/","excerpt":"","text":"新增一個 .bash_profile/Users/YOUR_USER_NAME/.bash_profile 1alias ll='ls -lG' 參考 How can I install the ll command on Mac OS X?","categories":[{"name":"mac","slug":"mac","permalink":"https://ste5022424.github.io/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://ste5022424.github.io/tags/mac/"}]},{"title":"Gitea","slug":"Gitea","date":"2018-12-25T03:28:29.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2018/12/25/Gitea/","link":"","permalink":"https://ste5022424.github.io/2018/12/25/Gitea/","excerpt":"","text":"GiteaDocker run1. 建立儲存庫資料夾1sudo mkdir -p /var/lib/gitea 2. Docker run12docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest 3. 預覽 Yourhost:10080 4.進入安裝 設定 Gitea資料庫 可以選擇多種資料庫類型 一般設定 SSH 伺服器域名 可以設定主機的DomainGitea 基本 URL 可以設定主機的Domain 或者IP 可選設定 &gt; 管理員帳號設定 設定管理員帳號 完成之後就可以看到 git 的畫面了 參考 Gitea Gitea Docker","categories":[{"name":"Gitea","slug":"Gitea","permalink":"https://ste5022424.github.io/categories/Gitea/"}],"tags":[{"name":"Gitea","slug":"Gitea","permalink":"https://ste5022424.github.io/tags/Gitea/"},{"name":"Git","slug":"Git","permalink":"https://ste5022424.github.io/tags/Git/"}]},{"title":"redis lua script","slug":"redis-lua-script","date":"2018-12-24T10:30:29.000Z","updated":"2019-12-12T06:26:29.556Z","comments":true,"path":"2018/12/24/redis-lua-script/","link":"","permalink":"https://ste5022424.github.io/2018/12/24/redis-lua-script/","excerpt":"","text":"","categories":[{"name":"redis","slug":"redis","permalink":"https://ste5022424.github.io/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://ste5022424.github.io/tags/redis/"},{"name":"redis lua script","slug":"redis-lua-script","permalink":"https://ste5022424.github.io/tags/redis-lua-script/"}]},{"title":"Jenkins Pipeline Parallel 平行處理","slug":"Jenkins-Pipeline-Parallel-平行處理","date":"2018-12-21T07:32:46.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2018/12/21/Jenkins-Pipeline-Parallel-平行處理/","link":"","permalink":"https://ste5022424.github.io/2018/12/21/Jenkins-Pipeline-Parallel-平行處理/","excerpt":"","text":"Jenkins Pipeline Parallel 平行處理將 parallel 語法設定在專案上 parallel 範例如下 12345678910111213141516171819202122232425node &#123; stage(&apos;Git Clone&apos;) &#123; echo &quot;Git Clone OK&quot; &#125; stage(&apos;Nuget Restore&apos;) &#123; echo &quot;Nuget Restore OK&quot; &#125; stage(&apos;Msbuild&apos;) &#123; echo &quot;Msbuild OK&quot; &#125; parallel ( &quot;Push&quot;: &#123; stage(&quot;Push Server&quot;) &#123; echo &quot;Push OK&quot; &#125; &#125;, &quot;Scan Code&quot;: &#123; stage(&quot;Scan Code&quot;) &#123; echo &quot; Scan Code OK&quot; &#125; &#125; )&#125; Jenkins 上可以看到建置過程 Blue Ocean 就可以看到 建置過程是有水平執行 要看到Blue Ocean圖形可以參考這篇安裝 Jenkins Pipeline Blue Ocean 參考 What’s New in Declarative Pipeline 1.3: Sequential Stages","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Pipeline Parallel","slug":"Pipeline-Parallel","permalink":"https://ste5022424.github.io/tags/Pipeline-Parallel/"}]},{"title":"Jenkins Pipeline Blue Ocean","slug":"Jenkins-Pipeline-Blue-Ocean","date":"2018-12-20T08:21:16.000Z","updated":"2019-12-12T06:26:29.548Z","comments":true,"path":"2018/12/20/Jenkins-Pipeline-Blue-Ocean/","link":"","permalink":"https://ste5022424.github.io/2018/12/20/Jenkins-Pipeline-Blue-Ocean/","excerpt":"","text":"Jenkins Pipeline Blue Ocean搜尋 Blue Ocean 並安裝 安裝完成後就可以看到 Open Blue Ocean Open Blue Ocean 點進去可以看到執行的狀態 勾勾點進去就可以可以看到圖形化的 Pipeline 參考 Jenkins Pipeline Blue Ocean [Day 27] Pipeline 專案 (下) Create a Pipeline in Blue Ocean","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Pipeline","slug":"Pipeline","permalink":"https://ste5022424.github.io/tags/Pipeline/"},{"name":"Blue Ocean","slug":"Blue-Ocean","permalink":"https://ste5022424.github.io/tags/Blue-Ocean/"}]},{"title":"Docker compose Run Redis","slug":"Docker-compose-Run-Redis","date":"2018-12-12T08:32:46.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/12/12/Docker-compose-Run-Redis/","link":"","permalink":"https://ste5022424.github.io/2018/12/12/Docker-compose-Run-Redis/","excerpt":"","text":"Docker compose Run Redis建立資料夾 及 Dockerfile123mkdir composerediscd composeredisvi docker-compose.yml docker-compose.yml12345678version: \"3\"services: redis: image: redis ports: - \"1233:6379\" volumes: - \"./tmp/redis:/data\" docker-compse run redis1docker-compose up -d docekr ps -a 連線測試123telnet 127.0.0.1 1233set mykey 999get mykey","categories":[{"name":"Redis","slug":"Redis","permalink":"https://ste5022424.github.io/categories/Redis/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Docker compose","slug":"Docker-compose","permalink":"https://ste5022424.github.io/tags/Docker-compose/"},{"name":"Redis","slug":"Redis","permalink":"https://ste5022424.github.io/tags/Redis/"},{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://ste5022424.github.io/tags/Visual-Studio-Code/"}]},{"title":"Docker compose","slug":"Docker-compose","date":"2018-12-12T06:33:21.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/12/12/Docker-compose/","link":"","permalink":"https://ste5022424.github.io/2018/12/12/Docker-compose/","excerpt":"","text":"Docker compose 安裝 Docker Compose 12345sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composedocker-compose --version 安裝完成就可以看版本資訊 Step 1: Setup1.建立 composetest 資料夾12mkdir composetestcd composetest 2.建立 app.py1touch app.py 2.1.編輯 app.py1vi app.py Vi指令 i 編輯ESC 結束編輯:wq 存檔並離開 2.2輸入以下內容1234567891011121314151617181920212223242526272829import timeimport redisfrom flask import Flaskapp = Flask(__name__)cache = redis.Redis(host='redis', port=6379)def get_hit_count(): retries = 5 while True: try: return cache.incr('hits') except redis.exceptions.ConnectionError as exc: if retries == 0: raise exc retries -= 1 time.sleep(0.5)@app.route('/')def hello(): count = get_hit_count() return 'Hello World! I have been seen &#123;&#125; times.\\n'.format(count)if __name__ == \"__main__\": app.run(host=\"0.0.0.0\", debug=True) 3. 建立 requirements.txt1touch requirements.txt 3.1. 編輯 requirements.txt1vi requirements.txt 3.2. 輸入文字12flaskredis Step 2: Create a Dockerfile1. 建立 touch Dockerfile1touch Dockerfile 1.1. 輸入內容12345FROM python:3.4-alpineADD . /codeWORKDIR /codeRUN pip install -r requirements.txtCMD [&quot;python&quot;, &quot;app.py&quot;] Step 3: Define services in a Compose file1. 建立 docker-compose.yml1touch docker-compose.yml 1.1. 輸入內容12345678910version: &apos;3&apos;services: web: build: . ports: - &quot;5000:5000&quot; redis: image: &quot;redis&quot; ports: - &quot;6379:6379&quot; 這時候 檔案結構會是這樣 Step 4: Build and run your app with Compose1docker-compose up -d 這時後就可以看到剛剛 Run 的 python 網站 Step 5: Edit the Compose file to add a bind mount123456789101112version: &apos;3.1&apos;services: web: build: . ports: - &quot;5000:5000&quot; volumes: - .:/code redis: image: &quot;redis&quot; ports: - &quot;6379:6379&quot; 5.1. 再重新 build 一次就可以看到剛剛修改的內容1docker-compose up -d docker-compose 其他指令 背景執行 docker-compose 1docker-compose up -d 檢查 docker-compose 容器狀態 1docker-compose ps 參考 Docker Compose Get started with Docker Compose","categories":[{"name":"Docker compose","slug":"Docker-compose","permalink":"https://ste5022424.github.io/categories/Docker-compose/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Docker compose","slug":"Docker-compose","permalink":"https://ste5022424.github.io/tags/Docker-compose/"}]},{"title":"GRPC C# Quickstart","slug":"GRPC-C-Quickstart","date":"2018-12-11T06:15:11.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2018/12/11/GRPC-C-Quickstart/","link":"","permalink":"https://ste5022424.github.io/2018/12/11/GRPC-C-Quickstart/","excerpt":"","text":"GRPC QuickstartClone GRPC1git clone -b v1.17.0 https://github.com/grpc/grpc Build12cd D:\\GRPC\\grpc\\examples\\csharp\\Helloworlddotnet build Greeter.sln Run a gRPC application Server 12cd D:\\GRPC\\grpc\\examples\\csharp\\Helloworld\\GreeterServer&gt; dotnet run -f netcoreapp2.1 Client 12cd D:\\GRPC\\grpc\\examples\\csharp\\Helloworld\\GreeterClientdotnet run -f netcoreapp2.1 參考 C# Quickstart gRPC 官方文檔中文版 V1.0 https://github.com/grpc/grpc","categories":[{"name":"GRPC","slug":"GRPC","permalink":"https://ste5022424.github.io/categories/GRPC/"}],"tags":[{"name":"GRPC","slug":"GRPC","permalink":"https://ste5022424.github.io/tags/GRPC/"}]},{"title":"Protocol buffers","slug":"Protocol-buffers","date":"2018-12-11T05:59:36.000Z","updated":"2019-12-12T06:26:29.551Z","comments":true,"path":"2018/12/11/Protocol-buffers/","link":"","permalink":"https://ste5022424.github.io/2018/12/11/Protocol-buffers/","excerpt":"","text":"Protocol buffersProtocol Buffers是一種序列化資料結構的協定。對於透過管線(pipeline)或儲存資料進行通訊的程式開發上是很有用的。這個方法包含一個埠描述語言，描述一些資料結構，並提供程式工具根據這些描述產生程式碼，用於將這些資料結構產生或解析資料串流。參考 Protocol buffers Protocol Buffers wiki","categories":[{"name":"Protocol buffers","slug":"Protocol-buffers","permalink":"https://ste5022424.github.io/categories/Protocol-buffers/"}],"tags":[{"name":"Protocol buffers","slug":"Protocol-buffers","permalink":"https://ste5022424.github.io/tags/Protocol-buffers/"}]},{"title":"Docker Nginx Reverse Proxy","slug":"Docker Nginx Reverse Proxy","date":"2018-12-10T06:55:44.000Z","updated":"2019-12-12T06:26:29.542Z","comments":true,"path":"2018/12/10/Docker Nginx Reverse Proxy/","link":"","permalink":"https://ste5022424.github.io/2018/12/10/Docker Nginx Reverse Proxy/","excerpt":"","text":"Docker Nginx Reverse Proxy1. 建立 nginx_reverseproxy 資料夾12mkdir nginx_reverseproxycd ngixn_reverseproxy/ 2. 建立 nginx.conf1touch nginx.conf 3. 編輯 nginx.conf1vi nginx.conf 輸入 i可以進入編輯模式輸入 ESC離開編輯模式，在輸入 “:wq”存檔刪除資料夾可以使用 “rm -r 資料夾名稱” 4. 設定 nginx.conf12345678910111213events &#123;&#125;http &#123;server &#123; listen 80; server_name www.google.com; location / &#123; proxy_pass http://www.google.com; &#125;&#125;&#125; 5. Run Docker Nginx1docker run --name proxy_nginx -v /nginx_reverseproxy/nginx.conf:/etc/nginx/nginx.conf:ro -p 8088:80 -d nginx 6. 瀏覽 Yourhost:8088 使用 Dockerfile 建立 image &amp; docker run container1. Dockerfile12FROM nginxADD nginx.conf /etc/nginx/nginx.conf 2. build1docker build -t nginx_dockerfile:v1 . 3. docker run1docker run --name nginx_dockerfile -p 8089:80 -d nginx_dockerfile:v1 參考 [ DevOps ] Nginx 設定 Proxy Server 及 Load balance NGINX Reverse Proxy","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://ste5022424.github.io/categories/Nginx/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Nginx","slug":"Nginx","permalink":"https://ste5022424.github.io/tags/Nginx/"}]},{"title":"Docker run Nginx","slug":"Docker-run-Nginx","date":"2018-12-07T07:24:06.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/12/07/Docker-run-Nginx/","link":"","permalink":"https://ste5022424.github.io/2018/12/07/Docker-run-Nginx/","excerpt":"","text":"Docker run NginxRun Nginx1docker run -d -p 1324:80 --name mynginx nginx Using Dockerfile Create Nginx &amp; Run NginxCreat Docker file Dockerfile 12FROM nginxCOPY ./index.html /usr/share/nginx/html index.html 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello Nginx&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; build docker imgage1docker build -t mynginx:1 . Run mynginx1docker run -d --name mynginx -p 1234:80 mynginx:1 參考 https://hub.docker.com/_/nginx/","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://ste5022424.github.io/categories/Nginx/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"Nginx","slug":"Nginx","permalink":"https://ste5022424.github.io/tags/Nginx/"}]},{"title":"Python redis","slug":"Python-redis","date":"2018-12-06T02:20:32.000Z","updated":"2019-12-12T06:26:29.552Z","comments":true,"path":"2018/12/06/Python-redis/","link":"","permalink":"https://ste5022424.github.io/2018/12/06/Python-redis/","excerpt":"","text":"Python redis1234import redisr = redis.Redis(host=&apos;localhost&apos;, port=6379, db=0)r.set(&apos;foo&apos;, &apos;bar123123132&apos;)print(r.get(&apos;foo&apos;)) 參考 https://pypi.org/project/redis/","categories":[{"name":"python","slug":"python","permalink":"https://ste5022424.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://ste5022424.github.io/tags/python/"},{"name":"redis","slug":"redis","permalink":"https://ste5022424.github.io/tags/redis/"}]},{"title":"Gogs Git webhook","slug":"Gogs-Git-webhook","date":"2018-11-28T05:46:39.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2018/11/28/Gogs-Git-webhook/","link":"","permalink":"https://ste5022424.github.io/2018/11/28/Gogs-Git-webhook/","excerpt":"","text":"Git Commit 後通知Jenkins 建置點選倉庫設定 管理 Web 鉤子 添加鉤子 選 Gogs 推送地址 &amp; 密鑰本文(自行定義) 1http://Jenkins位置/gogs-webhook/?job=專案名稱 Jenkins 記得安裝 Gogs Webhook Plugin 專案記得設定剛才的密鑰本文","categories":[{"name":"Gogs","slug":"Gogs","permalink":"https://ste5022424.github.io/categories/Gogs/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Git","slug":"Git","permalink":"https://ste5022424.github.io/tags/Git/"},{"name":"Gogs","slug":"Gogs","permalink":"https://ste5022424.github.io/tags/Gogs/"},{"name":"webhook","slug":"webhook","permalink":"https://ste5022424.github.io/tags/webhook/"}]},{"title":"Jenkins Build .Net Core With Pipeline","slug":"Jenkins-Build-Net-Core-With-Pipeline","date":"2018-11-27T10:45:24.000Z","updated":"2019-12-12T06:26:29.548Z","comments":true,"path":"2018/11/27/Jenkins-Build-Net-Core-With-Pipeline/","link":"","permalink":"https://ste5022424.github.io/2018/11/27/Jenkins-Build-Net-Core-With-Pipeline/","excerpt":"","text":"","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"}]},{"title":"Jenkins Pipeline","slug":"Jenkins-pipeline","date":"2018-11-23T03:21:54.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2018/11/23/Jenkins-pipeline/","link":"","permalink":"https://ste5022424.github.io/2018/11/23/Jenkins-pipeline/","excerpt":"","text":"Jenkins Pipeline可以將部屬流程視覺化來顯示，請看官方的這張圖 新增作業 選擇 Pipeline 專案 建立成功之後就可以在 script 的地方撰寫 Pipeline Script 有分兩種方式 Pipeline Script 直接寫在 jenkins Script 上面Pipeline script from SCM 可以使用版控來管理 Pipeline script Pipeline Script 1234567891011121314node &#123; stage('Clone') &#123; echo 'Clone' &#125; stage('Build') &#123; echo 'Build' &#125; stage('Test') &#123; echo 'Teset' &#125; stage('Deploy') &#123; echo 'Deploy' &#125;&#125; 馬上建置 這時候就可以看到 建置的步驟已經視覺化顯示了 Console Output 這裡可以看到剛剛寫的執行log Pipeline script from SCM Repository URL 在github上面建立一個專案 新增一個檔案叫 Jenkinsfile 檔案名稱要不一樣可以再 Script Path 設定 把剛剛寫的code 貼上去，並且 commit 第二次建置也成功了 這時候看一下 Console Output，確認就是從 git 上面取下來執行的 Pipeline Syntax 產生語法的小工具 選擇 bat: Windows Batch Script 按下 Generate Pipeline Script，會產生語法，可以直接在 pipeline 中使用 pipeline 是使用 Groovy語言來撰寫，可以參考 Groovy’s syntax 參考 [Pipeline - Jenkins]https://jenkins.io/doc/book/pipeline/ [DevOps自動化-6] Jenkins持續整合、發布 [持續交付實踐] pipeline：pipeline使用之快速入門","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Pipeline","slug":"Pipeline","permalink":"https://ste5022424.github.io/tags/Pipeline/"}]},{"title":"SonarQubeScanner for MSBuild 使用 Jenkins Plugin","slug":"SonarQubeScanner for MSBuild 使用 Jenkins Plugin","date":"2018-11-21T02:09:37.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2018/11/21/SonarQubeScanner for MSBuild 使用 Jenkins Plugin/","link":"","permalink":"https://ste5022424.github.io/2018/11/21/SonarQubeScanner for MSBuild 使用 Jenkins Plugin/","excerpt":"","text":"在 Jenkins 外掛中心 找到 SonarQube Scanner 把它安裝起來 檢查是否安裝完成 管理 Jenkins &gt; 設定系統 &gt; SonarQube servers 啟用並且設定Sonarqube server Global Tool Configuration 建置步驟 &gt;依序加入 樣板 將參數設定上去 忽略掃描 sonar.exclusions=obj\\,bin\\,packages\\*,Properties\\ 建置專案就會開始掃描 掃描成功 參考 如何使用 SonarQube 檢查 PHP 專案？","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"}]},{"title":"升級 Jenkins ver. 2.151 發生問題","slug":"升級-Jenkins-ver-2-151-發生問題","date":"2018-11-20T08:49:02.000Z","updated":"2019-12-12T06:26:29.557Z","comments":true,"path":"2018/11/20/升級-Jenkins-ver-2-151-發生問題/","link":"","permalink":"https://ste5022424.github.io/2018/11/20/升級-Jenkins-ver-2-151-發生問題/","excerpt":"","text":"升級 Jenkins ver. 2.151 發生問題org.apache.commons.jelly.JellyTagException:jar:file:/D:/Jenkins/war/WEB-INF/lib/jenkins-core-2.151.jar!/lib/layout/hasPermission.jelly:35:20: &lt;d:invokeBody&gt; com/trilead/ssh2/crypto/Base64 issuehttps://issues.jenkins-ci.org/browse/JENKINS-54708https://issues.jenkins-ci.org/browse/JENKINS-54686?focusedCommentId=354378&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-354378 問題是發生SSH Slaves版本(1.29.0)不相容，所以降版至(1.28.1)就可以了 因為jenkins掛掉了，所以要手動更新 先找到要下載的pluin ssh-slaves.hpi 下載 jenkins-cli.jar1https://你的jenkins網址/jnlpJars/jenkins-cli.jar 使用 jenkins-cli.jar 手動安裝1java -jar jenkins-cli.jar -s http://127.0.0.1 install-plugin http://updates.jenkins-ci.org/download/plugins/ssh-slaves/1.28.1/ssh-slaves.hpi -restart 如果有權限不足，先調整權限，之後再刪除 config.xml 12345&lt;permission&gt;hudson.model.Hudson.Administer:anonymous&lt;/permission&gt;&lt;permission&gt;hudson.model.Hudson.ConfigureUpdateCenter:anonymous&lt;/permission&gt;&lt;permission&gt;hudson.model.Hudson.Read:anonymous&lt;/permission&gt;&lt;permission&gt;hudson.model.Hudson.RunScripts:anonymous&lt;/permission&gt;&lt;permission&gt;hudson.model.Hudson.UploadPlugins:anonymous&lt;/permission&gt; 重新啟動 jenkins 就可以了","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"}]},{"title":"SonarQube 程式碼品質分析工具","slug":"SonarQube-程式碼品質分析工具","date":"2018-11-20T02:03:25.000Z","updated":"2019-12-12T06:26:29.555Z","comments":true,"path":"2018/11/20/SonarQube-程式碼品質分析工具/","link":"","permalink":"https://ste5022424.github.io/2018/11/20/SonarQube-程式碼品質分析工具/","excerpt":"","text":"建立 SonarQube Server下載 SonarQube 下載最新的 Java jre 執行 StartSonar.bat 進入 http://localhost:9000 就可以看到啟動成功 新增一個專案 這時候就會產生一個專案的key 給掃描驗證使用 4e4602940368f811feba160cc8797ac455ca65d8 掃描自己的程式(Analyzing with SonarScanner for MSBuild)下載 Analyzing with SonarScanner for MSBuild 先設定環境變數1D:\\sonarqube-7.4\\bin\\sonar-scanner-msbuild-4.4.2.1543-net46 建立 SonaQube 專案，它會在專案目錄底下建立 .sonarqube 資料夾 k:”{Project Index}” 在 sonarquble 上面建立的 keyn:”{Project Name}” 要掃描的專案名稱 1SonarQube.Scanner.MSBuild.exe begin /k:&quot;4e4602940368f811feba160cc8797ac455ca65d8&quot; /n:&quot;MyConsolTest&quot; /v:&quot;1.0&quot; 執行 Msbuild1&quot;C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\amd64\\msbuild.exe&quot; MyConsolTest.sln /t:Rebuild 執行掃描1SonarQube.Scanner.MSBuild.exe end 參考 SonarQube https://www.sonarqube.org/","categories":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/categories/SonarQube/"}],"tags":[{"name":"SonarQube","slug":"SonarQube","permalink":"https://ste5022424.github.io/tags/SonarQube/"}]},{"title":"Python Web Application Django","slug":"Python-Web-Application-Django","date":"2018-11-14T07:32:10.000Z","updated":"2019-12-12T06:26:29.552Z","comments":true,"path":"2018/11/14/Python-Web-Application-Django/","link":"","permalink":"https://ste5022424.github.io/2018/11/14/Python-Web-Application-Django/","excerpt":"","text":"Writing your first Django app建立專案123django-admin startproject mysite mysite/urls.py 啟動 Server1python manage.py runserver 建立 Polls App1python manage.py startapp polls 建立一個 views.py12345from django.http import HttpResponsedef index(request): return HttpResponse(&quot;Hello, world. You&apos;re at the polls index.&quot;) 建立一個 urls.py1234567from django.urls import pathfrom . import viewsurlpatterns = [ path(&apos;&apos;, views.index, name=&apos;index&apos;),] 修改 mysite/urls.py1234567from django.contrib import adminfrom django.urls import include, pathurlpatterns = [ path(&apos;polls/&apos;, include(&apos;polls.urls&apos;)), path(&apos;admin/&apos;, admin.site.urls),] 在 run 一次就可以看到剛剛寫的 Hello, world. You’re at the polls index.1python manage.py runserver 參考 Writing your first Django app, part 1 Use Django in Visual Studio Code","categories":[{"name":"python","slug":"python","permalink":"https://ste5022424.github.io/categories/python/"}],"tags":[{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://ste5022424.github.io/tags/Visual-Studio-Code/"},{"name":"Python","slug":"Python","permalink":"https://ste5022424.github.io/tags/Python/"},{"name":"Django","slug":"Django","permalink":"https://ste5022424.github.io/tags/Django/"}]},{"title":"Python Hello World","slug":"Python-Hello-World","date":"2018-11-14T06:59:14.000Z","updated":"2019-12-12T06:26:29.551Z","comments":true,"path":"2018/11/14/Python-Hello-World/","link":"","permalink":"https://ste5022424.github.io/2018/11/14/Python-Hello-World/","excerpt":"","text":"Python Hello WorldVisual Studio Code 安裝 Python 外掛 安裝 Python (https://www.python.org/downloads) 新增一個 hello.py，並輸入 hello world 12msg = &quot;Hello world~&quot;print(msg) F5 執行就可以看到 hello world 將程式片段選取後，按下 Shift + Enter 就可以執行程式碼片段 參考 Getting Started with Python in VS Code","categories":[{"name":"Python","slug":"Python","permalink":"https://ste5022424.github.io/categories/Python/"}],"tags":[{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://ste5022424.github.io/tags/Visual-Studio-Code/"},{"name":"Python","slug":"Python","permalink":"https://ste5022424.github.io/tags/Python/"}]},{"title":"AutoMapper","slug":"AutoMapper","date":"2018-11-08T03:08:28.000Z","updated":"2019-12-12T06:26:29.542Z","comments":true,"path":"2018/11/08/AutoMapper/","link":"","permalink":"https://ste5022424.github.io/2018/11/08/AutoMapper/","excerpt":"","text":"AutoMapper 兩個 class 要對映，可以使用linq來寫，但是當欄位一多的時候，就要寫的很多，這時候就可以使用 AutoMapper。 1234567891011121314151617181920212223242526private class MyClass&#123; public int A &#123; get; set; &#125; public int b &#123; get; set; &#125; public int c &#123; get; set; &#125; public int d &#123; get; set; &#125; public int e &#123; get; set; &#125; public int f &#123; get; set; &#125; public int g &#123; get; set; &#125; public int h &#123; get; set; &#125; public int i &#123; get; set; &#125; public int j &#123; get; set; &#125; public int k &#123; get; set; &#125; public int l &#123; get; set; &#125; public int hh &#123; get; set; &#125;&#125;private class MyClass2&#123; public int A &#123; get; set; &#125; public int b &#123; get; set; &#125; public int c &#123; get; set; &#125; public int d &#123; get; set; &#125; public int e &#123; get; set; &#125; public int hh &#123; get; set; &#125;&#125; 使用 Linq12345678910List&lt;MyClass2&gt; data = my.Select(x =&gt; new MyClass2()&#123; A = x.A, b = x.b, c = x.c, d = x.d, e = x.e, hh = x.hh&#125;).ToList(); 使用 AutoMapper 對映12345Mapper.Initialize(cfg =&gt;&#123; cfg.CreateMap&lt;MyClass, MyClass2&gt;();&#125;);List&lt;MyClass2&gt; data2 = Mapper.Map&lt;List&lt;MyClass2&gt;&gt;(my); 參考網址 Automapper官網 Automapper Github","categories":[{"name":"AutoMapper","slug":"AutoMapper","permalink":"https://ste5022424.github.io/categories/AutoMapper/"}],"tags":[{"name":"AutoMapper","slug":"AutoMapper","permalink":"https://ste5022424.github.io/tags/AutoMapper/"},{"name":"C#","slug":"C","permalink":"https://ste5022424.github.io/tags/C/"}]},{"title":"Rancher","slug":"Rancher","date":"2018-11-07T07:04:34.000Z","updated":"2019-12-12T06:26:29.552Z","comments":true,"path":"2018/11/07/Rancher/","link":"","permalink":"https://ste5022424.github.io/2018/11/07/Rancher/","excerpt":"","text":"參考網址 官網 官方文件","categories":[{"name":"Rancher","slug":"Rancher","permalink":"https://ste5022424.github.io/categories/Rancher/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"},{"name":"k8s","slug":"k8s","permalink":"https://ste5022424.github.io/tags/k8s/"},{"name":"Rancher","slug":"Rancher","permalink":"https://ste5022424.github.io/tags/Rancher/"}]},{"title":"CV","slug":"CV","date":"2018-11-05T08:33:58.000Z","updated":"2019-12-12T06:26:29.542Z","comments":true,"path":"2018/11/05/CV/","link":"","permalink":"https://ste5022424.github.io/2018/11/05/CV/","excerpt":"","text":"基本資料姓名: 巫佳溢Email: ste5022424@gmail.com學歷: 僑光科技大學資訊科技系 專業領域 Web:Asp.net Mvc(C#), AngularJs, Asp.Net Core DB:MsSql、Redis、Mongo 容器技術應用:Docker、Kubernetes Cloud:GCP DevOps:CI: JenkinsCD: OctopusELKGrafana 遊戲API串接:Ezgui、Yggdrasil Gaming 工作經歷 2013 僑光科技大學資訊科技系畢業 2014 向上國際股份有限公司 抓寶網: 開發及維護 2015 向上國際股份有限公司 至尊、百老匯、Golden City: Web全端開發、維護 2016 向上國際股份有限公司 老子有錢: Web全端開發、維護 2017 向上國際股份有限公司 老子有錢: Web全端開發、維護、遊戲串接 2018 向上國際股份有限公司 老子有錢: Web全端開發、維護、遊戲串接","categories":[],"tags":[{"name":"CV","slug":"CV","permalink":"https://ste5022424.github.io/tags/CV/"}]},{"title":"Surge 免費靜態網頁空間","slug":"surge","date":"2018-11-02T06:39:54.000Z","updated":"2019-12-12T06:26:29.557Z","comments":true,"path":"2018/11/02/surge/","link":"","permalink":"https://ste5022424.github.io/2018/11/02/surge/","excerpt":"","text":"Surge免費靜態網頁空間 安裝1npm install --global surge 請先安裝 Node.js 新增一個網頁123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;P&gt;Hello! world&lt;/P&gt;&lt;/body&gt;&lt;/html&gt; 輸入 surge 指令1surge 請自行輸入email 跟 密碼，還可以自訂Domain 上傳成功就可以看到網頁 http://ste5022424.surge.sh/index.html 部屬到自己定義的網址1surge --domain ste5022424.surge.sh 設定 https1surge --domain https://ste5022424.surge.sh 參考網址 Surge","categories":[{"name":"surge","slug":"surge","permalink":"https://ste5022424.github.io/categories/surge/"}],"tags":[{"name":"Surge","slug":"Surge","permalink":"https://ste5022424.github.io/tags/Surge/"}]},{"title":"Docker 介紹","slug":"Docker","date":"2018-10-19T05:44:56.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/10/19/Docker/","link":"","permalink":"https://ste5022424.github.io/2018/10/19/Docker/","excerpt":"","text":"Docker 是一個開源專案，它使用GO語言實作，讓應用程式在容器中工作並且可以自動進行，使用者不需要去關心容器的管理，操作 Docker 的容器就像操作一個快速輕量級的虛擬機。 https://www.docker.com/ Container 容器 Container技術採取共用Host OS ，不需在每一個Container內執行Guest OS，而是在OS內的核心系統層來打造虛擬執行環境，也被稱為是OS層的虛擬化技術。 Image 映像檔 映像檔一個唯讀的板模，裏面包含了容器內的所有應用程式 Docker 倉庫 存放Docker映像檔的倉庫，可以建立公用或者私用的倉庫 https://hub.docker.com/ Docker 常用指令安裝Docker1curl -fsSL https://get.docker.com/ | sh 查 Docker 版本docker version取得 映像檔docker pull查看 映像檔docker images -a 完整資訊 -q 只列檔名刪除 映像檔docker rmi image_id 匯出 映像檔docker save -o載入 映像檔docker load 查看 容器docker ps -a執行容器docker run -d 背景執行 --name 命名container -p 指定主機的port 轉到 container 的 port刪除 容器docker stop container_id docker rm container_id批次停止跟刪除 容器docker stop $(docker ps -a -q) docker rm $(docker ps -a -q)","categories":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"}]},{"title":"Docker run Jenkins","slug":"Docker run Jenkins","date":"2018-10-19T03:50:40.000Z","updated":"2019-12-12T06:26:29.543Z","comments":true,"path":"2018/10/19/Docker run Jenkins/","link":"","permalink":"https://ste5022424.github.io/2018/10/19/Docker run Jenkins/","excerpt":"","text":"Docker run Jenkins安裝 jenkins12mkdir -p -m 777 jenkins_homedocker run -d -p 8080:8080 -p 50000:50000 -v /jenkins_home:/var/jenkins_home --name jenkins jenkins 取得密碼(initialAdminPassword)1docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword 進入Jenkinshttp://127.0.0.1:8080/ 參考網址 Jenkins On Doker Get Started with Jenkins 2.0 with Docker","categories":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/categories/Jenkins/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://ste5022424.github.io/tags/Jenkins/"},{"name":"Docker","slug":"Docker","permalink":"https://ste5022424.github.io/tags/Docker/"}]},{"title":"SQL-Server-2017-安裝-登入","slug":"SQL-Server-2017-安裝-登入","date":"2018-10-17T09:27:29.000Z","updated":"2019-12-12T06:26:29.552Z","comments":true,"path":"2018/10/17/SQL-Server-2017-安裝-登入/","link":"","permalink":"https://ste5022424.github.io/2018/10/17/SQL-Server-2017-安裝-登入/","excerpt":"","text":"SQL Server 2017 安裝 &amp; 登入1. 下載sql server expresshttps://www.microsoft.com/zh-tw/sql-server/sql-server-downloads 2. 安裝 3. 設定允許用帳號登入 右鍵 &gt; 屬性 4. 設定 127.0.0.1 可以連線(1)開啟 &gt; SQL Server 2017 組態管理員 (2)啟動 TCP/IP(3)IPAll &gt; TCP通訊埠輸入 : 1433 (3)重新啟動 SQL Server 5. 使用帳號登入 參考網址 sql sa 登入失敗(18456) 最近sql server 炸了,重新安装后出现登录出现 连接SQL Server:无法连接到127.0.0.1也就是.","categories":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://ste5022424.github.io/categories/SQL-Server/"}],"tags":[{"name":"SQL-Server","slug":"SQL-Server","permalink":"https://ste5022424.github.io/tags/SQL-Server/"}]},{"title":"Kafka學習","slug":"Kafka學習","date":"2018-10-17T09:27:22.000Z","updated":"2019-12-12T06:26:29.549Z","comments":true,"path":"2018/10/17/Kafka學習/","link":"","permalink":"https://ste5022424.github.io/2018/10/17/Kafka學習/","excerpt":"","text":"KafkaBroker 叢集 Kafka 叢集 Topic 主題 每條發布的消息的有一個主題，像是頻道一樣 Patition 每個 Topic 包含多個 Patition Producer 生產者 生產者負責發布消息到 Broker 上 Consumer 消費者 消費者向 Kafka 讀取消息 Conusumer Group 消費者群組 Kafka Client* Confluent.Kafka * https://cwiki.apache.org/confluence/display/KAFKA/Clients#Clients-.NET * https://github.com/confluentinc/confluent-kafka-dotnetKafka GUI* Kafka Tool * http://www.kafkatool.com/參考網站 Kafka剖析（一）：Kafka背景及架构介绍 kafka 為什麼Kafka這麼快","categories":[{"name":"Kafka","slug":"Kafka","permalink":"https://ste5022424.github.io/categories/Kafka/"}],"tags":[{"name":"Kafka","slug":"Kafka","permalink":"https://ste5022424.github.io/tags/Kafka/"}]},{"title":"GO lang Hello World","slug":"Go-lang-學習","date":"2018-10-17T09:27:08.000Z","updated":"2019-12-12T06:26:29.544Z","comments":true,"path":"2018/10/17/Go-lang-學習/","link":"","permalink":"https://ste5022424.github.io/2018/10/17/Go-lang-學習/","excerpt":"","text":"GO lang Hello World !安裝 GO1. 下載https://golang.org/ 2. 選擇自己的作業系統 3. 安裝 4. 測試GO 是否有安裝成功 Visual Studio Code 開發安裝套件 Hello World 12345package mainimport \"fmt\"func main() &#123;fmt.Println(\"Hello, 世界\")&#125; GO WebApi簡單的 router 範例 1234567891011121314151617181920212223242526272829package mainimport (\"fmt\"\"log\"\"net/http\"\"github.com/gorilla/mux\")func main() &#123;router := mux.NewRouter().StrictSlash(true)router.HandleFunc(\"/\", Index)router.HandleFunc(\"/news\", News)router.HandleFunc(\"/news/&#123;DetailID&#125;\", Detail)log.Fatal(http.ListenAndServe(\":8080\", router))&#125;func Index(w http.ResponseWriter, r *http.Request) &#123;fmt.Fprintln(w, \"Home!\")&#125;func News(w http.ResponseWriter, r *http.Request) &#123;fmt.Fprintln(w, \"最新消息 Master\")&#125;func Detail(w http.ResponseWriter, r *http.Request) &#123;vars := mux.Vars(r)DetailID := vars[\"DetailID\"]fmt.Fprintln(w, \"最新消息 Detail ID:\", DetailID)&#125; 參考網址 官方網站 GO WEB API 7個GO WEB API框架 微服務 GO 用GO構建 Restful API Golang 建構簡單WEB 框架","categories":[{"name":"Go","slug":"Go","permalink":"https://ste5022424.github.io/categories/Go/"}],"tags":[{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://ste5022424.github.io/tags/Visual-Studio-Code/"},{"name":"Go","slug":"Go","permalink":"https://ste5022424.github.io/tags/Go/"}]},{"title":"使用 Hexo 建立 Github Blog","slug":"使用-Hexo-建立-Github-Blog","date":"2018-10-17T09:23:06.000Z","updated":"2019-12-12T06:26:29.557Z","comments":true,"path":"2018/10/17/使用-Hexo-建立-Github-Blog/","link":"","permalink":"https://ste5022424.github.io/2018/10/17/使用-Hexo-建立-Github-Blog/","excerpt":"","text":"事先安裝 Git Node js Visual Studio Code Github 新增.github.io專案 安裝 Hexo1npm install hexo-cli -g 建立專案1hexo init D:\\\\blog 使用 vs code 開啟 更換部落格樣式挑選自己喜歡的主題https://hexo.io/themes/index.html 取得套件(以 Noise為範例) 1git clone https://github.com/iissnan/hexo-theme-next.git ./themes/Noise 設定 _config.yml 1theme: Noise 啟動server 1hexo s -p 8080 檢視網站 發佈到自己的Github安裝 hexo-deployer-git。 1npm install hexo-deployer-git --save 設定_config.yml1234deploy: type: git repo: https://github.com/yourUsername/yourUsername.github.io.git branch: master 部屬至 github 1hexo deploy 檢視網站 建立第一篇文章建立文章 1hexo new &quot;使用 Hexo 建立 Github Blog&quot; 編輯文章 建立網站 categories新增一個 categories 頁面 1hexo new page categories 編輯 categories/index.md 12345---title: 文章分類date: 2018-10-17 18:25:40type: &quot;categories&quot;--- 在文章上加入 categories 1234567---title: 使用 Hexo 建立 Github Blogdate: 2018-10-17 17:23:06tags: categories:- 學習--- 建立網站 tag新增一個 tags 頁面1hexo new page tags 編輯 tags/index.md 12345---title: tagsdate: 2018-10-17 18:40:57type: &quot;tags&quot;--- 在文章上加入 tags 12345678---title: 使用 Hexo 建立 Github Blogdate: 2018-10-17 17:23:06tags:- Hexocategories:- 學習--- 搜尋功能安裝 hexo-generator-searchhexo-generator-search 1npm install hexo-generator-search --save 在_config.yml 找到 local_search 將 enable 設定為true 參考網址Hexo 官方網站 : https://hexo.io/zh-tw/Hexo 文件 :https://hexo.io/zh-tw/api/Hexo Them :https://hexo.io/themes/index.htmlHexo使用攻略-添加分类及标签[Hexo] 快速上手 Hexo 網誌框架可能是最詳細的 Hexo + GitHub Pages 搭建部落格的教程用Hexo + Github Pages搭建個人部落格Hexo的NexT主题个性化：添加文章阅读量Sign up to Leancloud and create an app","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ste5022424.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ste5022424.github.io/tags/Hexo/"}]}]}